Index: src/Controller/GameController.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># GameController.py\r\n\r\nimport json\r\nimport os.path\r\n\r\nfrom src.Model.Gameboard import *\r\nfrom src.Model.Player import *\r\nfrom src.Model.GameLogic import GameLogic\r\nfrom datetime import datetime\r\nfrom src.View.GUI import *\r\nfrom tests.test_GameLogic import players_list\r\n\r\n\r\nclass GameController:\r\n    def __init__(self, the_gui):\r\n        self.save_name = None\r\n        self.board = Gameboard()\r\n        self.game_logic = GameLogic()\r\n        self.gui = the_gui\r\n        self.player_list = []\r\n        self.broke_list = []\r\n        self.all_players = []\r\n        self.input_handler = self.gui.input_handler\r\n        self.click_var = tk.StringVar()\r\n        self.new_name_frame = self.gui.new_game_frame\r\n\r\n        #store the function related to all the buttons to an array for better initialization in button_play\r\n        self.function_array = [self.roll_dice,self.buy_button,self.no_buy_button]\r\n\r\n        #binding the buttons\r\n        self.gui.new_game_canvas.tag_bind(self.gui.play_button_clickable_area, \"<Button-1>\", lambda e: self.button_play())\r\n\r\n        # passes necessary information to the gui and creates missing frames\r\n        self.pass_color_information_for_display()\r\n        self.pass_tile_information_for_display()\r\n\r\n    def get_player_list(self):\r\n        return self.player_list\r\n\r\n    def set_player_list(self, player_list):\r\n        self.player_list = player_list.copy()\r\n\r\n    def get_broke_player_list(self):\r\n        return self.broke_list\r\n\r\n    def set_broke_player_list(self, broke_list):\r\n        self.broke_list = broke_list.copy()\r\n\r\n    def get_current_round(self):\r\n        return self.game_logic.get_current_round()\r\n\r\n    def get__turn(self):\r\n        return self.game_logic.get_player_turn()\r\n\r\n    def set__turn(self, turn):\r\n        self.game_logic._player_turn = turn\r\n\r\n    def set_current_round(self, new_round):\r\n        self.game_logic.set_current_round(new_round)\r\n\r\n    def set_save_name(self, save_name):\r\n        self.save_name = save_name\r\n\r\n    def set_remove_last_round(self, remove_last_round):\r\n        self.game_logic.set_removed_last_round(remove_last_round)\r\n\r\n    def pass_tile_information_for_display(self):\r\n        for i in range(0, 20):\r\n            empty_9tuple = [None, None, None, None, None, None, None, None, None]\r\n            # creates new empty row\r\n            self.gui.gameplay_frame.tile_info.append(empty_9tuple)\r\n\r\n            # for easier reading of code\r\n            tile_info = self.gui.gameplay_frame.tile_info[i]\r\n            board_tile = self.board.tiles[i]\r\n\r\n            # updates fields with relevant information\r\n            tile_info[0] = board_tile.get_tile_type()\r\n            tile_info[1] = board_tile.get_tile_name()\r\n            if tile_info[0] == \"property\":\r\n                tile_info[2] = board_tile.get_price()\r\n                tile_info[3] = board_tile.get_rent()\r\n                tile_info[4] = board_tile.get_owner()\r\n            elif tile_info[0] == \"go\":\r\n                tile_info[2] = board_tile.get_pass_prize()\r\n            elif tile_info[0] == \"income_tax\":\r\n                tile_info[2] = board_tile.get_income_tax()\r\n\r\n    def update_all_game_info(self):\r\n        self.pass_updated_tile_ownership_info()\r\n        self.pass_updated_players_info()\r\n        self.gui.gameplay_frame.update_display_info(self.gui.game_canvas)\r\n\r\n    # for each tile in the\r\n    def pass_updated_tile_ownership_info(self):\r\n        # checks only the property positions\r\n        for i in [1, 2, 4, 6, 7, 9, 11, 13, 14, 16, 17, 19]:\r\n            board_tile = self.board.tiles[i]\r\n            tile_info = self.gui.gameplay_frame.tile_info[i]\r\n            tile_info[4] = board_tile.get_owner()\r\n\r\n    def pass_updated_players_info(self):\r\n        for i in range(0, len(self.all_players)):\r\n            self.gui.gameplay_frame.player_info[i][1] = self.all_players[i].get_current_money()\r\n            curr_pos = self.all_players[i].get_current_position()\r\n            self.gui.gameplay_frame.player_info[i][2] = self.board.tiles[curr_pos].get_tile_name()\r\n            self.gui.gameplay_frame.player_info[i][3] = self.all_players[i].get_jail_status()\r\n            self.gui.gameplay_frame.player_info[i][4] = self.all_players[i].get_in_jail_turns()\r\n            self.gui.gameplay_frame.player_info[i][5] = len(self.all_players[i].get_properties_list())\r\n\r\n    def pass_player_information_for_display(self):\r\n        for i in range(0, len(self.all_players)):\r\n            # info passed: [name, balance, position, isJailed, inJailTurns, #propOwned]\r\n            player_tuple = [None, None, None, None, None, None]\r\n            self.gui.gameplay_frame.player_info.append(player_tuple)    #adds new 6-tuple\r\n            self.gui.gameplay_frame.player_info[i][0] = self.all_players[i].get_name()\r\n        self.pass_updated_players_info()\r\n\r\n    def pass_color_information_for_display(self):\r\n        for i in range(0, 20):\r\n            color_tuple = [None, None]\r\n            self.gui.gameplay_frame.tile_colors.append(color_tuple)\r\n            has_color = self.gui.gameplay_frame.get_color_coord(i)\r\n            if has_color:\r\n                color = self.board.tiles[i].get_color()\r\n                self.gui.gameplay_frame.set_color(i, color)\r\n\r\n    # ----------Hiding logic in controller----------#\r\n    def hide_roll_image(self):\r\n        self.gui.gameplay_frame.hide_roll_image(self.gui.game_canvas)\r\n\r\n    def hide_yes_buy_image(self):\r\n        self.gui.gameplay_frame.hide_yes_image(self.gui.game_canvas)\r\n        # bind 'buy'\r\n\r\n    def hide_no_buy_image(self):\r\n        self.gui.gameplay_frame.hide_no_image(self.gui.game_canvas)\r\n\r\n    def hide_pay_fine_image(self):\r\n        self.gui.gameplay_frame.hide_pay_fine_image(self.gui.game_canvas)\r\n\r\n    def unbind_roll_button(self):\r\n        self.hide_roll_image()\r\n        self.gui.game_canvas.tag_unbind(self.gui.game_frame_click_areas[0], \"<Button-1>\")\r\n\r\n    def unbind_yes_buy_button(self):\r\n        self.hide_yes_buy_image()\r\n        self.gui.game_canvas.tag_unbind(self.gui.game_frame_click_areas[1], \"<Button-1>\")\r\n\r\n    def unbind_no_buy_button(self):\r\n        self.hide_no_buy_image()\r\n        self.gui.game_canvas.tag_unbind(self.gui.game_frame_click_areas[2], \"<Button-1>\")\r\n\r\n    def unbind_pay_fine_button(self, player_this_turn):\r\n        self.hide_pay_fine_image()\r\n        self.gui.game_canvas.tag_unbind(self.gui.game_frame_click_areas[3], \"<Button-1>\")\r\n\r\n    def unbind_in_jail_roll_button(self, player_this_turn):\r\n        self.hide_roll_image()\r\n        self.gui.game_canvas.tag_unbind(self.gui.game_frame_click_areas[0], \"<Button-1>\")\r\n\r\n    # ----------------------------------------------#\r\n\r\n    # ----------Showing logic in controller---------#\r\n    def show_roll_image(self):\r\n        self.gui.gameplay_frame.show_roll_image(self.gui.game_canvas)\r\n\r\n    def show_yes_buy_image(self):\r\n        self.gui.gameplay_frame.show_yes_image(self.gui.game_canvas)  # show the buy(yes) image\r\n\r\n    def show_no_buy_image(self):\r\n        self.gui.gameplay_frame.show_no_image(self.gui.game_canvas)  # show the no_buy(no) image\r\n\r\n    def show_pay_fine_image(self):\r\n        self.gui.gameplay_frame.show_pay_fine_image(self.gui.game_canvas)\r\n\r\n    def bind_roll_button(self, action):\r\n        self.show_roll_image()\r\n        self.gui.game_canvas.tag_bind(self.gui.game_frame_click_areas[0], \"<Button-1>\",\r\n                                      lambda e: self.roll_dice(\r\n                                          action[1]))  # selection player next turn to roll the dice\r\n\r\n    def bind_yes_buy_button(self):\r\n        self.show_yes_buy_image()\r\n        self.gui.game_canvas.tag_bind(self.gui.game_frame_click_areas[1], \"<Button-1>\",\r\n                                      lambda e: self.buy_button())  # bind 'buy'\r\n\r\n    def bind_no_buy_button(self):\r\n        self.show_no_buy_image()\r\n        self.gui.game_canvas.tag_bind(self.gui.game_frame_click_areas[2], \"<Button-1>\",\r\n                                      lambda e: self.no_buy_button())  # bind 'not_buy'\r\n\r\n    def bind_pay_fine_button(self, player_this_turn):\r\n        self.show_pay_fine_image()\r\n        self.gui.game_canvas.tag_bind(self.gui.game_frame_click_areas[3], \"<Button-1>\",\r\n                                      lambda e: self.pay_fine(player_this_turn))  # bind 'not_buy'\r\n\r\n    def bind_in_jail_roll_button(self, player_this_turn):\r\n        self.show_roll_image()\r\n        self.gui.game_canvas.tag_bind(self.gui.game_frame_click_areas[0], \"<Button-1>\",\r\n                                      lambda e: self.in_jail_roll(player_this_turn))  # bind 'in_jail_roll'\r\n\r\n    # ----------------------------------------------#\r\n\r\n    \"\"\" This function is called after the 'Play' button is clicked in the game \"\"\"\r\n\r\n    def button_play(self):\r\n        if self.new_name_frame.check_and_start_game(self.input_handler):\r\n\r\n            print(\"In the Game!!!\",len(self.input_handler.players_names))#TODO del this line later\r\n            for player_name in self.input_handler.players_names:\r\n                if player_name is not None:\r\n                    player = Player(player_name)\r\n                    self.player_list.append(player)\r\n            self.all_players = self.player_list.copy()  # maintains a record copy of all players obj to keep updating the view even after they are broke\r\n            self.pass_player_information_for_display()  # now that players are created, informations are passed to the view\r\n            self.gui.show_game_play_frame()     # builds gameplay frame when it has all necessary information\r\n            self.game_logic.set_player_turn(self.get_player_list())\r\n            player_this_turn = self.get_player_list()[self.game_logic.get_player_turn()]\r\n\r\n            # Show the GameBoard frame\r\n            self.gui.show_frame(\"gameplay\")\r\n            print(player_this_turn.get_name(),\" is now playing\") #TODO del this line later\r\n            # hide all the buttons apart from the roll button\r\n            self.gui.gameplay_frame.hide_yes_image(self.gui.game_canvas)\r\n            self.gui.gameplay_frame.hide_no_image(self.gui.game_canvas)\r\n            self.gui.gameplay_frame.hide_pay_fine_image(self.gui.game_canvas)\r\n            #bind the buttons\r\n            self.gui.game_canvas.tag_bind(self.gui.game_frame_click_areas[0], \"<Button-1>\", lambda e: self.roll_dice(player_this_turn))\r\n            # TODO <display highlight player_this_turn ONLY.>\r\n\r\n\r\n    def determine_next_round(self, player_this_turn):\r\n        \"\"\" Action is an array that stores the state of the Model after calling the 'determine_next_round' function \"\"\"\r\n        action = GameLogic.determine_next_round(self.game_logic, player_this_turn, self.player_list,self.broke_list)\r\n\r\n        if action[0] == \"game_ends\":\r\n            print(action[1])\r\n            # TODO <display the winner>\r\n            # wait for click event\r\n            return\r\n\r\n        # TODO <Display the player for next round>\r\n        if action[0] == \"jail_roll\":\r\n            # TODO <display jail_roll only>\r\n            self.bind_in_jail_roll_button(action[1])\r\n            print(\"\\nNext round, click roll\\n\")  # TODO del later\r\n            if action[2] == \"fine_payed\":\r\n                print(action[1].get_name(), \"is in Jail. Fine already paid. Can move out of Jail after roll\") #TODO del\r\n            elif action[2] == \"player_third_turn\":\r\n                print(action[1].get_name(), \"is in Jail, and in third turn. Roll first\") #TODO del\r\n            else:\r\n                print(action[1].get_name(), \"is in Jail, and have no money to pay fine\") #TODO del\r\n        elif action[0] == \"pay_fine_and_jail_roll\":\r\n            # TODO <display jail_roll and pay fine>\r\n            self.bind_in_jail_roll_button(action[1])\r\n            self.bind_pay_fine_button(action[1])\r\n            print(\"\\nNext round, click roll\\n\")  # TODO del later\r\n            print(action[1].get_name(), \"Not yet paid and in Jail\") #TODO del\r\n        elif action[0] == \"roll\":\r\n            self.gui.gameplay_frame.show_roll_image(self.gui.game_canvas)\r\n            self.gui.game_canvas.tag_bind(self.gui.game_frame_click_areas[0], \"<Button-1>\", lambda e: self.roll_dice(action[1])) #selection player next turn to roll the dice\r\n            print(\"Current Money: \",player_this_turn.get_current_money()) #TODO del later\r\n            print(\"\\nNext round,\", action[1].get_name(),\"'s turn. click roll\\n\") #TODO del later\r\n\r\n    def land_and_complete_round(self, tile, player_this_turn):\r\n        tile_type = tile.get_tile_type()\r\n        action = None\r\n        if tile_type == \"property\":\r\n            if tile.get_owner() is None:\r\n                can_buy = tile.can_buy(player_this_turn)\r\n                # TODO show button buy or not buy\r\n                print(\"buy(Yes) or not buy(No)\") #TODO del later\r\n                self.bind_yes_buy_button() #show and bind the yes(buy) button\r\n                self.bind_no_buy_button() #show and bind the no(buy) button\r\n                self.gui.wait_variable(self.click_var)  # waits for the click_var to update before allowing execution\r\n                if self.click_var.get() == \"buy\":\r\n                    if can_buy:\r\n                        action = \"buy\"\r\n                        print(player_this_turn.get_name(),\" is now buying\") #TODO del later\r\n                    else:\r\n                        #TODO display not enough money\r\n                        print(\"Not enough money\") #del\r\n                        action = \"not_buy\"\r\n                elif self.click_var.get() == \"not_buy\":\r\n                    action = \"not_buy\"\r\n            else:\r\n                # TODO update view for rent\r\n                action = \"rent\"\r\n            tile.player_landed(player_this_turn, action)\r\n            self.unbind_yes_buy_button() #unbind and hide the yes_buy_button\r\n            self.unbind_no_buy_button() #unbind and the hide the no_buy_button\r\n        elif tile_type == \"jail\":\r\n            # TODO update view just visiting\r\n            pass\r\n        elif tile_type == \"go\":\r\n            # TODO update view\r\n            pass\r\n        elif tile_type == \"go_to_jail\": ######### Problem here, fix later parameter's problem\r\n            tile.player_landed(player_this_turn)\r\n            # TODO jail animation\r\n        elif tile_type == \"income_tax\":\r\n            tile.player_landed()\r\n            # TODO tax animation\r\n            pass\r\n        elif tile_type == \"free_parking\":\r\n            # TODO parking animation\r\n            pass\r\n        else:\r\n            tile.player_landed(player_this_turn)\r\n        self.update_all_game_info()\r\n\r\n    \"\"\"This function is called after pressing the 'Roll' button in the game window.\"\"\"\r\n\r\n    def roll_dice(self,player_this_turn):\r\n        self.unbind_roll_button() #unbind the roll button\r\n        dice_roll1, dice_roll2 = GameLogic.roll_dice()\r\n        tile = GameLogic.player_move(dice_roll1 + dice_roll2, player_this_turn, self.board)\r\n        #player_this_turn = self.get_player_list()[self.game_logic.get_player_turn()]\r\n        print(player_this_turn.get_name(), \"is Rolling, and rolled: \", dice_roll1+dice_roll2)#TODO del this line later\r\n        print(\"Money: \",player_this_turn.get_current_money())#TODO del this line later\r\n        print(\"Square:\",player_this_turn.get_current_position())#TODO del this line later\r\n        print(tile.get_tile_name()) #TODO del\r\n        # TODO<Call function to display the animation in the view>\r\n        self.update_all_game_info()\r\n        self.land_and_complete_round(tile, player_this_turn)\r\n        self.determine_next_round(player_this_turn)\r\n\r\n    # Roll function for player in jail\r\n    def in_jail_roll(self, player_this_turn):\r\n        #unbind the in_jail_roll button and pay_fine button\r\n        self.unbind_roll_button()\r\n        self.unbind_pay_fine_button(player_this_turn)\r\n\r\n        print(player_this_turn.get_name(), \"is Rolling IN JAIL.\") # TODO del this line later\r\n        print(\"Money: \", player_this_turn.get_current_money())  # TODO del this line later\r\n        print(\"Square:\", player_this_turn.get_current_position())  # TODO del this line later\r\n\r\n        action = GameLogic.in_jail_roll(self.game_logic, player_this_turn, self.board)\r\n        if action[0] == \"show_pay_fine\":\r\n            # TODO <show the pay fine button>\r\n            self.bind_pay_fine_button(player_this_turn) #bind and show the pay_fine button\r\n            self.gui.wait_variable(self.click_var)  # wait for pay fine button to be clicked\r\n            #TODO display fine paid\r\n            if action[1] is not None:\r\n                print(\"Fine paid. Move on\") #TODO del\r\n                self.land_and_complete_round(action[1], player_this_turn)\r\n                # TODO <show moving animation>\r\n        elif action[0] == \"move\":\r\n            # TODO <show animation for player moving>\r\n            print(\"Out of Jail, Move on\") #TODO del\r\n            self.land_and_complete_round(action[1], player_this_turn)\r\n        elif action[0] == 'not_move':\r\n            pass  # del\r\n        self.determine_next_round(player_this_turn)\r\n\r\n    def pay_fine(self, player_this_turn):\r\n        # pay_fine_logic\r\n        GameLogic.pay_fine(self.game_logic, player_this_turn)\r\n        self.update_all_game_info()\r\n        self.click_var.set(\"pay_fine\")\r\n        print(\"Paying fine\") #TODO del\r\n        self.unbind_pay_fine_button(player_this_turn)\r\n        # TODO <Show the money is deduced>\r\n\r\n    def buy_button(self):\r\n        self.click_var.set(\"buy\")\r\n        print(\"Buying\") #TODO del\r\n\r\n    def no_buy_button(self):\r\n        self.click_var.set(\"no_buy\")\r\n        print(\"Not Buying\") #TODO del\r\n        # TODO <Show did not buy property>\r\n\r\n\r\n    def end_game(self):\r\n        # Need to modify the logic in GameLogic endgame\r\n        pass\r\n\r\n    def save_gameboard(self, save_name):\r\n        # gets current directory in which the program is running\r\n        save_directory = os.path.dirname(os.path.abspath(__file__))\r\n\r\n        # moves up and into the saves directory and normalizes the path\r\n        save_directory = os.path.normpath(os.path.join(save_directory, \"..\", \"..\", \"saves/gameboard_setups\"))\r\n        message1 = \"\"\r\n\r\n        # ensures directory existence or creates\r\n        if not os.path.exists(save_directory):\r\n            os.makedirs(save_directory)\r\n            message1 = \"Save directory deleted or non existent --> Creating\"\r\n\r\n        gameboard_setup = SavedGameboard(save_name, self)\r\n        gameboard_data = gameboard_setup.to_dictionary()\r\n        file_path = os.path.join(save_directory, f'{save_name}.json')\r\n        with open(file_path, 'w') as save_file:\r\n            json.dump(gameboard_data, save_file, indent=4)\r\n            message = \"Game saved successfully.\\n\"\r\n        return f\"{message1}\\n{message}\"\r\n\r\n    # noinspection PyTypeChecker\r\n    def save_game(self, save_name):\r\n        # gets current directory in which the program is running\r\n        save_directory = os.path.dirname(os.path.abspath(__file__))\r\n\r\n        # moves up and into the saves directory and normalizes the path\r\n        save_directory = os.path.normpath(os.path.join(save_directory, \"..\", \"..\", \"saves/games\"))\r\n        message1 = \"\"\r\n\r\n        # ensures directory existence or creates\r\n        if not os.path.exists(save_directory):\r\n            os.makedirs(save_directory)\r\n            message1 = \"Save directory deleted or non existent --> Creating\"\r\n\r\n        save_instance = SavedGame(save_name, self)\r\n        game_data = save_instance.to_dictionary()\r\n        file_path = os.path.join(save_directory, f'{save_name}.json')\r\n        with open(file_path, 'w') as save_file:\r\n            json.dump(game_data, save_file, indent=4)\r\n            message = \"Game saved successfully.\\n\"\r\n        return f\"{message1}\\n{message}\"\r\n\r\n    # loads gameboard_data into gameboard object, if data is passed, handles it, otherwise acts on the board_name and looks for it\r\n    def load_gameboard(self, board_name = \"\", game_data_dict = None):\r\n        if game_data_dict is None:\r\n            # determines the filepath of the saved gameboard\r\n            save_directory = os.path.dirname(os.path.abspath(__file__))\r\n            save_directory = os.path.normpath(os.path.join(save_directory, \"..\", \"..\", \"saves/gameboard_setups\"))\r\n            file_path = os.path.join(save_directory, f'{board_name}.json')\r\n\r\n            # parse save file into a dictionary and handles exceptions\r\n            try:\r\n                with open(file_path, 'r') as game_data:\r\n                    game_data_dict = json.load(game_data)\r\n            except FileNotFoundError:\r\n                print(\"Board layout does not exist.\")\r\n                return\r\n            except json.JSONDecodeError:\r\n                print(\"Error in reading save file.\")\r\n                return\r\n\r\n        # gameboard_setup is a list of dictionaries, will cycle and update appropriately\r\n        gameboard_info = game_data_dict[\"gameboard_data\"][\"gameboard_setup\"]\r\n        for tile_info, i in zip(gameboard_info, range(20)):\r\n            self.board.tiles[i].update_name_pos_type(tile_info[\"name\"], tile_info[\"board_pos\"], tile_info[\"tile_type\"])\r\n            tile_type = tile_info[\"tile_type\"]\r\n            if tile_type == \"property\":\r\n                self.board.tiles[i].update_values(tile_info[\"price\"], tile_info[\"rent\"], tile_info[\"owner\"], tile_info[\"color\"])\r\n            elif tile_type == \"income_tax\":\r\n                self.board.tiles[i].update_values(tile_info[\"tax_percentage\"])\r\n            elif tile_type == \"jail\":\r\n                self.board.tiles[i].update_values(tile_info[\"jailed_players\"])\r\n            elif tile_type == \"go\":\r\n                self.board.tiles[i].update_values(tile_info[\"pass_prize\"])\r\n\r\n    def load_game(self, load_name):\r\n        # gets current directory in which the program is running\r\n        save_directory = os.path.dirname(os.path.abspath(__file__))\r\n\r\n        # moves up and into the saves directory and normalizes the path\r\n        save_directory = os.path.normpath(os.path.join(save_directory, \"..\", \"..\", \"saves/games\"))\r\n\r\n        file_path = os.path.join(save_directory, f'{load_name}.json')\r\n\r\n        # parse save file into a dictionary and handles exceptions\r\n        try:\r\n            with open(file_path, 'r') as game_data:\r\n                game_data_dict = json.load(game_data)\r\n        except FileNotFoundError:\r\n            print(\"Game saved does not exist.\")\r\n            return\r\n        except json.JSONDecodeError:\r\n            print(\"Error in reading save file.\")\r\n            return\r\n\r\n        # pulls information from the dictionary into respective variables\r\n        self.set_save_name(game_data_dict[\"save_name\"])\r\n        self.set_current_round(game_data_dict[\"current_round\"])\r\n        self.set__turn(game_data_dict[\"_turn\"])\r\n        self.set_remove_last_round(game_data_dict[\"remove_last_round\"])\r\n\r\n        self.load_gameboard(\"\", game_data_dict)\r\n\r\n        # creates players objects and copies information from the dictionary\r\n        players = game_data_dict[\"players_list\"]\r\n        for p_data in players:\r\n            new_player = Player(\"\")\r\n            new_player.update_values(p_data[\"_username\"], p_data[\"_current_money\"], p_data[\"_jail_status\"], p_data[\"_fine_payed\"], p_data[\"_current_square\"], p_data[\"_in_jail_turns\"], p_data[\"_properties\"])\r\n            self.player_list.append(new_player)\r\n\r\n        broke_players = game_data_dict[\"broke_list\"]\r\n        for p_data in broke_players:\r\n            new_player = Player(\"\")\r\n            new_player.update_values(p_data[\"_username\"], p_data[\"_current_money\"], p_data[\"_jail_status\"], p_data[\"_fine_payed\"], p_data[\"_current_square\"], p_data[\"_in_jail_turns\"], p_data[\"_properties\"])\r\n            self.broke_list.append(new_player)\r\n\r\nclass SavedGameboard:\r\n    def __init__(self, save_name, game_controller):\r\n        self.board_name = save_name\r\n        self.tiles = game_controller.board.tiles.copy()\r\n\r\n    def to_dictionary(self):\r\n        gameboard_data = [tile.__dict__ for tile in self.tiles]\r\n        return {\r\n            \"board_name\": self.board_name,\r\n            \"gameboard_setup\": gameboard_data\r\n        }\r\n\r\n# this class will copy the current game instance\r\nclass SavedGame:\r\n    def __init__(self, save_name, game_controller):\r\n        # Gets the name of the save and current round\r\n        self.save_name = save_name\r\n        self.save_time = datetime.now().strftime(\"%H:%M %d-%m-%Y\")\r\n        self._turn = game_controller.get__turn()\r\n        self.remove_last_round = game_controller.game_logic.get_remove_last_round()\r\n        self.current_round = game_controller.get_current_round()\r\n\r\n        # Saves the setup of the gameboard as a list\r\n        self.gameboard = SavedGameboard(\"\", game_controller)\r\n\r\n        # Saves players information\r\n        self.player_list = game_controller.get_player_list().copy()\r\n        self.broke_list = game_controller.get_broke_player_list().copy()\r\n\r\n    def to_dictionary(self):\r\n        # unpacks list of objects to a list of dictionary entries\r\n        gameboard_data = self.gameboard.to_dictionary()\r\n        player_data = [player.__dict__ for player in self.player_list]\r\n        broke_player_data = [player.__dict__ for player in self.broke_list]\r\n\r\n        return {\r\n            \"save_name\": self.save_name,\r\n            \"save_time\": self.save_time,\r\n            \"_turn\": self._turn,\r\n            \"remove_last_round\": self.remove_last_round,\r\n            \"current_round\": self.current_round,\r\n            \"gameboard_data\": gameboard_data,\r\n            \"players_list\": player_data,\r\n            \"broke_list\": broke_player_data\r\n        }\r\n\r\n    def get_save_name(self):\r\n        return self.save_name
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Controller/GameController.py b/src/Controller/GameController.py
--- a/src/Controller/GameController.py	(revision 83090fff8b9239d266119cf2ce5627707757ef27)
+++ b/src/Controller/GameController.py	(date 1731309923824)
@@ -227,22 +227,20 @@
             self.gui.gameplay_frame.hide_pay_fine_image(self.gui.game_canvas)
             #bind the buttons
             self.gui.game_canvas.tag_bind(self.gui.game_frame_click_areas[0], "<Button-1>", lambda e: self.roll_dice(player_this_turn))
-            # TODO <display highlight player_this_turn ONLY.>
-
 
     def determine_next_round(self, player_this_turn):
         """ Action is an array that stores the state of the Model after calling the 'determine_next_round' function """
-        action = GameLogic.determine_next_round(self.game_logic, player_this_turn, self.player_list,self.broke_list)
+        action, winners_list = GameLogic.determine_next_round(self.game_logic, player_this_turn, self.player_list,self.broke_list)
 
         if action[0] == "game_ends":
             print(action[1])
-            # TODO <display the winner>
+            self.update_all_game_info()
+            self.gui.gameplay_frame.display_winners_on_canvas(self.gui.game_canvas, winners_list)
             # wait for click event
             return
 
-        # TODO <Display the player for next round>
+        self.gui.gameplay_frame.highlight_current_player(self.gui.game_canvas, self.game_logic.get_player_turn())
         if action[0] == "jail_roll":
-            # TODO <display jail_roll only>
             self.bind_in_jail_roll_button(action[1])
             print("\nNext round, click roll\n")  # TODO del later
             if action[2] == "fine_payed":
@@ -252,7 +250,6 @@
             else:
                 print(action[1].get_name(), "is in Jail, and have no money to pay fine") #TODO del
         elif action[0] == "pay_fine_and_jail_roll":
-            # TODO <display jail_roll and pay fine>
             self.bind_in_jail_roll_button(action[1])
             self.bind_pay_fine_button(action[1])
             print("\nNext round, click roll\n")  # TODO del later
@@ -269,18 +266,19 @@
         if tile_type == "property":
             if tile.get_owner() is None:
                 can_buy = tile.can_buy(player_this_turn)
-                # TODO show button buy or not buy
                 print("buy(Yes) or not buy(No)") #TODO del later
-                self.bind_yes_buy_button() #show and bind the yes(buy) button
                 self.bind_no_buy_button() #show and bind the no(buy) button
+                if can_buy:
+                    self.bind_yes_buy_button() #show and bind the yes(buy) button
+                else:
+                    self.gui.gameplay_frame.show_not_enough_money(self.gui.game_canvas)
                 self.gui.wait_variable(self.click_var)  # waits for the click_var to update before allowing execution
                 if self.click_var.get() == "buy":
                     if can_buy:
                         action = "buy"
                         print(player_this_turn.get_name()," is now buying") #TODO del later
                     else:
-                        #TODO display not enough money
-                        print("Not enough money") #del
+                        print("Not enough money")
                         action = "not_buy"
                 elif self.click_var.get() == "not_buy":
                     action = "not_buy"
@@ -297,10 +295,10 @@
             # TODO update view
             pass
         elif tile_type == "go_to_jail": ######### Problem here, fix later parameter's problem
-            tile.player_landed(player_this_turn)
+            tile.player_landed(player_this_turn, self.board.get_jail_tile())
             # TODO jail animation
         elif tile_type == "income_tax":
-            tile.player_landed()
+            tile.player_landed(player_this_turn)
             # TODO tax animation
             pass
         elif tile_type == "free_parking":
@@ -338,7 +336,6 @@
 
         action = GameLogic.in_jail_roll(self.game_logic, player_this_turn, self.board)
         if action[0] == "show_pay_fine":
-            # TODO <show the pay fine button>
             self.bind_pay_fine_button(player_this_turn) #bind and show the pay_fine button
             self.gui.wait_variable(self.click_var)  # wait for pay fine button to be clicked
             #TODO display fine paid
@@ -353,6 +350,7 @@
         elif action[0] == 'not_move':
             pass  # del
         self.determine_next_round(player_this_turn)
+        self.update_all_game_info()
 
     def pay_fine(self, player_this_turn):
         # pay_fine_logic
Index: src/View/DisplayManager.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nimport os\r\n\r\n# Base path for assets\r\nassets_base_path = os.path.join(os.path.dirname(__file__), \"../../assets\")\r\n\r\nclass DisplayManager:\r\n    def __init__(self, gui):\r\n        self.gui = gui  # Reference to the main GUI instance\r\n        self.error_labels = [None] * 6  # Hold error messages for player names\r\n        self.player_entries = []  # Hold player name entry widgets\r\n        self.player_box_images_refs = []  # Hold player box image references\r\n        self.player_text_refs = [None] * 6  # Store references to the text displayed in each player box\r\n        self.clicked_boxes = [False] * 6  # Add a flag list to track clicked boxes\r\n\r\n        self.active_widgets = []  # Store references to active widgets\r\n        self.hidden_widgets = {}  # Dictionary to store widgets and their positions for hiding/showing\r\n\r\n        self.back_arrow_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"info_frame/back_arrow.png\"))\r\n\r\n    def clear_widgets_create_canvas_set_background(self, frame, background):\r\n        # Clear any existing widgets in the frame\r\n        for widget in frame.winfo_children():\r\n            widget.destroy()\r\n\r\n        # Create the canvas and set the background image\r\n        canvas = tk.Canvas(frame, bg=\"#FFFFFF\", height=self.gui.image_height, width=self.gui.image_width, bd=0,\r\n                           highlightthickness=0, relief=\"ridge\")\r\n        canvas.place(x=0, y=0)\r\n        canvas.create_image(0, 0, anchor=\"nw\", image=background)\r\n        return canvas\r\n\r\n    @staticmethod\r\n    def calc_button_dim(button_image):\r\n        return button_image.width(), button_image.height()\r\n\r\n\r\n# noinspection DuplicatedCode\r\nclass GameplayFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n\r\n        # New Gameplay frame images\r\n        self.new_gameplay_frame_background = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"gameplay_frame/gameplay_frame_background.png\"))\r\n        self.roll_dice_image = tk.PhotoImage(file = os.path.join(assets_base_path, \"gameplay_frame/roll_dice.png\"))\r\n        self.save_quit_image = tk.PhotoImage(file = os.path.join(assets_base_path, \"gameplay_frame/save_quit.png\"))\r\n        self.pay_fine_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"gameplay_frame/pay_fine.png\"))\r\n        self.yes_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"gameplay_frame/yes.png\"))\r\n        self.no_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"gameplay_frame/no.png\"))\r\n        self.player_info_ID = []\r\n\r\n        # Gameboard tiles colors empty list, will get loaded in by the Controller\r\n        self.tile_colors = []\r\n\r\n        # Tile color coordinates from anchor (reference point) \"NW\" corner\r\n        self.__tile_color_coord = [\r\n            None,\r\n            [565, 818],\r\n            [430, 818],\r\n            None,\r\n            [160, 818],\r\n            None,   # jail\r\n            [118, 683],\r\n            [118, 548],\r\n            None,\r\n            [118, 278],\r\n            None, # free parking\r\n            [565, 236],\r\n            None,\r\n            [430, 236],\r\n            [160, 236],\r\n            None, # go to jail\r\n            [700, 278],\r\n            [700, 413],\r\n            None,\r\n            [700, 683]\r\n        ]\r\n\r\n        # Gameboard tiles 9-tuple will get loaded in by the Controller\r\n        #  [type, name, price, rent, owner, nameObj, priceObj, rentObj, ownerObj]\r\n        self.tile_info = []\r\n\r\n        # Tile info coordinates, 6-tuple\r\n        self.__tile_info_coord = [\r\n            [None, None, 770, 860, None, None, None, None], # go\r\n            [635, 880, 635, 905, 635, 930, 635, 840], # prop1\r\n            [500, 880, 500, 905, 500, 930, 500, 840], # prop2\r\n            [365, 870, 365, 930, None, None, None, None],   # income tax\r\n            [230, 880, 230, 905, 230, 930, 230, 840], # prop3\r\n            [None, None, None, None, None, None, None, None], # jail\r\n            [100, 752, 75, 752, 50, 752, 142, 752], # prop4\r\n            [100, 617, 75, 617, 50, 617, 142, 617], # prop5\r\n            [95, 510, None, None, None, None, None, None], # chance\r\n            [100, 347, 75, 347, 50, 347, 142, 347], # prop6\r\n            [95 , 210, None, None, None, None, None, None], # free parking\r\n            [635, 165, 635, 190, 635, 215, 635, 258],  # prop7\r\n            [365, 240, 365, 190, None, None, None, None],  # chance\r\n            [500, 165, 500, 190, 500, 215, 500, 258],  # prop8\r\n            [230, 165, 230, 190, 230, 215, 230, 258],  # prop9\r\n            [None, None, None, None, None, None, None, None],  # go to jail\r\n            [765, 347, 790, 347, 815, 347, 722, 347],  # prop10\r\n            [765, 482, 790, 482, 815, 482, 722, 482],  # prop11\r\n            [770, 645, None, None, None, None, None, None],  # chance\r\n            [765, 752, 790, 752, 815, 752, 722, 752]  # prop12\r\n        ]\r\n\r\n        # players information\r\n        self.player_info = []\r\n\r\n        # Buttons Coordinates\r\n        self.roll_dice_x_pos = self.gui.image_width * 2 / 7\r\n        self.roll_dice_y_pos = self.gui.image_height * 2 / 5 - 50\r\n        self.save_quit_x_pos = self.gui.image_width * 11 / 14\r\n        self.save_quit_y_pos = self.gui.image_height * 9 / 10\r\n        self.pay_fine_x_pos = self.gui.image_width * 2 / 7\r\n        self.pay_fine_y_pos = self.gui.image_height * 5 / 10 - 45\r\n        self.yes_x_pos = self.gui.image_width * 5 / 14\r\n        self.yes_y_pos = self.gui.image_height * 4 / 5 - 20\r\n        self.no_x_pos = self.gui.image_width * 3 / 14\r\n        self.no_y_pos = self.gui.image_height * 4 / 5 - 20\r\n\r\n\r\n# ------------------------------------# Game Play Frame #------------------------------------#\r\n    @staticmethod\r\n    def set_appropriate_text_dimension(name, price, rent, owner):\r\n        name_size = 16\r\n        price_size = 16\r\n        rent_size = 16\r\n        owner_size = 16\r\n\r\n        if len(name) > 11:\r\n            name_size -= 4\r\n        elif len(name) > 9:\r\n            name_size -= 2\r\n\r\n        if len(price) > 11:\r\n            price_size -= 4\r\n        elif len(price) > 9:\r\n            price_size -= 2\r\n\r\n        if len(rent) > 11:\r\n            rent_size -= 4\r\n        elif len(rent) > 9:\r\n            rent_size -= 2\r\n\r\n        if owner:\r\n            if len(owner) > 11:\r\n                owner_size -= 4\r\n            elif len(owner) >= 9:\r\n                owner_size -= 2\r\n\r\n        return name_size, price_size, rent_size, owner_size\r\n\r\n    @staticmethod\r\n    def rotate_text(i):\r\n        text_rotate = 0\r\n        # text rotation information\r\n        if 5 < i < 10:  # left board side\r\n            text_rotate = 270.0\r\n        elif 15 < i < 20:  # right board side\r\n            text_rotate = 90.0\r\n        return text_rotate\r\n\r\n    def set_color(self, pos, color):\r\n        self.tile_colors[pos][0] = color\r\n\r\n    def get_color_coord(self, pos):\r\n        return self.__tile_color_coord[pos]\r\n\r\n    #for testing\r\n    def roll_dice(self):\r\n        print(\"Rolling dice...\")\r\n\r\n    #for testing\r\n    def save_quit(self):\r\n        print(\"Saving quit...\")\r\n\r\n    def create_button(self, canvas, x_pos, y_pos, button_image):\r\n        button_width, button_height = self.calc_button_dim(button_image)\r\n        image_id = canvas.create_image(x_pos, y_pos, anchor=\"center\", image=button_image)\r\n        button_click_area = canvas.create_rectangle(\r\n            (x_pos - button_width // 2), (y_pos - button_height // 2),\r\n            (x_pos + button_width // 2), (y_pos + button_height // 2),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        return button_click_area, canvas, image_id\r\n\r\n    def show_pay_fine_button(self, canvas):\r\n        pay_fine_click_area, canvas, pay_fine_image_id = self.create_button(canvas, self.pay_fine_x_pos, self.pay_fine_y_pos, self.pay_fine_image)\r\n        # TODO BIND FUNCTION canvas.tag_bind(pay_fine_click_area, \"<Button-1>\", lambda e: )\r\n        return pay_fine_click_area, canvas, pay_fine_image_id\r\n\r\n    def show_yes_button(self, canvas):\r\n        yes_click_area, canvas, yes_button_image_id = self.create_button(canvas, self.yes_x_pos, self.yes_y_pos, self.yes_image)\r\n        # TODO BIND FUNCTION canvas.tag_bind(yes_click_area, \"<Button-1>\", lambda e: )\r\n        return yes_click_area,canvas,yes_button_image_id\r\n\r\n    def show_no_button(self, canvas):\r\n        no_click_area, canvas, no_button_image_id = self.create_button(canvas, self.no_x_pos, self.no_y_pos, self.no_image)\r\n        # TODO BIND FUNCTION canvas.tag_bind(no_click_area, \"<Button-1>\", lambda e: )\r\n        return no_click_area,canvas, no_button_image_id\r\n\r\n    def destroy_old_info(self, canvas):\r\n        # destroys old tile_info widgets\r\n        for i in [1, 2, 4, 6, 7, 9, 11, 13, 14, 16, 17, 19]:\r\n            for j in range(5, 9):\r\n                canvas.delete(self.tile_info[i][j])\r\n\r\n        # destroys player_info widgets\r\n        for i in range(0, len(self.player_info_ID)):\r\n            canvas.delete(self.player_info_ID[i])\r\n\r\n    def update_display_info(self, canvas):\r\n        self.destroy_old_info(canvas)\r\n        self.display_player_info(canvas)\r\n        self.display_tile_info(canvas)\r\n\r\n    def display_player_info(self, canvas):\r\n        starting_pos = 200\r\n        bottom_border = 860\r\n        right_border = 950\r\n        left_border = 1430\r\n        total_players = len(self.player_info)\r\n        name_size = 22\r\n        info_size = 20\r\n        increment = (bottom_border - starting_pos) / total_players\r\n        for i in range(0, total_players):\r\n            player_name = self.player_info[i][0]\r\n            player_balance = f\"Balance: {self.player_info[i][1]} HKD\"\r\n            player_position = f\" is in {self.player_info[i][2]}\"\r\n            player_jail_status = self.player_info[i][3]\r\n            player_jail_turns = {self.player_info[i][4]}\r\n            player_total_properties = f\"Properties: {self.player_info[i][5]}\"\r\n\r\n            name_id = canvas.create_text(right_border, starting_pos, text= player_name, anchor=\"w\",\r\n                               font=(\"Comic Sans MS\", name_size, \"bold\"), fill=\"#000000\")\r\n\r\n            # calculates dimensions of name box\r\n            name_box = canvas.bbox(name_id)\r\n            name_width = name_box[2] - name_box[0] + 5\r\n\r\n            pos_id = canvas.create_text(right_border + name_width, starting_pos, text= player_position, anchor=\"w\",\r\n                               font=(\"Comic Sans MS\", info_size), fill=\"#000000\")\r\n            balance_id = canvas.create_text(right_border, starting_pos + 40, text= player_balance, anchor=\"w\",\r\n                               font=(\"Comic Sans MS\", info_size), fill=\"#000000\")\r\n            tot_prop_id = canvas.create_text(left_border, starting_pos + 40, text= player_total_properties, anchor=\"e\",\r\n                               font=(\"Comic Sans MS\", info_size), fill=\"#000000\")\r\n            starting_pos += increment\r\n            self.player_info_ID.append(name_id)\r\n            self.player_info_ID.append(pos_id)\r\n            self.player_info_ID.append(balance_id)\r\n            self.player_info_ID.append(tot_prop_id)\r\n\r\n    #----------Handles hiding the button IMAGE in the canvas----------#\r\n    def hide_yes_image(self,canvas):\r\n        canvas.coords(self.yes_image_id,-100,-100)\r\n\r\n    def hide_no_image(self,canvas):\r\n        canvas.coords(self.no_image_id,-100,-100)\r\n\r\n    def hide_roll_image(self,canvas):\r\n        canvas.coords(self.roll_dice_image_id,-100,-100)\r\n\r\n    def hide_pay_fine_image(self,canvas):\r\n        canvas.coords(self.pay_fine_image_id,-100,-100)\r\n\r\n    #------------------------------------------------------------------#\r\n\r\n\r\n    #----------Handles showing the button image in the canvas----------#\r\n    def show_yes_image(self,canvas):\r\n        canvas.coords(self.yes_image_id,self.yes_x_pos, self.yes_y_pos)\r\n\r\n    def show_no_image(self,canvas):\r\n        canvas.coords(self.no_image_id,self.no_x_pos, self.no_y_pos)\r\n\r\n    def show_roll_image(self,canvas):\r\n        canvas.coords(self.roll_dice_image_id, self.roll_dice_x_pos, self.roll_dice_y_pos)\r\n\r\n    def show_pay_fine_image(self,canvas):\r\n        canvas.coords(self.pay_fine_image_id, self.pay_fine_x_pos, self.pay_fine_y_pos)\r\n\r\n    # ------------------------------------------------------------------#\r\n\r\n    # from the gameboard information loads the appropriate colors in the game frame\r\n    def load_tile_colors(self):\r\n        for i in range(0,20):\r\n            color = self.tile_colors[i][0]\r\n            if color:\r\n                self.modify_tile_color(color, i)\r\n\r\n    # gets the information from the lists above and display all the tiles colors\r\n    def display_tile_colors(self, canvas):\r\n        self.load_tile_colors()\r\n        for i in range(0, 20):\r\n            color_coord = self.__tile_color_coord[i]\r\n            if color_coord: # if None (meaning at that position there is a tile that has no color) doesn't execute\r\n                x_pos = color_coord[0]\r\n                y_pos = color_coord[1]\r\n                tile_color = self.tile_colors[i][1]\r\n                canvas.create_image(x_pos, y_pos, anchor=\"nw\", image=tile_color)\r\n\r\n    # from the info in the gameboard, displays it on the gameboard\r\n    def display_tile_info(self, canvas):\r\n        for i in range(0, len(self.__tile_info_coord)):\r\n            # gets all information necessary to display\r\n            tile_type = self.tile_info[i][0]\r\n            tile_name = self.tile_info[i][1]\r\n            tile_price = str(self.tile_info[i][2])\r\n            tile_rent = f\"{self.tile_info[i][3]} HDK\"\r\n            tile_owner = self.tile_info[i][4]\r\n            name_x_pos = self.__tile_info_coord[i][0]\r\n            name_y_pos = self.__tile_info_coord[i][1]\r\n            price_x_pos = self.__tile_info_coord[i][2]\r\n            price_y_pos = self.__tile_info_coord[i][3]\r\n            rent_x_pos = self.__tile_info_coord[i][4]\r\n            rent_y_pos = self.__tile_info_coord[i][5]\r\n            owner_x_pos = self.__tile_info_coord[i][6]\r\n            owner_y_pos = self.__tile_info_coord[i][7]\r\n\r\n            # gets owner name only when there is a player object\r\n            if tile_owner:\r\n                tile_owner = tile_owner.get_name()\r\n\r\n            # calculates text sizes\r\n            text_name_size, text_price_size, text_rent_size, text_owner_size = self.set_appropriate_text_dimension(\r\n                tile_name, tile_rent, tile_price, tile_owner)\r\n\r\n            # calculates text rotation\r\n            text_rotate = self.rotate_text(i)\r\n\r\n            # displays text based on tile type\r\n            if tile_type == \"property\":\r\n                self.tile_info[i][5] = canvas.create_text(name_x_pos, name_y_pos, text=tile_name,\r\n                                                          font=(\"Comic Sans MS\", text_name_size, \"bold\"),\r\n                                                          fill=\"#000000\", angle=text_rotate)\r\n                tile_price = f\"{tile_price} HKD\"\r\n                self.tile_info[i][6] = canvas.create_text(price_x_pos, price_y_pos, text=tile_price,\r\n                                                          font=(\"Comic Sans MS\", text_price_size), fill=\"#000000\",\r\n                                                          angle=text_rotate)\r\n                self.tile_info[i][7] = canvas.create_text(rent_x_pos, rent_y_pos, text=tile_rent,\r\n                                                          font=(\"Comic Sans MS\", text_rent_size), fill=\"#000000\",\r\n                                                          angle=text_rotate)\r\n                self.tile_info[i][8] = canvas.create_text(owner_x_pos, owner_y_pos, text=tile_owner,\r\n                                                          font=(\"Comic Sans MS\", text_owner_size), fill=\"#000000\",\r\n                                                          angle=text_rotate)\r\n\r\n            elif tile_type == \"go\":\r\n                tile_price = f\"Collect\\n{tile_price} HKD\"\r\n                self.tile_info[i][6] = canvas.create_text(price_x_pos, price_y_pos, text=tile_price,\r\n                                                          font=(\"Comic Sans MS\", 18, \"bold\"), fill=\"#000000\",\r\n                                                          justify=\"center\")\r\n\r\n            elif tile_type == \"free_parking\":\r\n                tile_name = tile_name.replace(\" \", \"\\n\")\r\n                self.tile_info[i][6] = canvas.create_text(name_x_pos, name_y_pos, text=tile_name,\r\n                                                          font=(\"Comic Sans MS\", 20, \"bold\"), fill=\"#000000\",\r\n                                                          justify=\"center\")\r\n\r\n            elif tile_type == \"chance\":\r\n                self.tile_info[i][6] = canvas.create_text(name_x_pos, name_y_pos, text=tile_name,\r\n                                                          font=(\"Comic Sans MS\", 20, \"bold\"), fill=\"#000000\")\r\n\r\n            elif tile_type == \"income_tax\":\r\n                tile_name = tile_name.replace(\" \", \"\\n\")\r\n                self.tile_info[i][6] = canvas.create_text(name_x_pos, name_y_pos, text=tile_name,\r\n                                                          font=(\"Comic Sans MS\", 20, \"bold\"), fill=\"#000000\",\r\n                                                          justify=\"center\")\r\n                tile_price = f\"{tile_price} %\"\r\n                self.tile_info[i][7] = canvas.create_text(price_x_pos, price_y_pos, text=tile_price,\r\n                                                          font=(\"Comic Sans MS\", 16), fill=\"#000000\")\r\n\r\n    # called to set up the entire gameplay_frame\r\n    def setup_new_gameplay_frame(self, frame):\r\n        canvas = self.clear_widgets_create_canvas_set_background(frame, self.new_gameplay_frame_background)\r\n\r\n        # TILE COLORS\r\n        self.display_tile_colors(canvas)\r\n\r\n        # TILE INFORMATION\r\n        self.display_tile_info(canvas)\r\n\r\n        # PLAYER INFORMATION\r\n        self.display_player_info(canvas)\r\n\r\n        # ROLL DICE BUTTON\r\n        roll_dice_click_area, canvas,self.roll_dice_image_id = self.create_button(canvas, self.roll_dice_x_pos, self.roll_dice_y_pos, self.roll_dice_image)\r\n        #canvas.tag_bind(roll_dice_click_area, \"<Button-1>\", lambda e: self.roll_dice())\r\n\r\n        # SAVE QUIT BUTTON\r\n        save_quit_click_area, canvas,self.save_quit_image_id = self.create_button(canvas, self.save_quit_x_pos, self.save_quit_y_pos, self.save_quit_image)\r\n        canvas.tag_bind(save_quit_click_area, \"<Button-1>\", lambda e:self.save_quit())\r\n\r\n\r\n        # OTHER BUTTONS JUST FOR TESTING POS WONT BE SHOWN ALL THE TIME\r\n        pay_fine_click_area,canvas,self.pay_fine_image_id = self.show_pay_fine_button(canvas)\r\n\r\n        #return the id so that image can be hidden and shown\r\n        yes_click_area,canvas,self.yes_image_id = self.show_yes_button(canvas)\r\n        no_click_area, canvas,self.no_image_id = self.show_no_button(canvas)\r\n\r\n        click_area = [roll_dice_click_area,yes_click_area,no_click_area,pay_fine_click_area] #TODO place other click area for other buttons\r\n        return canvas, click_area\r\n\r\n    #------------------------#\r\n    # EDITING MODE FUNCTIONS #\r\n    #------------------------#\r\n\r\n    # modifies the color of the tile in the board editor\r\n    def modify_tile_color(self, color, tile_position):\r\n        # gets the right color path based on the tile position (vertical or horizontal)\r\n        if 0 < tile_position < 5 or 10 < tile_position < 15: #tile is horizontal\r\n            color_path = f\"gameplay_frame/{color}_h.png\"\r\n        else:\r\n            color_path = f\"gameplay_frame/{color}_v.png\"\r\n\r\n        #gets the appropriate image path\r\n        image_color_path = os.path.join(assets_base_path, color_path)\r\n\r\n        #modifies the list at the appropriate position with the new tile color reference\r\n        self.tile_colors[tile_position][1] = tk.PhotoImage(file=image_color_path)\r\n\r\n\r\nclass NewGameFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n\r\n        # New game frame images\r\n        self.new_game_frame_background = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"new_game_frame/new_game_frame_background.png\"))\r\n        self.player_box_images = [\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player1_box.png\")),\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player2_box.png\")),\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player3_box.png\")),\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player4_box.png\")),\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player5_box.png\")),\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player6_box.png\"))\r\n        ]\r\n        self.player_insert_demo_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"new_game_frame/player_insert_demo.png\"))\r\n        self.edit_board_button_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"new_game_frame/edit_board_button.png\"))\r\n        self.start_game_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/play_button.png\"))\r\n        self.random_name_button_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"new_game_frame/random_name_dice_button.png\"))\r\n        self.exit_new_game_hint_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"new_game_frame/exit_new_game_hint.png\"))\r\n        self.yes_button_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/yes_button.png\"))\r\n        self.no_button_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/no_button.png\"))\r\n        self.trash_button_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/trash_button.png\"))\r\n\r\n    # ------------------------------------# New Game Frame #------------------------------------#\r\n\r\n    def setup_new_game_page(self, frame, input_handler):\r\n        # Clear previously active widgets (including dice buttons)\r\n        self.clear_active_widgets()\r\n\r\n        # Create canvas and set background image\r\n        canvas = self.clear_widgets_create_canvas_set_background(frame, self.new_game_frame_background)\r\n\r\n        # Display the back button to return to the main menu\r\n        back_button = canvas.create_image(50, 50, image=self.back_arrow_image)\r\n        canvas.tag_bind(back_button, \"<Button-1>\", lambda e: self.confirm_exit_new_game(canvas))\r\n\r\n        # Store references to player input entries and images\r\n        self.player_entries = [None] * 6  # To hold the entry widgets\r\n        self.player_box_images_refs = []  # To hold image references for updating\r\n\r\n        # Display six player insert boxes on the left side\r\n        x_position = 300  # X position for the player boxes\r\n        y_position = 260  # Starting Y position for player boxes\r\n\r\n        for i, player_box_image in enumerate(self.player_box_images):\r\n            # Display each player box image\r\n            player_box = canvas.create_image(x_position, y_position, anchor=\"nw\", image=player_box_image)\r\n            self.player_box_images_refs.append(player_box)\r\n\r\n            # Dice button for random name generation\r\n            dice_button = tk.Button(\r\n                canvas, image=self.random_name_button_image, bd=0, highlightthickness=0,\r\n                highlightbackground=\"#FBF8F5\", bg=\"#FBF8F5\", activebackground=\"#FBF8F5\",\r\n                command=lambda idx=i: self.generate_random_name(canvas, idx)\r\n            )\r\n            dice_button.place(x=x_position - 100, y=y_position + 9)\r\n            self.active_widgets.append(dice_button)  # Track dice button for removal\r\n\r\n            # Trash button for clearing names\r\n            trash_button = tk.Button(\r\n                canvas, image=self.trash_button_image, bd=0, highlightthickness=0,\r\n                highlightbackground=\"#FBF8F5\", bg=\"#FBF8F5\", activebackground=\"#FBF8F5\",\r\n                command=lambda idx=i: self.delete_name(canvas, idx)\r\n            )\r\n            trash_button.place(x=x_position - 55, y=y_position + 9)\r\n            self.active_widgets.append(trash_button)  # Track trash button for removal\r\n\r\n            # Set up clickable area for player box\r\n            clickable_area = canvas.create_rectangle(\r\n                x_position, y_position, x_position + 1.2 * player_box_image.width(),\r\n                                        y_position + 1.2 * player_box_image.height(),\r\n                outline=\"\", fill=\"\"\r\n            )\r\n            canvas.tag_bind(clickable_area, \"<Button-1>\",\r\n                            lambda e, idx=i, x=x_position, y=y_position: self.show_insert_entry(canvas, idx, x, y))\r\n\r\n            y_position += 100  # Adjust y-position for the next player box\r\n\r\n        # Display Edit Board and Play buttons on the right side\r\n        edit_board_button = canvas.create_image(self.gui.image_width - 450, 430, image=self.edit_board_button_image)\r\n        play_button = canvas.create_image(self.gui.image_width - 450, 650, image=self.start_game_image)\r\n\r\n        # Create clickable rectangles for Edit Board and Play buttons\r\n        edit_board_clickable_area = canvas.create_rectangle(\r\n            self.gui.image_width - 450 - (self.edit_board_button_image.width() * 0.6),\r\n            430 - (self.edit_board_button_image.height() * 0.6),\r\n            self.gui.image_width - 450 + (self.edit_board_button_image.width() * 0.6),\r\n            430 + (self.edit_board_button_image.height() * 0.6),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        play_button_clickable_area = canvas.create_rectangle(\r\n            self.gui.image_width - 450 - (self.start_game_image.width() * 0.6),\r\n            650 - (self.start_game_image.height() * 0.6),\r\n            self.gui.image_width - 450 + (self.start_game_image.width() * 0.6),\r\n            650 + (self.start_game_image.height() * 0.6),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n\r\n        # Bind actions for Edit Board and Play clickable areas\r\n        canvas.tag_bind(edit_board_clickable_area, \"<Button-1>\",\r\n                        lambda e: print(\"Edit board clicked\"))  # Placeholder action\r\n        #canvas.tag_bind(play_button_clickable_area, \"<Button-1>\", lambda e: self.check_and_start_game(input_handler))\r\n\r\n        return canvas, play_button_clickable_area\r\n\r\n    def clear_active_widgets(self):\r\n        for widget in self.active_widgets:\r\n            widget.place_forget()\r\n        self.active_widgets.clear()  # Reset active widgets list\r\n\r\n    def delete_name(self, canvas, idx):\r\n        # Clear the player's name from the entry\r\n        self.gui.input_handler.players_names[idx] = None\r\n\r\n        # Reset the box appearance to its original state\r\n        canvas.itemconfig(self.player_box_images_refs[idx], image=self.player_box_images[idx])\r\n        if self.player_text_refs[idx]:  # If there was a previous name shown, remove it\r\n            canvas.delete(self.player_text_refs[idx])\r\n            self.player_text_refs[idx] = None\r\n        if self.player_entries[idx]:  # If an entry widget is open, destroy it\r\n            self.player_entries[idx].destroy()\r\n            self.player_entries[idx] = None\r\n        self.clicked_boxes[idx] = False  # Reset the clicked state\r\n\r\n    def generate_random_name(self, canvas, idx):\r\n        # Ensure that all previous player names (up to idx-1) have been entered\r\n        if any(not self.gui.input_handler.players_names[i] for i in range(idx)):\r\n            self.show_msg(canvas, idx, \"* All previous player names must be entered first.\", is_error=True)\r\n            return\r\n\r\n        # Generate a random name\r\n        player_name = self.gui.input_handler.generate_name()\r\n\r\n        # Check if the name can be stored according to validation rules\r\n        if self.gui.input_handler.validate_and_store_name(idx, player_name):\r\n            # Save the generated name immediately\r\n            self.gui.input_handler.players_names[idx] = player_name\r\n\r\n            # Always show the generated name in the player box\r\n            self.show_insert_entry(canvas, idx, name=player_name)\r\n\r\n            # Show a hint message to prompt the user to press Enter if they want to save manually\r\n            self.show_msg(canvas, idx, \"* You can modify the name and press <Return> to save.\", is_error=False)\r\n        else:\r\n            # Show error if the name is invalid or duplicate\r\n            self.show_msg(canvas, idx, \"* Generated name is invalid or duplicate.\", is_error=True)\r\n\r\n    def show_insert_entry(self, canvas, idx, x_position=None, y_position=None, name=None):\r\n        if name:\r\n            # If a generated name is provided, show and save it immediately\r\n            player_name = name\r\n            self.gui.input_handler.players_names[idx] = player_name\r\n\r\n            # Remove any existing entry widget to update the display with the new name\r\n            if self.player_entries[idx]:\r\n                self.player_entries[idx].destroy()\r\n                self.player_entries[idx] = None  # Clear the reference\r\n\r\n            canvas.itemconfig(self.player_box_images_refs[idx], image=self.player_insert_demo_image)\r\n            if self.player_text_refs[idx]:\r\n                canvas.delete(self.player_text_refs[idx])\r\n            self.player_text_refs[idx] = canvas.create_text(\r\n                400, 290 + idx * 100, text=player_name, font=(\"Comic Sans MS\", 20), fill=\"#000000\"\r\n            )\r\n        else:\r\n            # Code for opening an entry widget for manual input\r\n            if self.player_entries[idx]:\r\n                self.player_entries[idx].destroy()\r\n\r\n            if not self.clicked_boxes[idx]:\r\n                canvas.itemconfig(self.player_box_images_refs[idx], image=self.player_insert_demo_image)\r\n                self.clicked_boxes[idx] = True\r\n\r\n            previous_name = str(self.gui.input_handler.players_names[idx]) if idx < len(\r\n                self.gui.input_handler.players_names) else \"\"\r\n\r\n            entry = tk.Entry(canvas, font=(\"Comic Sans MS\", 20), width=20, bd=0, bg=\"#E5E8E8\", fg=\"#000000\",\r\n                             highlightthickness=0, justify=\"left\")\r\n\r\n            if previous_name:\r\n                entry.insert(0, previous_name)\r\n            entry.place(x=x_position + 22, y=y_position + 16)\r\n            entry.focus_set()\r\n\r\n            def on_submit(event):\r\n                new_name = entry.get().strip()\r\n                # If the user press <Return> with nothing, should back to the original state without saving\r\n                if new_name:\r\n                    self.save_player_name(entry, idx, canvas)\r\n                else:\r\n                    self.delete_name(canvas, idx)  # Reset to original image if entry is empty\r\n\r\n            entry.bind(\"<Return>\", on_submit)\r\n            entry.bind(\"<FocusOut>\",\r\n                       lambda e: on_submit(e) if entry.get().strip() else self.clear_entry(entry, idx, canvas))\r\n            self.player_entries[idx] = entry\r\n\r\n            if self.error_labels[idx]:\r\n                self.error_labels[idx].destroy()\r\n\r\n    def clear_entry(self, entry, idx, canvas):\r\n        # Reset the player box to its original image without displaying any text\r\n        entry.destroy()\r\n        self.player_entries[idx] = None\r\n        canvas.itemconfig(self.player_box_images_refs[idx], image=self.player_box_images[idx])\r\n\r\n    def save_player_name(self, entry, idx, canvas):\r\n        player_name = entry.get().strip()\r\n\r\n        # Check if the name hasn't changed from the current one\r\n        if self.gui.input_handler.players_names[idx] == player_name:\r\n            self.show_msg(canvas, idx, \"* Name did not change.\", is_error=False)\r\n            return\r\n\r\n        # Check if the name is the same as another player\r\n        if player_name in self.gui.input_handler.get_all_player_names():\r\n            self.show_msg(canvas, idx, \"* Name cannot be the same as another player.\", is_error=True)\r\n            return\r\n\r\n        # Check if the previous player name has been entered (except for the first player)\r\n        if idx > 0 and not self.gui.input_handler.players_names[idx - 1]:\r\n            self.show_msg(canvas, idx, \"* Previous player name must be entered first.\", is_error=True)\r\n            return\r\n\r\n        # Check if the name is valid, if so, store it\r\n        if len(player_name) <= 20 and self.gui.input_handler.validate_and_store_name(idx, player_name):\r\n            # Clear any previous error messages\r\n            if self.error_labels[idx]:\r\n                self.error_labels[idx].destroy()\r\n                self.error_labels[idx] = None\r\n\r\n            # Remove any displayed name text reference and update with the new name\r\n            if self.player_text_refs[idx]:\r\n                canvas.delete(self.player_text_refs[idx])\r\n                self.player_text_refs[idx] = None\r\n\r\n            entry.delete(0, tk.END)  # Clear the entry to remove any leftover invalid text\r\n            entry.insert(0, player_name)  # Ensure the valid name is displayed\r\n            entry.destroy()\r\n\r\n            x_text_position = 330\r\n            y_text_position = 290 + idx * 100\r\n            self.player_text_refs[idx] = canvas.create_text(\r\n                x_text_position, y_text_position, text=player_name, font=(\"Comic Sans MS\", 20), fill=\"#000000\",\r\n                anchor=\"w\"\r\n            )\r\n        else:\r\n            self.show_msg(canvas, idx, \"* Name must be 1-20 characters.\", is_error=True)\r\n            entry.delete(0, tk.END)\r\n\r\n    def show_msg(self, frame, idx, msg, is_error=False, x_position=None, y_position=None):\r\n        if x_position is None:\r\n            x_position = 325\r\n        if y_position is None:\r\n            y_position = 322 + idx * 100\r\n\r\n        if self.error_labels[idx]:\r\n            self.error_labels[idx].destroy()\r\n\r\n        color = \"red\" if is_error else \"green\"\r\n        self.error_labels[idx] = tk.Label(\r\n            frame,\r\n            text=msg,\r\n            font=(\"Comic Sans MS\", 16),\r\n            fg=color,\r\n            bg=\"#FBF8F5\"\r\n        )\r\n        self.error_labels[idx].place(x=x_position, y=y_position)\r\n        self.active_widgets.append(self.error_labels[idx])  # Track the label for later removal\r\n\r\n    def check_and_start_game(self, input_handler):\r\n        # Retrieve all player names\r\n        player_names = input_handler.get_all_player_names()\r\n\r\n        # Check for at least two valid player names\r\n        if len([name for name in player_names if name]) < 2:\r\n            # Show error message below play button if fewer than 2 players\r\n            self.show_msg(self.gui.frames[\"new_game\"], 0, \"* At least two players are required to start the game.\",\r\n                          is_error=True, x_position=self.gui.image_width - 550, y_position=722)\r\n            return False\r\n        # If all checks pass, transition to the GameBoard frame\r\n        print(\"Starting game with players:\")\r\n        for idx, name in enumerate(player_names, start=1):\r\n            if name:\r\n                print(f\"Player {idx}: {name}\")\r\n        return True\r\n\r\n    def confirm_exit_new_game(self, canvas):\r\n        # Clear any previously saved positions\r\n        self.hidden_widgets.clear()\r\n\r\n        # Hide all tracked widgets by storing their positions and calling `place_forget`\r\n        for widget in self.active_widgets:\r\n            try:\r\n                if widget.winfo_ismapped():  # Check if the widget is currently visible\r\n                    self.hidden_widgets[widget] = widget.place_info()  # Save widget's position info\r\n                    widget.place_forget()  # Hide the widget\r\n            except tk.TclError:\r\n                continue\r\n\r\n        # Now display exit confirmation\r\n        exit_hint = canvas.create_image(self.gui.image_width // 2 + 297, self.gui.image_height // 2 + 50,\r\n                                        image=self.exit_new_game_hint_image)\r\n        # Create Yes and No buttons in the popup\r\n        yes_button = canvas.create_image(self.gui.image_width // 2 + 150, self.gui.image_height // 2 + 200,\r\n                                         image=self.yes_button_image)\r\n        no_button = canvas.create_image(self.gui.image_width // 2 + 440, self.gui.image_height // 2 + 200,\r\n                                        image=self.no_button_image)\r\n\r\n        # Bind actions for Yes and No buttons\r\n        canvas.tag_bind(yes_button, \"<Button-1>\",\r\n                        lambda e: self.exit_to_main_menu(canvas, exit_hint, yes_button, no_button))\r\n        canvas.tag_bind(no_button, \"<Button-1>\",\r\n                        lambda e: self.cancel_exit_and_restore_widgets(canvas, exit_hint, yes_button, no_button))\r\n\r\n    def exit_to_main_menu(self, canvas, exit_hint, yes_button, no_button):\r\n        # Clear player data, remove the exit hint, and go back to main menu\r\n        self.clear_all_player_data(canvas)\r\n        self.cancel_exit_and_restore_widgets(canvas, exit_hint, yes_button, no_button)\r\n        self.gui.show_frame(\"main_menu\")\r\n\r\n        # Also clear all the hint messages shown in the new game frame before\r\n        for idx in range(6):\r\n            if self.error_labels[idx]:\r\n                self.error_labels[idx].destroy()\r\n\r\n    def cancel_exit_and_restore_widgets(self, canvas, exit_hint, yes_button, no_button):\r\n        # Clear the exit hint and buttons\r\n        canvas.delete(exit_hint)\r\n        canvas.delete(yes_button)\r\n        canvas.delete(no_button)\r\n\r\n        # Restore all widgets to their original positions\r\n        for widget, position_info in self.hidden_widgets.items():\r\n            widget.place(**position_info)  # Re-position each widget\r\n        self.hidden_widgets.clear()  # Clear the dictionary after restoring\r\n\r\n    def clear_all_player_data(self, canvas):\r\n        # Clear all entries for player data\r\n        for idx in range(6):\r\n            self.delete_name(canvas, idx)\r\n\r\n\r\nclass MainMenuFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n        # Main frame images\r\n        # Main Menu images\r\n        self.startup_background = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"main_menu_frame/startup_frame_background.png\"))\r\n        self.new_game_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"main_menu_frame/new_game_button.png\"))\r\n        self.load_game_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"main_menu_frame/load_game_button.png\"))\r\n        self.exit_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"main_menu_frame/exit_button.png\"))\r\n        self.info_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"main_menu_frame/info_button.png\"))\r\n\r\n    #------------------------------------# Main Menu Frame #------------------------------------#\r\n\r\n    def setup_main_menu_frame(self, frame):\r\n        canvas = self.clear_widgets_create_canvas_set_background(frame, self.startup_background)\r\n\r\n        # Button positions\r\n        button_y_positions = [self.gui.image_height * 0.55, self.gui.image_height * 0.70, self.gui.image_height * 0.85]\r\n\r\n        # Calculate dimensions for each button to set clickable areas\r\n        new_game_width, new_game_height = self.calc_button_dim(self.new_game_image)\r\n        load_game_width, load_game_height = self.calc_button_dim(self.load_game_image)\r\n        exit_width, exit_height = self.calc_button_dim(self.exit_image)\r\n        info_width, info_height = self.calc_button_dim(self.info_image)\r\n\r\n        # \"New Game\" button and clickable area\r\n        new_game_button = canvas.create_image(self.gui.image_width // 2, button_y_positions[0],\r\n                                              image=self.new_game_image)\r\n        new_game_clickable_area = canvas.create_rectangle(\r\n            (self.gui.image_width // 2) - (0.6 * new_game_width), button_y_positions[0] - (0.6 * new_game_height),\r\n            (self.gui.image_width // 2) + (0.6 * new_game_width), button_y_positions[0] + (0.6 * new_game_height),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        canvas.tag_bind(new_game_clickable_area, \"<Button-1>\", lambda e: self.gui.show_frame(\"new_game\"))\r\n\r\n        # \"Load Game\" button and clickable area\r\n        load_game_button = canvas.create_image(self.gui.image_width // 2, button_y_positions[1],\r\n                                               image=self.load_game_image)\r\n        load_game_clickable_area = canvas.create_rectangle(\r\n            (self.gui.image_width // 2) - (0.6 * load_game_width), button_y_positions[1] - (0.6 * load_game_height),\r\n            (self.gui.image_width // 2) + (0.6 * load_game_width), button_y_positions[1] + (0.6 * load_game_height),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        canvas.tag_bind(load_game_clickable_area, \"<Button-1>\", lambda e: self.gui.show_frame(\"load_game\"))\r\n\r\n        # \"Exit\" button and clickable area\r\n        exit_button = canvas.create_image(self.gui.image_width // 2, button_y_positions[2], image=self.exit_image)\r\n        exit_clickable_area = canvas.create_rectangle(\r\n            (self.gui.image_width // 2) - (0.6 * exit_width), button_y_positions[2] - (0.6 * exit_height),\r\n            (self.gui.image_width // 2) + (0.6 * exit_width), button_y_positions[2] + (0.6 * exit_height),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        canvas.tag_bind(exit_clickable_area, \"<Button-1>\", lambda e: self.gui.quit())\r\n\r\n        # \"Info\" button in the corner and clickable area\r\n        info_button = canvas.create_image(self.gui.image_width - 85, 75, image=self.info_image)\r\n        info_clickable_area = canvas.create_rectangle(\r\n            (self.gui.image_width - 85) - (0.6 * info_width), 75 - (0.6 * info_height),\r\n            (self.gui.image_width - 85) + (0.6 * info_width), 75 + (0.6 * info_height),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        canvas.tag_bind(info_clickable_area, \"<Button-1>\", lambda e: self.gui.show_frame(\"info\"))\r\n\r\n        return canvas\r\n\r\n\r\nclass LoadGameFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n\r\n        self.load_and_play_button_id = None\r\n        self.saved_game_slots = []\r\n        self.slot_item_ids = [] # Track item IDs for slots\r\n\r\n        # Load Game frame images\r\n        self.load_game_frame_background = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/load_game_frame_background.png\"))\r\n        self.saved_game_slot1_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/saved_game_slot1.png\"))\r\n        self.saved_game_slot2_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/saved_game_slot2.png\"))\r\n        self.saved_game_slot3_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/saved_game_slot3.png\"))\r\n        self.saved_game_slot4_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/saved_game_slot4.png\"))\r\n        self.saved_game_slot5_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/saved_game_slot5.png\"))\r\n        self.selected_saved_game_slot_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/selected_saved_game_slot.png\"))\r\n        self.load_and_play_button_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/load_and_play_button.png\"))\r\n\r\n    # ------------------------------------# Load Game Frame #------------------------------------#\r\n\r\n    def setup_load_game_frame(self, frame):\r\n        canvas = self.clear_widgets_create_canvas_set_background(frame, self.load_game_frame_background)\r\n\r\n        # Saved game slot selection image positions\r\n        saved_game_slot_positions = [\r\n            (self.gui.image_width // 2, 370),\r\n            (self.gui.image_width // 2, 452),\r\n            (self.gui.image_width // 2, 534),\r\n            (self.gui.image_width // 2, 616),\r\n            (self.gui.image_width // 2, 698)\r\n        ]\r\n\r\n        # Saved game slot images\r\n        self.saved_game_slots = [\r\n            self.saved_game_slot1_image,\r\n            self.saved_game_slot2_image,\r\n            self.saved_game_slot3_image,\r\n            self.saved_game_slot4_image,\r\n            self.saved_game_slot5_image\r\n        ]\r\n\r\n        # Display saved game slots\r\n        for i, slot_image in enumerate(self.saved_game_slots):\r\n            slot_x, slot_y = saved_game_slot_positions[i]  # Unpack coordinates\r\n            slot_id = canvas.create_image(slot_x, slot_y, image=slot_image)\r\n            self.slot_item_ids.append(slot_id)\r\n\r\n            # Create a clickable area for each slot\r\n            clickable_area = canvas.create_rectangle(\r\n                slot_x - (0.5 * slot_image.width()), slot_y - (0.5 * slot_image.height()),\r\n                slot_x + (0.5 * slot_image.width()), slot_y + (0.5 * slot_image.height()),\r\n                outline=\"\", fill=\"\"\r\n            )\r\n\r\n            # Bind click event to select the slot\r\n            canvas.tag_bind(clickable_area, \"<Button-1>\",\r\n                            lambda e, idx=i: self.select_saved_game_slot(canvas, idx))\r\n\r\n        return canvas\r\n\r\n    def select_saved_game_slot(self, canvas, idx):\r\n        # Clear any previously selected slots by resetting all slots to their original images\r\n        for i, slot_id in enumerate(self.slot_item_ids):\r\n            canvas.itemconfig(slot_id, image=self.saved_game_slots[i])\r\n\r\n        # Update only the selected slot with the highlight image\r\n        canvas.itemconfig(self.slot_item_ids[idx], image=self.selected_saved_game_slot_image)\r\n        self.gui.selected_saved_game_slot = idx\r\n\r\n        # Display Load and Play button once a slot is selected\r\n        if not hasattr(self, 'load_and_play_button_id'):\r\n            # Reuse this Load and Play button\r\n            load_button_x, load_button_y = self.gui.image_width // 2, 835\r\n            self.load_and_play_button_id = canvas.create_image(load_button_x, load_button_y,\r\n                                                               image=self.load_and_play_button_image)\r\n            load_and_play_clickable_area = canvas.create_rectangle(\r\n                load_button_x - (0.5 * self.load_and_play_button_image.width()),\r\n                load_button_y - (0.5 * self.load_and_play_button_image.height()),\r\n                load_button_x + (0.5 * self.load_and_play_button_image.width()),\r\n                load_button_y + (0.5 * self.load_and_play_button_image.height()),\r\n                outline=\"\", fill=\"\"\r\n            )\r\n\r\n            # TODO Once the button is clicked, pass the json file name to the controller to load the game board\r\n            # canvas.tag_bind(load_and_play_clickable_area, \"<Button-1>\", lambda e: self.gui.show_frame(\"gameplay\"))\r\n\r\n        return canvas\r\n\r\n\r\nclass InfoPageFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n\r\n        # Info frame images\r\n        self.info_frame_background = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"info_frame/info_frame_background.png\"))\r\n\r\n    # --------------------------------------# Info Page #---------------------------------------#\r\n\r\n    def setup_info_page(self, frame):\r\n        canvas = self.clear_widgets_create_canvas_set_background(frame, self.info_frame_background)\r\n\r\n        # Back button dimensions for creating a larger clickable area\r\n        back_button_width, back_button_height = self.back_arrow_image.width(), self.back_arrow_image.height()\r\n\r\n        # Display the back button to return to the main menu\r\n        back_button = canvas.create_image(50, 50, image=self.back_arrow_image)\r\n\r\n        # Create a clickable rectangle slightly larger than the back button image\r\n        back_button_clickable_area = canvas.create_rectangle(\r\n            50 - (0.2 * back_button_width), 50 - (0.2 * back_button_height),  # Top-left corner\r\n            50 + back_button_width * 1.2, 50 + back_button_height * 1.2,  # Bottom-right corner\r\n            outline=\"\", fill=\"\"\r\n        )\r\n\r\n        # Bind the enlarged clickable area to the main menu transition\r\n        canvas.tag_bind(back_button_clickable_area, \"<Button-1>\", lambda e: self.gui.show_frame(\"main_menu\"))\r\n\r\n        return canvas\r\n\r\n\r\nclass EditBoardFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/View/DisplayManager.py b/src/View/DisplayManager.py
--- a/src/View/DisplayManager.py	(revision 83090fff8b9239d266119cf2ce5627707757ef27)
+++ b/src/View/DisplayManager.py	(date 1731314884138)
@@ -1,3 +1,4 @@
+import time
 import tkinter as tk
 import os
 
@@ -107,8 +108,13 @@
 
         # players information
         self.player_info = []
+        self.move_speed = 5
+        self.player_image_id = [
+            tk.PhotoImage(file= os.path.join(assets_base_path, "gameplay_frame/player_highlight"))
+            ]
 
         # Buttons Coordinates
+        self.half_screen_y = self.gui.image_height / 2
         self.roll_dice_x_pos = self.gui.image_width * 2 / 7
         self.roll_dice_y_pos = self.gui.image_height * 2 / 5 - 50
         self.save_quit_x_pos = self.gui.image_width * 11 / 14
@@ -120,6 +126,14 @@
         self.no_x_pos = self.gui.image_width * 3 / 14
         self.no_y_pos = self.gui.image_height * 4 / 5 - 20
 
+        # Player INFO Coordinates
+        self.starting_y_pos = 200
+        self.bottom_y_border = 860
+        self.right_x_border = 950
+        self.left_x_border = 1430
+        self.global_increment = 0
+        self.player_highlight_image = tk.PhotoImage(file= os.path.join(assets_base_path, "gameplay_frame/player_highlight.png"))
+        self.player_highlighter_ID = None
 
 # ------------------------------------# Game Play Frame #------------------------------------#
     @staticmethod
@@ -216,36 +230,106 @@
         self.display_player_info(canvas)
         self.display_tile_info(canvas)
 
+    def create_player_highlighter(self, canvas):
+        image_id = canvas.create_image(self.right_x_border - 40, self.starting_y_pos, anchor="center",
+                                       image=self.player_highlight_image)
+        return canvas, image_id
+
+    def display_winners_on_canvas(self, canvas, winners_list):
+        winner_message = winners_list[0]
+        list_size = len(winners_list)
+        if list_size > 1:
+            for i in range(1, list_size):
+                winner_message = f"{winner_message}\n{winners_list[i]}"
+        winner_message = f"{winner_message}\n WON THE GAME"
+        canvas.create_text(self.roll_dice_x_pos, self.half_screen_y + 50 , anchor="center", text=winner_message,
+                           font= ("Comic Sans MS", 20, "bold"), fill="#000000", justify="center")
+
+    def highlight_current_player(self, canvas, curr_player):
+        y_pos = self.starting_y_pos + (curr_player * self.global_increment)
+        canvas.coords(self.player_highlighter_ID, self.right_x_border - 40 , y_pos)
+
+    def show_not_enough_money(self, canvas):
+        canvas.create_text(self.yes_x_pos, self.yes_y_pos, anchor="center", text="NOT ENOUGH\nMONEY",
+                           font= ("Comic Sans MS", 20, "bold"), fill="#000000", justify="center")
+
+    def player_move_horizontal(self, canvas, player, direction):
+        totalMovement = 135
+        placeholder_id = self.player_image_id[player]
+        placeholder_coords = canvas.coords(placeholder_id)
+        increment = self.move_speed
+        if direction == "left":
+            while increment <= totalMovement:
+                canvas.coords(placeholder_id, placeholder_coords[0] + increment, placeholder_coords[1])
+                increment += self.move_speed
+                time.sleep(38)
+        else:
+            while increment <= totalMovement:
+                canvas.coords(placeholder_id, placeholder_coords[0] - increment, placeholder_coords[1])
+                increment += self.move_speed
+                time.sleep(38)
+
+    def player_move_vertical(self, canvas, player, placeholder_id, placeholder_coords, direction):
+        totalMovement = 135
+        increment = self.move_speed
+        if direction == "up":
+            while increment <= totalMovement:
+                canvas.coords(placeholder_id, placeholder_coords[0], placeholder_coords[1] - increment)
+                increment += self.move_speed
+                time.sleep(38)
+        else:
+            while increment <= totalMovement:
+                canvas.coords(placeholder_id, placeholder_coords[0], placeholder_coords[1] + increment)
+                increment += self.move_speed
+                time.sleep(38)
+
+    # TODO player movement 2
+    def player_movement(self, canvas, player, starting_pos, final_pos):
+        placeholder_id = self.player_image_id[player]
+        placeholder_coords = canvas.coords(placeholder_id)
+        pass
+
+
     def display_player_info(self, canvas):
-        starting_pos = 200
-        bottom_border = 860
-        right_border = 950
-        left_border = 1430
+        starting_pos = self.starting_y_pos
         total_players = len(self.player_info)
+        increment = (self.bottom_y_border - starting_pos) / total_players
+        self.global_increment = increment
         name_size = 22
         info_size = 20
-        increment = (bottom_border - starting_pos) / total_players
         for i in range(0, total_players):
             player_name = self.player_info[i][0]
-            player_balance = f"Balance: {self.player_info[i][1]} HKD"
-            player_position = f" is in {self.player_info[i][2]}"
+            player_balance = self.player_info[i][1]
+            player_balance_text = f"Balance: {player_balance} HKD"
+            player_position = self.player_info[i][2]
+            player_position_text = f" is in {player_position}"
             player_jail_status = self.player_info[i][3]
-            player_jail_turns = {self.player_info[i][4]}
+            player_jail_turns = self.player_info[i][4]
             player_total_properties = f"Properties: {self.player_info[i][5]}"
 
-            name_id = canvas.create_text(right_border, starting_pos, text= player_name, anchor="w",
-                               font=("Comic Sans MS", name_size, "bold"), fill="#000000")
+            # filters appropriate message based on balance and jail status
+            if player_balance >= 0:
+                if player_position == "Jail":
+                    if not player_jail_status:
+                        player_position_text = f"{player_position_text}, just visiting"
+                    else:
+                        player_position_text = f"{player_position_text}, {player_jail_turns} remaining"
+            else:
+                player_position_text = "HAS LOST"
+
+            name_id = canvas.create_text(self.right_x_border, starting_pos, text= player_name, anchor="w",
+                                         font=("Comic Sans MS", name_size, "bold"), fill="#000000")
 
             # calculates dimensions of name box
             name_box = canvas.bbox(name_id)
             name_width = name_box[2] - name_box[0] + 5
 
-            pos_id = canvas.create_text(right_border + name_width, starting_pos, text= player_position, anchor="w",
-                               font=("Comic Sans MS", info_size), fill="#000000")
-            balance_id = canvas.create_text(right_border, starting_pos + 40, text= player_balance, anchor="w",
-                               font=("Comic Sans MS", info_size), fill="#000000")
-            tot_prop_id = canvas.create_text(left_border, starting_pos + 40, text= player_total_properties, anchor="e",
-                               font=("Comic Sans MS", info_size), fill="#000000")
+            pos_id = canvas.create_text(self.right_x_border + name_width, starting_pos, text= player_position_text, anchor="w",
+                                        font=("Comic Sans MS", info_size), fill="#000000")
+            balance_id = canvas.create_text(self.right_x_border, starting_pos + 40, text= player_balance_text, anchor="w",
+                                            font=("Comic Sans MS", info_size), fill="#000000")
+            tot_prop_id = canvas.create_text(self.left_x_border, starting_pos + 40, text= player_total_properties, anchor="e",
+                                             font=("Comic Sans MS", info_size), fill="#000000")
             starting_pos += increment
             self.player_info_ID.append(name_id)
             self.player_info_ID.append(pos_id)
@@ -384,23 +468,26 @@
         # PLAYER INFORMATION
         self.display_player_info(canvas)
 
+        # PLAYER HIGHLIGHTER
+        canvas, self.player_highlighter_ID = self.create_player_highlighter(canvas)
+
         # ROLL DICE BUTTON
-        roll_dice_click_area, canvas,self.roll_dice_image_id = self.create_button(canvas, self.roll_dice_x_pos, self.roll_dice_y_pos, self.roll_dice_image)
+        roll_dice_click_area, canvas, self.roll_dice_image_id = self.create_button(canvas, self.roll_dice_x_pos, self.roll_dice_y_pos, self.roll_dice_image)
         #canvas.tag_bind(roll_dice_click_area, "<Button-1>", lambda e: self.roll_dice())
 
         # SAVE QUIT BUTTON
-        save_quit_click_area, canvas,self.save_quit_image_id = self.create_button(canvas, self.save_quit_x_pos, self.save_quit_y_pos, self.save_quit_image)
+        save_quit_click_area, canvas, self.save_quit_image_id = self.create_button(canvas, self.save_quit_x_pos, self.save_quit_y_pos, self.save_quit_image)
         canvas.tag_bind(save_quit_click_area, "<Button-1>", lambda e:self.save_quit())
 
 
         # OTHER BUTTONS JUST FOR TESTING POS WONT BE SHOWN ALL THE TIME
-        pay_fine_click_area,canvas,self.pay_fine_image_id = self.show_pay_fine_button(canvas)
+        pay_fine_click_area,canvas, self.pay_fine_image_id = self.show_pay_fine_button(canvas)
 
         #return the id so that image can be hidden and shown
-        yes_click_area,canvas,self.yes_image_id = self.show_yes_button(canvas)
-        no_click_area, canvas,self.no_image_id = self.show_no_button(canvas)
+        yes_click_area,canvas, self.yes_image_id = self.show_yes_button(canvas)
+        no_click_area, canvas, self.no_image_id = self.show_no_button(canvas)
 
-        click_area = [roll_dice_click_area,yes_click_area,no_click_area,pay_fine_click_area] #TODO place other click area for other buttons
+        click_area = [roll_dice_click_area, yes_click_area, no_click_area, pay_fine_click_area] #TODO place other click area for other buttons
         return canvas, click_area
 
     #------------------------#
Index: src/View/GUI.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># main.py\r\nimport tkinter as tk\r\nimport os\r\nfrom src.View.DisplayManager import *\r\nfrom src.Controller.InputHandler import InputHandler\r\n\r\nclass GUI(tk.Tk):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.game_canvas = None\r\n        imgpath = os.path.join(os.path.dirname(__file__), \"../../assets/main_menu_frame/startup_frame_background.png\")\r\n\r\n        self.background_image = tk.PhotoImage(file=imgpath)\r\n        self.image_width = self.background_image.width()\r\n        self.image_height = self.background_image.height()\r\n\r\n        # Set window size and center it\r\n        self.geometry(f\"{self.image_width}x{self.image_height}+\"\r\n                      f\"{int((self.winfo_screenwidth() - self.image_width) / 2)}+\"\r\n                      f\"{int((self.winfo_screenheight() - self.image_height) / 2)}\")\r\n\r\n        self.resizable(False, False)  # Disable resizing\r\n        self.configure(bg=\"#FFFFFF\")\r\n        self.title(\"Monopoly Hong Kong Special Edition\")\r\n\r\n        # Initialize frames\r\n        self.frames = {}\r\n\r\n        # Initialize DisplayManager and InputHandler\r\n        self.display_manager = DisplayManager(self)\r\n        self.main_menu_frame = MainMenuFrame(self)\r\n        self.info_page_frame = InfoPageFrame(self)\r\n        self.new_game_frame = NewGameFrame(self)\r\n        self.load_game_frame = LoadGameFrame(self)\r\n        #TODO <Remove the controller object from the GameplayFrame>\r\n        self.gameplay_frame = GameplayFrame(self)\r\n        self.input_handler = InputHandler()\r\n\r\n        # Set up frames\r\n        self.show_main_menu()\r\n        self.show_info_frame()\r\n        self.show_new_game_frame()\r\n        self.show_edit_board_frame()\r\n        self.show_load_game_frame()\r\n\r\n        # Initially show the main menu\r\n        self.show_frame(\"main_menu\")\r\n\r\n    # Show the main menu\r\n    def show_main_menu(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"main_menu\"] = frame\r\n        self.canvas = self.main_menu_frame.setup_main_menu_frame(frame)\r\n\r\n    # Show the game information\r\n    def show_info_frame(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"info\"] = frame\r\n        self.info_canvas = self.info_page_frame.setup_info_page(frame)\r\n\r\n    # Start a new game\r\n    def show_new_game_frame(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"new_game\"] = frame\r\n        self.new_game_canvas,self.play_button_clickable_area = self.new_game_frame.setup_new_game_page(frame, self.input_handler)\r\n\r\n    # Edit the game board\r\n    def show_edit_board_frame(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"edit_board\"] = frame\r\n        pass\r\n\r\n    # Load the previous game record\r\n    def show_load_game_frame(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"load_game\"] = frame\r\n        self.load_game_frame = self.load_game_frame.setup_load_game_frame(frame)\r\n\r\n    # Enter the main game board\r\n    def show_game_play_frame(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"gameplay\"] = frame\r\n        self.game_canvas, self.game_frame_click_areas = self.gameplay_frame.setup_new_gameplay_frame(frame) #TODO uncomment this line later\r\n\r\n    def show_frame(self, frame_name):\r\n        for frame in self.frames.values():\r\n            frame.place_forget()\r\n        self.frames[frame_name].place(x=0, y=0, width=self.image_width, height=self.image_height)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/View/GUI.py b/src/View/GUI.py
--- a/src/View/GUI.py	(revision 83090fff8b9239d266119cf2ce5627707757ef27)
+++ b/src/View/GUI.py	(date 1731305433236)
@@ -9,7 +9,6 @@
         super().__init__()
         self.game_canvas = None
         imgpath = os.path.join(os.path.dirname(__file__), "../../assets/main_menu_frame/startup_frame_background.png")
-
         self.background_image = tk.PhotoImage(file=imgpath)
         self.image_width = self.background_image.width()
         self.image_height = self.background_image.height()
Index: tests/test_GameLogic.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from unittest import TestCase\r\n\r\nfrom src.Model.GameLogic import *\r\nfrom src.Model.Player import *\r\nfrom src.Model.Gameboard import *\r\n\r\nplayer1 = Player(\"Den\")\r\nplayer2 = Player(\"Ben\")\r\nplayer3 = Player(\"Ken\")\r\nplayer4 = Player(\"Wen\")\r\nplayer5 = Player(\"Ren\")\r\nplayer6 = Player(\"Jen\")\r\nplayer7 = Player(\"Sam\")\r\nplayer8 = Player(\"Yam\")\r\n\r\ngameboard = Gameboard()\r\ngameboard.tiles[4] = Jail(4, [player1])\r\ngame_logic = GameLogic()\r\nplayers_list = []\r\nbroke_list = []\r\n\r\n\r\nclass TestGameLogic(TestCase):\r\n    def test_roll_dice(self):\r\n        number1, number2 = GameLogic.roll_dice()\r\n        self.assertLessEqual(number1, 4)\r\n        self.assertLessEqual(number2, 4)\r\n\r\n    def test_player_move(self):\r\n        tile = GameLogic.player_move(3, player3, gameboard)\r\n        self.assertEqual(tile.get_tile_type(), \"income_tax\")\r\n        tile1 = GameLogic.player_move(20, player4, gameboard)\r\n        self.assertEqual(tile1.get_tile_type(), \"go\")\r\n        tile2 = GameLogic.player_move(23, player5, gameboard)\r\n        self.assertEqual(tile2.get_tile_type(), \"income_tax\")\r\n\r\n    def test_player_first_round(self):\r\n        player1.set_in_jail_turns(3)\r\n        self.assertTrue(GameLogic.player_first_round(player1))\r\n\r\n    def test_player_second_round(self):\r\n        player1.set_in_jail_turns(2)\r\n        self.assertTrue(GameLogic.player_second_round(player1))\r\n\r\n    def test_player_third_round(self):\r\n        player1.set_in_jail_turns(1)\r\n        self.assertTrue(GameLogic.player_third_round(player1))\r\n\r\n    def test_same_double(self):\r\n        number1 = 7\r\n        number2 = 3\r\n        number3 = 9\r\n        number4 = 9\r\n        self.assertTrue(GameLogic.same_double(number3, number4))\r\n        self.assertFalse(GameLogic.same_double(number1, number2))\r\n\r\n    def test_out_jail_on_double(self):\r\n        gameboard.get_jail_tile().set_jailed_players([player1, player2])\r\n        GameLogic.out_jail_on_double(player1, 4, 4, gameboard)\r\n        self.assertFalse(player1.get_jail_status())\r\n        self.assertFalse(player1.get_fine_payed())\r\n        self.assertListEqual(gameboard.get_jail_tile().get_jailed_players(), [\"Ben\"])\r\n\r\n    def test_pay_fine(self):\r\n        original = player1.get_current_money()\r\n        GameLogic.pay_fine(game_logic, player1)\r\n        self.assertTrue(player1.get_fine_payed())\r\n        self.assertEqual(player1.get_current_money(), original - game_logic.get_fine())\r\n\r\n    def test_player_broke(self):\r\n        self.assertFalse(GameLogic.player_broke(player1))\r\n        player1.set_current_money(-100)\r\n        self.assertTrue(GameLogic.player_broke(player1))\r\n\r\n    def test_player_out(self):\r\n        players_list.clear()\r\n        players_list.append(player1)\r\n        GameLogic.player_out(game_logic, player1, players_list, broke_list)\r\n        self.assertFalse(player1 in players_list)\r\n        self.assertTrue(player1 in broke_list)\r\n\r\n    def test_game_ends(self):\r\n        players_list.clear()\r\n        players_list.append(player1)\r\n        self.assertTrue(GameLogic.game_ends(players_list, 1))\r\n        players_list.remove(player1)\r\n        self.assertTrue(GameLogic.game_ends(players_list, 100))\r\n\r\n    def test_get_fine(self):\r\n        game_logic.set_fine(100)\r\n        self.assertEqual(game_logic.get_fine(), 100)\r\n\r\n    def test_set_fine(self):\r\n        game_logic.set_fine(200)\r\n        self.assertEqual(game_logic.get_fine(), 200)\r\n\r\n    def test_get_current_round(self):\r\n        game_logic.set_current_round(100)\r\n        self.assertEqual(game_logic.get_current_round(), 100)\r\n\r\n    def test_set_current_round(self):\r\n        game_logic.set_current_round(200)\r\n        self.assertEqual(game_logic.get_current_round(), 200)\r\n\r\n    def test_display_winner(self):\r\n        players_list.clear()\r\n        players_list.append(player1)\r\n        player1.set_current_money(1000)\r\n        self.assertEqual(GameLogic.display_winner(game_logic, players_list),\r\n                         f\"The winner is: Den, with {players_list[0].get_current_money()} money.\")\r\n        players_list.append(player2)\r\n        player2.set_current_money(1000)\r\n        game_logic.set_current_round(100)\r\n        self.assertEqual(GameLogic.display_winner(game_logic, players_list),\r\n                         f\"The winner is: Den, Ben, with {players_list[0].get_current_money()} money.\")\r\n\r\n    def test_get_player_turn(self):\r\n        players_list.clear()\r\n        players_list.append(player6)\r\n        players_list.append(player7)\r\n        players_list.append(player8)\r\n        for i in range(2):\r\n            game_logic.set_player_turn(players_list)\r\n        game_logic.player_out(game_logic, player7, players_list, broke_list)\r\n        game_logic.set_player_turn(players_list)\r\n        self.assertEqual(game_logic.get_player_turn(), 1)\r\n        for i in range(2):\r\n            game_logic.set_player_turn(players_list)\r\n        self.assertEqual(game_logic.get_player_turn(), 1)\r\n\r\n    def test_set_player_turn(self):\r\n        players_list.append(player1)\r\n        players_list.append(player2)\r\n        game_logic.set_player_turn(players_list)\r\n        self.assertEqual(game_logic.get_player_turn(), 1)\r\n\r\n    def test_get_remove_last_round(self):\r\n        self.fail()\r\n\r\n    def test_set_removed_last_round(self):\r\n        self.fail()\r\n\r\n    def test_determine_next_round(self):\r\n        self.fail()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/test_GameLogic.py b/tests/test_GameLogic.py
--- a/tests/test_GameLogic.py	(revision 83090fff8b9239d266119cf2ce5627707757ef27)
+++ b/tests/test_GameLogic.py	(date 1731303503575)
@@ -106,13 +106,14 @@
         players_list.clear()
         players_list.append(player1)
         player1.set_current_money(1000)
-        self.assertEqual(GameLogic.display_winner(game_logic, players_list),
-                         f"The winner is: Den, with {players_list[0].get_current_money()} money.")
+        message, winners_list = GameLogic.display_winner(game_logic, players_list)
+        self.assertEqual(message, f"The winner is: ['Den'] with {1000} HKD")
         players_list.append(player2)
+        players_list.append(player3)
+        player3.set_current_money(600)
         player2.set_current_money(1000)
-        game_logic.set_current_round(100)
-        self.assertEqual(GameLogic.display_winner(game_logic, players_list),
-                         f"The winner is: Den, Ben, with {players_list[0].get_current_money()} money.")
+        message, winners_list = GameLogic.display_winner(game_logic, players_list)
+        self.assertEqual(message,f"The winner is: ['Den', 'Ben'] with {1000} HKD")
 
     def test_get_player_turn(self):
         players_list.clear()
Index: src/Model/GameLogic.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random\r\n\r\n#from src.Controller.GameController import GameController\r\n#from tests.test_GameLogic import game_logic\r\n\r\n\r\nclass GameLogic:\r\n    \"\"\"a private variable stating the amount of fine needed to be paid for getting out of jail\"\"\"\r\n    def __init__ (self):\r\n        self._fine = 150\r\n        self._removed_last_round = False\r\n        self._current_round = 1\r\n        self._player_turn = -1\r\n\r\n\r\n    def get_remove_last_round(self):\r\n        return self._removed_last_round\r\n\r\n    def set_removed_last_round(self,value):\r\n        self._removed_last_round = value\r\n\r\n    def get_fine(self):\r\n        return self._fine\r\n\r\n    def set_fine(self,fine):\r\n        self._fine = fine\r\n\r\n    def get_player_turn(self):\r\n        return self._player_turn\r\n\r\n    def set_player_turn(self,players_list):\r\n        #If there is no player removed during last round\r\n        if not self._removed_last_round:\r\n            self._player_turn +=1\r\n        self._removed_last_round = False\r\n        self._player_turn = self._player_turn % len(players_list)\r\n\r\n    def get_current_round(self):\r\n        return self._current_round\r\n\r\n    def set_current_round(self,new_round):\r\n        self._current_round = new_round\r\n\r\n    \"\"\"Get the number rolled from the two dices by a player\"\"\"\r\n    @staticmethod\r\n    def roll_dice():\r\n        return random.randint(1, 4), random.randint(1, 4)\r\n\r\n    \"\"\"The move logic, how a player moves on the board, and the tiles he/she lands or have been through\"\"\"\r\n\r\n    @staticmethod\r\n    def player_move(dice_number, player, gameboard):\r\n        for i in range(0, dice_number):\r\n            player.update_square(1)\r\n            if player.get_current_position() > 19:\r\n                player.set_square(0)\r\n            # TODO i != dice_number always since range is not inclusive\r\n            if gameboard.tiles[player.get_current_position()].name == \"Go\" and i != dice_number:\r\n                gameboard.tiles[player.get_current_position()].player_landed(player)  # Import Logic for 'Go'\r\n\r\n        # returns the new_tile\r\n        return gameboard.tiles[player.get_current_position()]\r\n\r\n    \"\"\"Three functions are for in jail\"\"\"\r\n\r\n    #For checking the round number in jail. 3 is the first round, 1 is the third round, 2 stays the same\r\n    @staticmethod\r\n    def player_first_round(player):\r\n        return player.get_in_jail_turns() == 3\r\n\r\n    @staticmethod\r\n    def player_second_round(player):\r\n        return player.get_in_jail_turns() == 2\r\n\r\n    \"\"\"The player is forced to pay a fine if the player did not pay in the first and second round in jail. \r\n        This condition monitoring should happen in the controller, meaning the controller needs to check \r\n        the condition and apply the correct function\"\"\"\r\n\r\n    @staticmethod\r\n    def player_third_round(player):\r\n        return player.get_in_jail_turns() == 1\r\n\r\n    \"\"\"Check if the result of the two dice rolls are the same\"\"\"\r\n\r\n    @staticmethod\r\n    def same_double(dice_number1, dice_number2):\r\n        return dice_number1 == dice_number2\r\n\r\n    \"\"\"The player gets out of jail as soon as getting the same number on two dices\"\"\"\r\n\r\n    @staticmethod\r\n    def out_jail_on_double(player, dice_number1, dice_number2, gameboard):\r\n        tile = GameLogic.player_move(dice_number1 + dice_number2, player, gameboard)\r\n        gameboard.get_jail_tile().free_player(player)\r\n        return tile\r\n\r\n    \"\"\"Pay the fine of 150 in jail\"\"\"\r\n\r\n    @staticmethod\r\n    def pay_fine(game_logic,player):\r\n        player.remove_money(game_logic.get_fine())\r\n        if player.get_jail_status():\r\n            player.set_fine_payed(True)\r\n\r\n    \"\"\"Check if player is broke, negative money\"\"\"\r\n\r\n    @staticmethod\r\n    def player_broke(player):\r\n        return player.get_current_money() < 0\r\n\r\n    @staticmethod\r\n    def player_out(game_logic,player, player_list, broke_list):\r\n        player_list.remove(player)\r\n        broke_list.append(player)\r\n        player.delete_all_properties()\r\n        game_logic.set_removed_last_round(True)\r\n\r\n    \"\"\"Check if the game is finished\"\"\"\r\n\r\n    @staticmethod\r\n    def game_ends(player_list,game_round):\r\n        return game_round == 100 or len(player_list) == 1\r\n\r\n    @staticmethod\r\n    def display_winner(game_logic,players_list):\r\n        if game_logic.get_current_round() == 100:\r\n            winner_list = []\r\n            message = \"The winner is: \"\r\n            value = -1\r\n            for player in players_list:\r\n                if player.get_current_money() >= value:\r\n                    winner_list.append(player)\r\n                    message += f\"{player.get_name()}, \"\r\n                    value = player.get_current_money()\r\n            message = f\"{message}with {winner_list[0].get_current_money()} money.\"\r\n            return message\r\n        elif len(players_list) == 1:\r\n            message = f\"The winner is: {players_list[0].get_name()}, with {players_list[0].get_current_money()} money.\"\r\n            return message\r\n\r\n    @staticmethod\r\n    def determine_next_round(game_logic,player_this_turn,player_list,broke_list):\r\n\r\n        #After each round check whether if the player_this_turn is broke\r\n        if GameLogic.player_broke(player_this_turn):\r\n            #Remove the player is the player is broke from the players_list into the broke list\r\n            GameLogic.player_out(game_logic, player_this_turn, player_list,broke_list)\r\n\r\n        #Increment current round\r\n        game_logic.set_current_round(game_logic.get_current_round() + 1)\r\n\r\n        #After each round check if the round ends\r\n        if GameLogic.game_ends(player_list, game_logic.get_current_round()):\r\n            # display the message showing the winner, pass the message as a parameter to display\r\n            message = GameLogic.display_winner(game_logic,player_list)\r\n            action = [\"game_ends\",message]\r\n            return action\r\n\r\n        #Set the player's turn for next around (a variable from 0 to len(player_list) -1\r\n        game_logic.set_player_turn(player_list)\r\n\r\n        #Fetch the player out from the player_list\r\n        player_next_turn = player_list[game_logic.get_player_turn()]\r\n\r\n        #if the player is in jail\r\n        if player_next_turn.get_jail_status():\r\n            #the player has paid the fine in jail or is in the third round, only roll button is displayed, therefore return \"jail_roll\"\r\n            #IMPORTANT, if a player initially has a balance that is less than the fine, the player cannot choose to pay fine\r\n            if player_next_turn.get_fine_payed():\r\n                action =[\"jail_roll\", player_next_turn,\"fine_payed\"]\r\n            elif GameLogic.player_third_round(player_next_turn):\r\n                action = [\"jail_roll\", player_next_turn,\"player_third_turn\"]\r\n            elif not GameLogic.player_third_round(player_next_turn) and player_next_turn.get_current_money() < game_logic.get_fine():\r\n                action = [\"jail_roll\",player_next_turn,\"Insufficient_money\"]\r\n            else:\r\n                #in other cases, the player can either choose to pay fine or to roll the dice, therefore return \"pay_fine_and_jail_roll\"\r\n                action = [\"pay_fine_and_jail_roll\",player_next_turn]\r\n            return action\r\n\r\n        #if the player is not in jail, shows the roll button\r\n        else:\r\n            action = [\"roll\",player_next_turn]\r\n            return action\r\n\r\n\r\n    #TODO del later after all the message display has been moved to the GUI\r\n    #Converts the turns_in_jail into visually correct numbers.\r\n    @staticmethod\r\n    def _convert_turns_in_jail(number):\r\n        match number:\r\n            case 1:\r\n                return 3\r\n            case 3:\r\n                return 1\r\n            case _:\r\n                return 2\r\n\r\n\r\n    @staticmethod\r\n    def in_jail_roll(game_logic,player_this_turn, board):\r\n        print(\"Player turn in jail is: \", GameLogic._convert_turns_in_jail(player_this_turn.get_in_jail_turns())) #TODO del\r\n        dice_roll1, dice_roll2 = GameLogic.roll_dice()\r\n        print(\"Rolled: dice one: (\",dice_roll1, \") dice two: (\", dice_roll2,\") move: (\", dice_roll1+dice_roll2,\")\") #TODO del later\r\n        if (not GameLogic.same_double(dice_roll1, dice_roll2)) and GameLogic.player_third_round(player_this_turn):\r\n            action = [\"show_pay_fine\",None]\r\n            board.tiles[player_this_turn.get_current_position()].free_player(player_this_turn)\r\n            if player_this_turn.get_current_money() > game_logic.get_fine():\r\n                landed_tile = GameLogic.player_move(dice_roll1 + dice_roll2, player_this_turn, board)\r\n                action[1] = landed_tile\r\n            return action\r\n        else:\r\n            flag = False\r\n            if GameLogic.same_double(dice_roll1, dice_roll2) or (\r\n                    GameLogic.player_second_round(player_this_turn) and player_this_turn.get_fine_payed()):\r\n                flag = True\r\n            if flag:\r\n                board.tiles[player_this_turn.get_current_position()].free_player(player_this_turn)\r\n                landed_tile = GameLogic.player_move(dice_roll1 + dice_roll2, player_this_turn, board)\r\n                action = [\"move\", landed_tile]\r\n            else:\r\n                action = [\"not_move\"]\r\n                player_this_turn.set_in_jail_turns(player_this_turn.get_in_jail_turns() - 1)\r\n            print(\"action: \", action[0]) #TODO del later\r\n            return action\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model/GameLogic.py b/src/Model/GameLogic.py
--- a/src/Model/GameLogic.py	(revision 83090fff8b9239d266119cf2ce5627707757ef27)
+++ b/src/Model/GameLogic.py	(date 1731309136387)
@@ -3,6 +3,7 @@
 #from src.Controller.GameController import GameController
 #from tests.test_GameLogic import game_logic
 
+game_length = 100
 
 class GameLogic:
     """a private variable stating the amount of fine needed to be paid for getting out of jail"""
@@ -119,27 +120,24 @@
 
     @staticmethod
     def game_ends(player_list,game_round):
-        return game_round == 100 or len(player_list) == 1
+        return (game_round == game_length) or (len(player_list) == 1)
 
     @staticmethod
-    def display_winner(game_logic,players_list):
-        if game_logic.get_current_round() == 100:
-            winner_list = []
-            message = "The winner is: "
-            value = -1
-            for player in players_list:
-                if player.get_current_money() >= value:
-                    winner_list.append(player)
-                    message += f"{player.get_name()}, "
-                    value = player.get_current_money()
-            message = f"{message}with {winner_list[0].get_current_money()} money."
-            return message
-        elif len(players_list) == 1:
-            message = f"The winner is: {players_list[0].get_name()}, with {players_list[0].get_current_money()} money."
-            return message
+    def display_winner(game_logic, players_list):
+        winners_list = []
+        greatestBalance = -1
+        for player in players_list:
+            if player.get_current_money() > greatestBalance:
+                winners_list.clear()
+                winners_list.append(player.get_name())
+                greatestBalance = player.get_current_money()
+            elif player.get_current_money() == greatestBalance:
+                winners_list.append(player.get_name())
+        return f"The winner is: {winners_list} with {greatestBalance} HKD", winners_list
 
     @staticmethod
     def determine_next_round(game_logic,player_this_turn,player_list,broke_list):
+        extra_info = None
 
         #After each round check whether if the player_this_turn is broke
         if GameLogic.player_broke(player_this_turn):
@@ -152,9 +150,9 @@
         #After each round check if the round ends
         if GameLogic.game_ends(player_list, game_logic.get_current_round()):
             # display the message showing the winner, pass the message as a parameter to display
-            message = GameLogic.display_winner(game_logic,player_list)
+            message, winners_list = GameLogic.display_winner(game_logic,player_list)
             action = ["game_ends",message]
-            return action
+            return action, winners_list
 
         #Set the player's turn for next around (a variable from 0 to len(player_list) -1
         game_logic.set_player_turn(player_list)
@@ -175,12 +173,12 @@
             else:
                 #in other cases, the player can either choose to pay fine or to roll the dice, therefore return "pay_fine_and_jail_roll"
                 action = ["pay_fine_and_jail_roll",player_next_turn]
-            return action
+            return action, extra_info
 
         #if the player is not in jail, shows the roll button
         else:
             action = ["roll",player_next_turn]
-            return action
+            return action, extra_info
 
 
     #TODO del later after all the message display has been moved to the GUI
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e63f52e8-b5e2-4b82-8eb0-ddb8c465611b\" name=\"Changes\" comment=\"Gameboard updates info as game is played\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Model/Gameboard.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Model/Gameboard.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/tests/test_GameController.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/tests/test_GameController.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/tests/test_Gameboard.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/tests/test_Gameboard.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Jupyter Notebook\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;PhDinTimeManagement&quot;\n  }\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/PhDinTimeManagement/The-Monopoly-Game-Project.git&quot;,\n    &quot;accountId&quot;: &quot;358c0e21-a4ef-4bac-aa60-9c8cdc9c591a&quot;\n  }\n}</component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 5\n}</component>\r\n  <component name=\"ProjectId\" id=\"2nZNqtspflyRZqXPpP505un74XG\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;Python tests.Python tests for test_GameController.TestGameController.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameController.TestGameController.test_load_game.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameController.TestGameController.test_save_game.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameController.TestGameController.test_save_gameboard.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameController.TestGameController.test_set_player_list.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_display_winner.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_game_ends.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_get_player_turn.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_out_jail_on_double.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_player_out.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_Gameboard.TestProperty.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests in test_GameController.py.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests in test_GameLogic.py.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests in test_Gameboard.py.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests in tests.executor&quot;: &quot;Run&quot;,\n    &quot;Python.DisplayManager.executor&quot;: &quot;Run&quot;,\n    &quot;Python.GUI.executor&quot;: &quot;Run&quot;,\n    &quot;Python.GUI.py.executor&quot;: &quot;Run&quot;,\n    &quot;Python.converter.executor&quot;: &quot;Run&quot;,\n    &quot;Python.gui.executor&quot;: &quot;Run&quot;,\n    &quot;Python.new.executor&quot;: &quot;Run&quot;,\n    &quot;Python.play_game.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;TODO_SCOPE&quot;: &quot;All Places&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\n    &quot;last_opened_file_path&quot;: &quot;D:/Programming Projects/pythonProject&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\r\n  <component name=\"PyCoverageOptionsProvider\">\r\n    <option name=\"myUseBundledCoveragePy\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Hp\\Desktop\\The-Monopoly-Game-Project\\src\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/assets/dice\" />\r\n      <recent name=\"$PROJECT_DIR$\" />\r\n      <recent name=\"$PROJECT_DIR$/src/View\" />\r\n      <recent name=\"D:\\PolyU\\PolyU Year 3\\COMP3211 Software Engineering\\Project Github\\src\\Model\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python tests.Python tests in tests\">\r\n    <configuration name=\"GUI.py\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/View/GUI.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"play_game\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/play_game.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests for test_GameController.TestGameController\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;test_GameController.TestGameController&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests for test_GameController.TestGameController.test_set_player_list\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;test_GameController.TestGameController.test_set_player_list&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests in test_Gameboard.py\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;$PROJECT_DIR$/tests/test_Gameboard.py&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PATH&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests in tests\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;$PROJECT_DIR$/tests&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PATH&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"tests\" factoryName=\"Unittests\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"$USER_HOME$/miniconda3/python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_pattern\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PATH&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Python.GUI.py\" />\r\n      <item itemvalue=\"Python.play_game\" />\r\n      <item itemvalue=\"Python tests.Python tests in test_Gameboard.py\" />\r\n      <item itemvalue=\"Python tests.Python tests for test_GameController.TestGameController\" />\r\n      <item itemvalue=\"Python tests.Python tests for test_GameController.TestGameController.test_set_player_list\" />\r\n      <item itemvalue=\"Python tests.Python tests in tests\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python tests.Python tests in tests\" />\r\n        <item itemvalue=\"Python tests.Python tests in test_Gameboard.py\" />\r\n        <item itemvalue=\"Python.play_game\" />\r\n        <item itemvalue=\"Python tests.Python tests for test_GameController.TestGameController\" />\r\n        <item itemvalue=\"Python tests.Python tests for test_GameController.TestGameController.test_set_player_list\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-PY-242.23726.102\" />\r\n        <option value=\"bundled-python-sdk-5e1850174b45-399fe30bd8c1-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-242.23726.102\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e63f52e8-b5e2-4b82-8eb0-ddb8c465611b\" name=\"Changes\" comment=\"\" />\r\n      <created>1729176831318</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1729176831318</updated>\r\n      <workItem from=\"1729176832503\" duration=\"5256000\" />\r\n      <workItem from=\"1729205014409\" duration=\"9100000\" />\r\n      <workItem from=\"1729216750621\" duration=\"322000\" />\r\n      <workItem from=\"1729217094305\" duration=\"939000\" />\r\n      <workItem from=\"1729258610543\" duration=\"706000\" />\r\n      <workItem from=\"1729259351895\" duration=\"10538000\" />\r\n      <workItem from=\"1729515491755\" duration=\"234000\" />\r\n      <workItem from=\"1729661586409\" duration=\"244000\" />\r\n      <workItem from=\"1729934612284\" duration=\"1836000\" />\r\n      <workItem from=\"1730004190962\" duration=\"1095000\" />\r\n      <workItem from=\"1730024143686\" duration=\"7972000\" />\r\n      <workItem from=\"1730109912025\" duration=\"33000\" />\r\n      <workItem from=\"1730110856482\" duration=\"230000\" />\r\n      <workItem from=\"1730111961934\" duration=\"1279000\" />\r\n      <workItem from=\"1730120246622\" duration=\"12973000\" />\r\n      <workItem from=\"1730199675463\" duration=\"26000\" />\r\n      <workItem from=\"1730208733155\" duration=\"322000\" />\r\n      <workItem from=\"1730278497914\" duration=\"318000\" />\r\n      <workItem from=\"1730278822997\" duration=\"15714000\" />\r\n      <workItem from=\"1730367503069\" duration=\"612000\" />\r\n      <workItem from=\"1730377042614\" duration=\"1385000\" />\r\n      <workItem from=\"1730743920545\" duration=\"780000\" />\r\n      <workItem from=\"1730767053814\" duration=\"1079000\" />\r\n      <workItem from=\"1730770731790\" duration=\"4357000\" />\r\n      <workItem from=\"1730850634269\" duration=\"17838000\" />\r\n      <workItem from=\"1730882470024\" duration=\"2769000\" />\r\n      <workItem from=\"1730889107444\" duration=\"4140000\" />\r\n      <workItem from=\"1730895521339\" duration=\"19539000\" />\r\n      <workItem from=\"1730964060732\" duration=\"1663000\" />\r\n      <workItem from=\"1730972783021\" duration=\"3191000\" />\r\n      <workItem from=\"1730989712473\" duration=\"1708000\" />\r\n      <workItem from=\"1730993765178\" duration=\"4274000\" />\r\n      <workItem from=\"1731031523855\" duration=\"11977000\" />\r\n      <workItem from=\"1731054695566\" duration=\"118000\" />\r\n      <workItem from=\"1731074412556\" duration=\"1797000\" />\r\n      <workItem from=\"1731078137827\" duration=\"10029000\" />\r\n      <workItem from=\"1731196069487\" duration=\"215000\" />\r\n      <workItem from=\"1731196700593\" duration=\"162000\" />\r\n      <workItem from=\"1731201908878\" duration=\"156000\" />\r\n      <workItem from=\"1731242001093\" duration=\"3471000\" />\r\n      <workItem from=\"1731245527946\" duration=\"3172000\" />\r\n      <workItem from=\"1731286034609\" duration=\"572000\" />\r\n      <workItem from=\"1731296715339\" duration=\"470000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"gameboard functions\">\r\n      <created>1729259402457</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729259402457</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"test\">\r\n      <created>1729259636382</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729259636382</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Classes V1 created&#10;standard Gameboard initialized and objects created\">\r\n      <created>1729273012131</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729273012131</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Updated gameboard and player functions to NEW US8\">\r\n      <created>1729936455309</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729936455309</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Updated gameboard and player functions to NEW US8 v2\">\r\n      <created>1730006659690</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730006659690</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Updated gameboard and player functions to NEW US8 v2\">\r\n      <created>1730006706523</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730006706523</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Updated gameboard and player functions to NEW US8 v3&#10;&#10;Added Unit tests to Gameboard.py\">\r\n      <created>1730032008562</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730032008562</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Touch Ups on Gameboard.py v5\">\r\n      <created>1730113203511</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730113203511</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Touch Ups on Gameboard.py v5\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730887919396</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730887919396</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"gameplay screen and color tiles\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730887941310</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730887941310</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"VIEW deconfliction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730957289520</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730957289520</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"VIEW deconfliction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730959929307</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730959929307</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"View pulling information from Controller's Gameboard to display tile colors\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730960307059</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730960307059</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"gameplay frame updates\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730979527952</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730979527952</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"gameplay frame updates\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730979567924</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730979567925</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"gameplay frame updates\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730979619739</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730979619739</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"load_color bug fix\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730992691005</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730992691005</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"load_color bug fix\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730992706781</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730992706781</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"new_buttons\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730996314464</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730996314464</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"new_buttons\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730996365290</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730996365290</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"restored GameController\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730997269019</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730997269019</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"restored GameController\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730997953416</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730997953416</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"displayed info on board\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731054717984</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731054717984</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"displayed info on board\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731054780781</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731054780781</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"displayed info on board\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731076215613</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731076215613</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"displayed info on board\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731081428735</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731081428735</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"displayed info on board\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731088137797</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731088137797</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Gameboard updates info as game is played\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731250632548</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731250632548</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"29\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"main\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <ignored-roots>\r\n      <path value=\"$PROJECT_DIR$/..\" />\r\n    </ignored-roots>\r\n    <MESSAGE value=\"gameboard functions\" />\r\n    <MESSAGE value=\"test\" />\r\n    <MESSAGE value=\"Classes V1 created&#10;standard Gameboard initialized and objects created\" />\r\n    <MESSAGE value=\"Updated gameboard and player functions to NEW US8\" />\r\n    <MESSAGE value=\"Updated gameboard and player functions to NEW US8 v2\" />\r\n    <MESSAGE value=\"Updated gameboard and player functions to NEW US8 v3&#10;&#10;Added Unit tests to Gameboard.py\" />\r\n    <MESSAGE value=\"Touch Ups on Gameboard.py v5\" />\r\n    <MESSAGE value=\"gameplay screen and color tiles\" />\r\n    <MESSAGE value=\"VIEW deconfliction\" />\r\n    <MESSAGE value=\"View pulling information from Controller's Gameboard to display tile colors\" />\r\n    <MESSAGE value=\"gameplay frame updates\" />\r\n    <MESSAGE value=\"load_color bug fix\" />\r\n    <MESSAGE value=\"new_buttons\" />\r\n    <MESSAGE value=\"restored GameController\" />\r\n    <MESSAGE value=\"displayed info on board\" />\r\n    <MESSAGE value=\"Gameboard updates info as game is played\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Gameboard updates info as game is played\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/Source Code/Source Code/Model/Gameboard.py</url>\r\n          <line>33</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n    <watches-manager>\r\n      <configuration name=\"PythonConfigurationType\">\r\n        <watch expression=\"self.tile_info\" language=\"Python\" />\r\n        <watch expression=\"i\" language=\"Python\" />\r\n        <watch expression=\"self.tile_info[i]\" language=\"Python\" />\r\n      </configuration>\r\n    </watches-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/Game_py$new.coverage\" NAME=\"new Coverage Results\" MODIFIED=\"1730338734766\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$DisplayManager.coverage\" NAME=\"DisplayManager Coverage Results\" MODIFIED=\"1730822333950\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$GUI.coverage\" NAME=\"GUI Coverage Results\" MODIFIED=\"1730824526772\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n    <SUITE FILE_PATH=\"coverage/The_Monopoly_Game_py$GUI.coverage\" NAME=\"GUI Coverage Results\" MODIFIED=\"1730881360455\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n    <SUITE FILE_PATH=\"coverage/The_Monopoly_Game_py$.coverage\" NAME=\" Coverage Results\" MODIFIED=\"1731297170028\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/tests\" />\r\n    <SUITE FILE_PATH=\"coverage/The_Monopoly_Game_py$play_game.coverage\" NAME=\"play_game Coverage Results\" MODIFIED=\"1731286047157\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$.coverage\" NAME=\" Coverage Results\" MODIFIED=\"1730198824506\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/tests\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$Test.coverage\" NAME=\"Test Coverage Results\" MODIFIED=\"1730432574768\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$gui.coverage\" NAME=\"gui Coverage Results\" MODIFIED=\"1730294710638\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n    <SUITE FILE_PATH=\"coverage/The_Monopoly_Game_py$GUI_py.coverage\" NAME=\"GUI.py Coverage Results\" MODIFIED=\"1730976251687\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$converter.coverage\" NAME=\"converter Coverage Results\" MODIFIED=\"1730821085160\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 83090fff8b9239d266119cf2ce5627707757ef27)
+++ b/.idea/workspace.xml	(date 1731314813902)
@@ -5,10 +5,13 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="e63f52e8-b5e2-4b82-8eb0-ddb8c465611b" name="Changes" comment="Gameboard updates info as game is played">
+      <change afterPath="$PROJECT_DIR$/assets/gameplay_frame/player_highlight.png" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Model/Gameboard.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/Model/Gameboard.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/tests/test_GameController.py" beforeDir="false" afterPath="$PROJECT_DIR$/tests/test_GameController.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/tests/test_Gameboard.py" beforeDir="false" afterPath="$PROJECT_DIR$/tests/test_Gameboard.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Controller/GameController.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/Controller/GameController.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Model/GameLogic.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/Model/GameLogic.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/View/DisplayManager.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/View/DisplayManager.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/View/GUI.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/View/GUI.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/tests/test_GameLogic.py" beforeDir="false" afterPath="$PROJECT_DIR$/tests/test_GameLogic.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -83,7 +86,7 @@
     &quot;TODO_SCOPE&quot;: &quot;All Places&quot;,
     &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
     &quot;git-widget-placeholder&quot;: &quot;main&quot;,
-    &quot;last_opened_file_path&quot;: &quot;D:/Programming Projects/pythonProject&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/tommy/Documents/INGEGNERIA/3.1 () Software Engineering/Group Project/The-Monopoly-Game-Project/assets/gameplay_frame&quot;,
     &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
     &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
     &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
@@ -98,6 +101,7 @@
   </component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
+      <recent name="C:\Users\tommy\Documents\INGEGNERIA\3.1 () Software Engineering\Group Project\The-Monopoly-Game-Project\assets\gameplay_frame" />
       <recent name="C:\Users\Hp\Desktop\The-Monopoly-Game-Project\src" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
@@ -107,7 +111,7 @@
       <recent name="D:\PolyU\PolyU Year 3\COMP3211 Software Engineering\Project Github\src\Model" />
     </key>
   </component>
-  <component name="RunManager" selected="Python tests.Python tests in tests">
+  <component name="RunManager" selected="Python.play_game">
     <configuration name="GUI.py" type="PythonConfigurationType" factoryName="Python">
       <module name="Source Code" />
       <option name="ENV_FILES" value="" />
@@ -245,9 +249,9 @@
     </list>
     <recent_temporary>
       <list>
+        <item itemvalue="Python.play_game" />
         <item itemvalue="Python tests.Python tests in tests" />
         <item itemvalue="Python tests.Python tests in test_Gameboard.py" />
-        <item itemvalue="Python.play_game" />
         <item itemvalue="Python tests.Python tests for test_GameController.TestGameController" />
         <item itemvalue="Python tests.Python tests for test_GameController.TestGameController.test_set_player_list" />
       </list>
@@ -311,7 +315,8 @@
       <workItem from="1731242001093" duration="3471000" />
       <workItem from="1731245527946" duration="3172000" />
       <workItem from="1731286034609" duration="572000" />
-      <workItem from="1731296715339" duration="470000" />
+      <workItem from="1731296715339" duration="1587000" />
+      <workItem from="1731299219928" duration="11297000" />
     </task>
     <task id="LOCAL-00001" summary="gameboard functions">
       <created>1729259402457</created>
@@ -529,7 +534,15 @@
       <option name="project" value="LOCAL" />
       <updated>1731250632548</updated>
     </task>
-    <option name="localTasksCounter" value="29" />
+    <task id="LOCAL-00029" summary="Gameboard updates info as game is played">
+      <option name="closed" value="true" />
+      <created>1731298345147</created>
+      <option name="number" value="00029" />
+      <option name="presentableId" value="LOCAL-00029" />
+      <option name="project" value="LOCAL" />
+      <updated>1731298345147</updated>
+    </task>
+    <option name="localTasksCounter" value="30" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -593,8 +606,6 @@
     <watches-manager>
       <configuration name="PythonConfigurationType">
         <watch expression="self.tile_info" language="Python" />
-        <watch expression="i" language="Python" />
-        <watch expression="self.tile_info[i]" language="Python" />
       </configuration>
     </watches-manager>
   </component>
@@ -603,8 +614,8 @@
     <SUITE FILE_PATH="coverage/Game_py$DisplayManager.coverage" NAME="DisplayManager Coverage Results" MODIFIED="1730822333950" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
     <SUITE FILE_PATH="coverage/Game_py$GUI.coverage" NAME="GUI Coverage Results" MODIFIED="1730824526772" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
     <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$GUI.coverage" NAME="GUI Coverage Results" MODIFIED="1730881360455" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
-    <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$.coverage" NAME=" Coverage Results" MODIFIED="1731297170028" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/tests" />
-    <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$play_game.coverage" NAME="play_game Coverage Results" MODIFIED="1731286047157" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$.coverage" NAME=" Coverage Results" MODIFIED="1731303503602" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/tests" />
+    <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$play_game.coverage" NAME="play_game Coverage Results" MODIFIED="1731309702614" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Game_py$.coverage" NAME=" Coverage Results" MODIFIED="1730198824506" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/tests" />
     <SUITE FILE_PATH="coverage/Game_py$Test.coverage" NAME="Test Coverage Results" MODIFIED="1730432574768" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Game_py$gui.coverage" NAME="gui Coverage Results" MODIFIED="1730294710638" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
