Index: src/Controller/GameController.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># GameController.py\r\n\r\nimport json\r\nimport os.path\r\n\r\nfrom src.Model.Gameboard import *\r\nfrom src.Model.Player import *\r\nfrom src.Model.GameLogic import GameLogic\r\nfrom datetime import datetime\r\nfrom src.View.GUI import *\r\n\r\n\r\nclass GameController:\r\n    def __init__(self, the_gui):\r\n        self.save_name = None\r\n        self.board = Gameboard()\r\n        self.game_logic = GameLogic()\r\n        self.gui = the_gui\r\n        self.player_list = []\r\n        self.broke_list = []\r\n        self.input_handler = InputHandler()\r\n        self.click_var = tk.StringVar()\r\n\r\n    def get_player_list(self):\r\n        return self.player_list\r\n\r\n    def set_player_list(self, player_list):\r\n        self.player_list = player_list.copy()\r\n\r\n    def get_broke_player_list(self):\r\n        return self.broke_list\r\n\r\n    def set_broke_player_list(self, broke_list):\r\n        self.broke_list = broke_list.copy()\r\n\r\n    def get_current_round(self):\r\n        return self.game_logic.get_current_round()\r\n\r\n    def get__turn(self):\r\n        return self.game_logic.get_player_turn()\r\n\r\n    def set__turn(self, turn):\r\n        self.game_logic._player_turn = turn\r\n\r\n    def set_current_round(self, new_round):\r\n        self.game_logic.set_current_round(new_round)\r\n\r\n    def set_save_name(self, save_name):\r\n        self.save_name = save_name\r\n\r\n    def set_remove_last_round(self, remove_last_round):\r\n        self.game_logic.set_removed_last_round(remove_last_round)\r\n\r\n    # TODO By Kent: We need to program to detect the click events from the users. The click will call the functions for us. \"\"\"\r\n    def start_game(self):\r\n        self.initialize_players()\r\n        while not GameLogic.game_ends(self.game_logic, self.get_player_list()):\r\n            # TODO self.play_round()\r\n            self.game_logic.set_current_round(self.game_logic.get_current_round() + 1)\r\n\r\n    \"\"\" This function is called after the 'Play' button is clicked in the game \"\"\"\r\n\r\n    def button_play(self):\r\n        self.game_logic.set_player_turn(self.get_player_list())\r\n        player_this_turn = self.get_player_list()[self.game_logic.get_player_turn()]\r\n\r\n    # TODO <show the roll dice button and display player_this_turn ONLY. IMPORTANT: CONFIG ALL THE BUTTONS WITH ITS FUNCTIONS>\r\n\r\n    def determine_next_round(self, player_this_turn):\r\n        \"\"\" Action is an array that stores the state of the Model after calling the 'determine_next_round' function \"\"\"\r\n        action = GameLogic.determine_next_round(self.game_logic, player_this_turn, self.get_player_list(),\r\n                                                self.get_broke_player_list())\r\n\r\n        if action[0] == \"game_ends\":\r\n            print(action[1])\r\n            # TODO <display the winner>\r\n            # wait for click event\r\n            return\r\n\r\n        # TODO <Display the player for next round>\r\n        if action[0] == \"jail_roll\":\r\n            # TODO <display jail_roll only>\r\n            return action  # del\r\n        elif action[0] == \"pay_fine_and_jail_roll\":\r\n            # TODO <display jail_roll and pay fine>\r\n            return action  # del\r\n        elif action[0] == \"Roll\":\r\n            # TODO <display roll only>\r\n            return action  # del\r\n\r\n    def land_and_complete_round(self, tile, player_this_turn):\r\n        tile_type = tile.get_tile_type()\r\n        action = None\r\n        if tile_type == \"property\":\r\n            if tile.get_owner() is None:\r\n                if tile.can_buy(player_this_turn):\r\n                    # TODO show button buy or not buy\r\n                    pass  # del\r\n                else:\r\n                    # TODO show not buy only\r\n                    pass  # del\r\n                self.gui.wait_variable(self.click_var)  # waits for the click_var to update before allowing execution\r\n                if self.click_var == \"buy\":\r\n                    action = \"buy\"\r\n                elif self.click_var == \"not_buy\":\r\n                    action = \"not_buy\"\r\n                pass\r\n            else:\r\n                # TODO update view for rent\r\n                action = \"rent\"\r\n            tile.player_landed(player_this_turn, action)\r\n            if self.click_var == \"buy\":\r\n                # TODO display property\r\n                pass  # del\r\n            else:\r\n                # TODO display property not bought\r\n                pass  # del\r\n            return\r\n        elif tile_type == \"jail\":\r\n            # TODO update view just visiting\r\n            pass\r\n        elif tile_type == \"go\":\r\n            # TODO update view\r\n            pass\r\n        elif tile_type == \"go_to_jail\":\r\n            # TODO jail animation\r\n            pass\r\n        elif tile_type == \"income_tax\":\r\n            # TODO tax animation\r\n            pass\r\n        elif tile_type == \"free_parking\":\r\n            # TODO parking animation\r\n            pass\r\n        tile.player_landed(tile, player_this_turn, action)\r\n\r\n    \"\"\"This function is called after pressing the 'Roll' button in the game window.\"\"\"\r\n\r\n    def roll_dice(self):\r\n        player_this_turn = self.get_player_list()[self.game_logic.get_player_turn()]\r\n        dice_roll1, dice_roll2 = GameLogic.roll_dice()\r\n        tile = GameLogic.player_move(dice_roll1 + dice_roll2, player_this_turn, self.board)\r\n        # TODO<Call function to display the animation in the view>\r\n        self.land_and_complete_round(tile, player_this_turn)\r\n        self.determine_next_round(player_this_turn)\r\n\r\n    # Roll function for player in jail\r\n    def in_jail_roll(self, player_this_turn):\r\n        action = GameLogic.in_jail_roll(self.game_logic, player_this_turn, self.board)\r\n        if action[0] == \"show_pay_fine\":\r\n            # TODO <show the pay fine button>\r\n            # wait for pay fine button to be clicked\r\n            if action[1] is not None:\r\n                self.land_and_complete_round(action[1], player_this_turn)\r\n                # TODO <show moving animation>\r\n        elif action[0] == \"move\":\r\n            # TODO <show animation for player moving>\r\n            self.land_and_complete_round(action[1], player_this_turn)\r\n        elif action[0] == 'not_move':\r\n            # TODO <display the normal roll button>\r\n            pass  # del\r\n        self.determine_next_round(player_this_turn)\r\n\r\n    def pay_fine(self, player_this_turn):\r\n        # pay_fine_logic\r\n        GameLogic.pay_fine(self.game_logic, player_this_turn)\r\n        # TODO <Show the money is deduced>\r\n\r\n    def buy_button(self, name_of_action):\r\n        self.click_var.set(name_of_action)\r\n\r\n    def no_buy_button(self, name_of_action):\r\n        self.click_var.set(name_of_action)\r\n        # TODO <Show did not buy property>\r\n\r\n    \"\"\"By Kent: we don't need loop here. Instead we get a list from the view after the player clicks 'play'\"\"\"\r\n\r\n    def initialize_players(self):\r\n        num_players = self.input_handler.get_name_or_players(\"Enter the number of players (2-6): \")\r\n        for i in range(num_players):\r\n            player_name = self.input_handler.get_name_or_players(f\"Enter name for Player {i + 1}: \")\r\n            new_player = Player(player_name)\r\n            self.get_player_list().append(new_player)\r\n        print(\"Players initialized successfully.\\n\")\r\n\r\n    def end_game(self):\r\n        # Need to modify the logic in GameLogic endgame\r\n        pass\r\n\r\n    # noinspection PyTypeChecker\r\n    def save_game(self, save_name):\r\n        # gets current directory in which the program is running\r\n        save_directory = os.path.dirname(os.path.abspath(__file__))\r\n\r\n        # moves up and into the saves directory and normalizes the path\r\n        save_directory = os.path.normpath(os.path.join(save_directory, \"..\", \"..\", \"saves\"))\r\n        message1 = \"\"\r\n\r\n        # ensures directory existence or creates\r\n        if not os.path.exists(save_directory):\r\n            os.makedirs(save_directory)\r\n            message1 = \"Save directory deleted or non existent --> Creating\"\r\n\r\n        save_instance = SavedGame(save_name, self)\r\n        game_data = save_instance.to_dictionary()\r\n        file_path = os.path.join(save_directory, f'{save_name}.json')\r\n        with open(file_path, 'w') as save_file:\r\n            json.dump(game_data, save_file, indent=4)\r\n            message = \"Game saved successfully.\\n\"\r\n        return f\"{message1}\\n{message}\"\r\n\r\n    def load_game(self, load_name):\r\n        # gets current directory in which the program is running\r\n        save_directory = os.path.dirname(os.path.abspath(__file__))\r\n\r\n        # moves up and into the saves directory and normalizes the path\r\n        save_directory = os.path.normpath(os.path.join(save_directory, \"..\", \"..\", \"saves\"))\r\n\r\n        file_path = os.path.join(save_directory, f'{load_name}.json')\r\n\r\n        # parse save file into a dictionary and handles exceptions\r\n        try:\r\n            with open(file_path, 'r') as game_data:\r\n                game_data_dict = json.load(game_data)\r\n        except FileNotFoundError:\r\n            print(\"Game saved does not exist.\")\r\n            return\r\n        except json.JSONDecodeError:\r\n            print(\"Error in reading save file.\")\r\n            return\r\n\r\n        # pulls information from the dictionary into respective variables\r\n        self.set_save_name(game_data_dict[\"save_name\"])\r\n        self.set_current_round(game_data_dict[\"current_round\"])\r\n        self.set__turn(game_data_dict[\"_turn\"])\r\n        self.set_remove_last_round(game_data_dict[\"remove_last_round\"])\r\n\r\n        # gameboard_setup is a list of dictionaries, will cycle and update appropriately\r\n        gameboard_info = game_data_dict[\"gameboard_setup\"]\r\n        for tile_info, i in zip(gameboard_info, range(20)):\r\n            self.board.tiles[i].update_name_pos_type(tile_info[\"name\"], tile_info[\"board_pos\"], tile_info[\"tile_type\"])\r\n            tile_type = tile_info[\"tile_type\"]\r\n            if tile_type == \"property\":\r\n                self.board.tiles[i].update_values(tile_info[\"price\"], tile_info[\"rent\"], tile_info[\"owner\"],\r\n                                                  tile_info[\"color\"])\r\n            elif tile_type == \"income_tax\":\r\n                self.board.tiles[i].update_values(tile_info[\"tax_percentage\"])\r\n            elif tile_type == \"jail\":\r\n                self.board.tiles[i].update_values(tile_info[\"jailed_players\"])\r\n            elif tile_type == \"go\":\r\n                self.board.tiles[i].update_values(tile_info[\"pass_prize\"])\r\n\r\n        # creates players objects and copies information from the dictionary\r\n        players = game_data_dict[\"players_list\"]\r\n        for p_data in players:\r\n            new_player = Player(\"\")\r\n            new_player.update_values(p_data[\"_username\"], p_data[\"_current_money\"], p_data[\"_jail_status\"],\r\n                                     p_data[\"_fine_payed\"], p_data[\"_current_square\"], p_data[\"_in_jail_turns\"],\r\n                                     p_data[\"_properties\"])\r\n            self.player_list.append(new_player)\r\n\r\n        broke_players = game_data_dict[\"broke_list\"]\r\n        for p_data in broke_players:\r\n            new_player = Player(\"\")\r\n            new_player.update_values(p_data[\"_username\"], p_data[\"_current_money\"], p_data[\"_jail_status\"],\r\n                                     p_data[\"_fine_payed\"], p_data[\"_current_square\"], p_data[\"_in_jail_turns\"],\r\n                                     p_data[\"_properties\"])\r\n            self.broke_list.append(new_player)\r\n\r\n\r\n# this class will copy the current game instance\r\nclass SavedGame:\r\n    def __init__(self, save_name, game_controller):\r\n        # Gets the name of the save and current round\r\n        self.save_name = save_name\r\n        self.save_time = datetime.now().strftime(\"%H:%M %d-%m-%Y\")\r\n        self._turn = game_controller.get__turn()\r\n        self.remove_last_round = game_controller.game_logic.get_remove_last_round()\r\n        self.current_round = game_controller.get_current_round()\r\n\r\n        # Saves the setup of the gameboard as a list\r\n        self.tiles = game_controller.board.tiles.copy()\r\n\r\n        # Saves players information\r\n        self.player_list = game_controller.get_player_list().copy()\r\n        self.broke_list = game_controller.get_broke_player_list().copy()\r\n\r\n    def to_dictionary(self):\r\n        # unpacks list of objects to a list of dictionary entries\r\n        gameboard_data = [tile.__dict__ for tile in self.tiles]\r\n        player_data = [player.__dict__ for player in self.player_list]\r\n        broke_player_data = [player.__dict__ for player in self.broke_list]\r\n\r\n        return {\r\n            \"save_name\": self.save_name,\r\n            \"save_time\": self.save_time,\r\n            \"_turn\": self._turn,\r\n            \"remove_last_round\": self.remove_last_round,\r\n            \"current_round\": self.current_round,\r\n            \"gameboard_setup\": gameboard_data,\r\n            \"players_list\": player_data,\r\n            \"broke_list\": broke_player_data\r\n        }\r\n\r\n    def get_save_name(self):\r\n        return self.save_name
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Controller/GameController.py b/src/Controller/GameController.py
--- a/src/Controller/GameController.py	(revision eec15f1025aea13178ab7d101dd80fceedc67dda)
+++ b/src/Controller/GameController.py	(date 1730979017003)
@@ -21,6 +21,9 @@
         self.input_handler = InputHandler()
         self.click_var = tk.StringVar()
 
+        # button_config
+        self.pass_color_information()
+
     def get_player_list(self):
         return self.player_list
 
@@ -51,6 +54,14 @@
     def set_remove_last_round(self, remove_last_round):
         self.game_logic.set_removed_last_round(remove_last_round)
 
+    def pass_color_information(self):
+        for i in range(0, 20):
+            self.gui.gameplay_frame.tile_colors.append(None)
+            has_color = self.gui.gameplay_frame.get_color_coord(i)
+            if has_color:
+                color = self.board.tiles[i].get_color()
+                self.gui.gameplay_frame.set_color(i, color)
+
     # TODO By Kent: We need to program to detect the click events from the users. The click will call the functions for us. """
     def start_game(self):
         self.initialize_players()
Index: src/View/DisplayManager.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nimport os\r\n\r\n# Base path for assets\r\nassets_base_path = os.path.join(os.path.dirname(__file__), \"../../assets\")\r\n\r\nclass DisplayManager:\r\n    def __init__(self, gui):\r\n        self.gui = gui  # Reference to the main GUI instance\r\n        self.error_labels = [None] * 6  # Hold error messages for player names\r\n        self.player_entries = []  # Hold player name entry widgets\r\n        self.player_box_images_refs = []  # Hold player box image references\r\n        self.player_text_refs = [None] * 6  # Store references to the text displayed in each player box\r\n        self.clicked_boxes = [False] * 6  # Add a flag list to track clicked boxes\r\n\r\n        self.active_widgets = []  # Store references to active widgets\r\n        self.hidden_widgets = {}  # Dictionary to store widgets and their positions for hiding/showing\r\n\r\n        self.back_arrow_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"info_frame/back_arrow.png\"))\r\n\r\n    def clear_widgets_create_canvas_set_background(self, frame, background):\r\n        # Clear any existing widgets in the frame\r\n        for widget in frame.winfo_children():\r\n            widget.destroy()\r\n\r\n        # Create the canvas and set the background image\r\n        canvas = tk.Canvas(frame, bg=\"#FFFFFF\", height=self.gui.image_height, width=self.gui.image_width, bd=0,\r\n                           highlightthickness=0, relief=\"ridge\")\r\n        canvas.place(x=0, y=0)\r\n        canvas.create_image(0, 0, anchor=\"nw\", image=background)\r\n        return canvas\r\n\r\n\r\nclass GameplayFrame(DisplayManager):\r\n    def __init__(self, gui, controller):\r\n        # New Gameplay frame images\r\n        super().__init__(gui)\r\n        self.controller = controller # gets the game controller to retrieve information to setup the board\r\n        self.new_gameplay_frame_background = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"gameplay_frame/gameplay_frame_background.png\"))\r\n\r\n        # Gameboard tiles colors empty list, will get loaded from the Gameboard model\r\n        self.tile_colors = []\r\n\r\n        # Tile color coordinates from anchor (reference point) \"NW\" corner\r\n        self.__tile_color_coord = [\r\n            None,\r\n            [563, 819],\r\n            [428, 819],\r\n            None,\r\n            [158, 819],\r\n            None,\r\n            [116, 684],\r\n            [116, 549],\r\n            None,\r\n            [116, 279],\r\n            None,\r\n            [563, 237],\r\n            None,\r\n            [428, 237],\r\n            [158, 237],\r\n            None,\r\n            [698, 279],\r\n            [698, 414],\r\n            None,\r\n            [698, 684]\r\n        ]\r\n\r\n# ------------------------------------# Game Play Frame #------------------------------------#\r\n\r\n    def load_tile_colors(self):\r\n        for i in range(0,20):\r\n            has_color = self.__tile_color_coord[i]\r\n            self.tile_colors.append(None) # initializes the empty position\r\n            if has_color:   # if it has color then pulls the color from the gameboard and modifies the new entry\r\n                self.modify_tile_color(self.controller.board.tiles[i].get_color(), i)\r\n\r\n    # gets the information from the lists above and display all the tiles colors\r\n    def overlay_tile_colors(self, canvas):\r\n        for i in range(0, 20):\r\n            color_tuple = self.__tile_color_coord[i]\r\n            if color_tuple: # if None (meaning at that position there is a tile that has no color) doesn't execute\r\n                x_pos = color_tuple[0]\r\n                y_pos = color_tuple[1]\r\n                tile_color = self.tile_colors[i]\r\n                canvas.create_image(x_pos, y_pos, anchor=\"nw\", image=tile_color)\r\n\r\n    def setup_new_gameplay_frame(self, frame):\r\n        canvas = self.clear_widgets_create_canvas_set_background(frame, self.new_gameplay_frame_background)\r\n        self.load_tile_colors()\r\n        self.overlay_tile_colors(canvas)\r\n        return canvas\r\n\r\n    #------------------------#\r\n    # EDITING MODE FUNCTIONS #\r\n    #------------------------#\r\n\r\n    # modifies the color of the tile in the board editor\r\n    def modify_tile_color(self, color, tile_position):\r\n        # gets the right color path based on the tile position (vertical or horizontal)\r\n        if 0 < tile_position < 5 or 10 < tile_position < 15: #tile is horizontal\r\n            color_path = f\"gameplay_frame/{color}_h.png\"\r\n        else:\r\n            color_path = f\"gameplay_frame/{color}_v.png\"\r\n\r\n        #gets the appropriate image path\r\n        image_color_path = os.path.join(assets_base_path, color_path)\r\n\r\n        #modifies the list at the appropriate position with the new tile color reference\r\n        self.tile_colors[tile_position] = tk.PhotoImage(file=image_color_path)\r\n\r\n\r\nclass NewGameFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n\r\n        # New game frame images\r\n        self.new_game_frame_background = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"new_game_frame/new_game_frame_background.png\"))\r\n        self.player_box_images = [\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player1_box.png\")),\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player2_box.png\")),\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player3_box.png\")),\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player4_box.png\")),\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player5_box.png\")),\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player6_box.png\"))\r\n        ]\r\n        self.player_insert_demo_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"new_game_frame/player_insert_demo.png\"))\r\n        self.edit_board_button_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"new_game_frame/edit_board_button.png\"))\r\n        self.start_game_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/play_button.png\"))\r\n        self.random_name_button_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"new_game_frame/random_name_dice_button.png\"))\r\n        self.exit_new_game_hint_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"new_game_frame/exit_new_game_hint.png\"))\r\n        self.yes_button_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/yes_button.png\"))\r\n        self.no_button_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/no_button.png\"))\r\n        self.trash_button_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/trash_button.png\"))\r\n\r\n    # ------------------------------------# New Game Frame #------------------------------------#\r\n\r\n    def setup_new_game_page(self, frame, input_handler):\r\n        canvas = self.clear_widgets_create_canvas_set_background(frame, self.new_game_frame_background)\r\n\r\n        # Display the back button to return to the main menu\r\n        back_button = canvas.create_image(50, 50, image=self.back_arrow_image)\r\n        canvas.tag_bind(back_button, \"<Button-1>\", lambda e: self.confirm_exit_new_game(canvas))\r\n\r\n        # Store references to player input entries and images\r\n        self.player_entries = [None] * 6  # To hold the entry widgets\r\n        self.player_box_images_refs = []  # To hold image references for updating\r\n\r\n        # Display six player insert boxes on the left side\r\n        x_position = 300  # X position for the player boxes\r\n        y_position = 260  # Starting Y position for player boxes\r\n\r\n        for i, player_box_image in enumerate(self.player_box_images):\r\n            # Get dimensions of the player box image\r\n            image_width = player_box_image.width()\r\n            image_height = player_box_image.height()\r\n\r\n            # Display each player box image\r\n            player_box = canvas.create_image(x_position, y_position, anchor=\"nw\", image=player_box_image)\r\n            self.player_box_images_refs.append(player_box)  # Store the image reference\r\n\r\n            # Add a die image next to each player box for random name generation\r\n            dice_x_position = x_position - 55  # Adjust position to the left of the player box\r\n            dice_y_position = y_position + 10  # Slightly aligned with the player box\r\n            dice_button = canvas.create_image(dice_x_position, dice_y_position, anchor=\"nw\",\r\n                                              image=self.random_name_button_image)\r\n\r\n            # Creating the dice button\r\n            # Creat the dice button\r\n            dice_button = tk.Button(canvas, image=self.random_name_button_image, bd=0,  # No border\r\n                                    highlightthickness=0, highlightbackground=\"#FBF8F5\", bg=\"#FBF8F5\",\r\n                                    activebackground=\"#FBF8F5\",\r\n                                    command=lambda idx=i: self.generate_random_name(canvas, idx))\r\n\r\n            # Place the button\r\n            dice_button.place(x=x_position - 100, y=y_position + 9)\r\n            self.active_widgets.append(dice_button)  # Track the button for later removal\r\n\r\n            # Trash button to delete names\r\n            trash_button = tk.Button(canvas, image=self.trash_button_image, bd=0,\r\n                                     highlightthickness=0, highlightbackground=\"#FBF8F5\", bg=\"#FBF8F5\",\r\n                                     activebackground=\"#FBF8F5\",\r\n                                     command=lambda idx=i: self.delete_name(canvas, idx))\r\n\r\n            # Place the trash button\r\n            trash_button.place(x=x_position - 55, y=y_position + 9)  # Position right of the name box\r\n            self.active_widgets.append(trash_button)  # Track the button for later removal\r\n\r\n            # Create a clickable rectangle that matches the player box image dimensions\r\n            clickable_area = canvas.create_rectangle(\r\n                x_position, y_position, x_position + 1.2 * image_width, y_position + 1.2 * image_height,\r\n                outline=\"\", fill=\"\"\r\n            )\r\n\r\n            # Bind click event to the player box area to open an entry for manual name input\r\n            canvas.tag_bind(clickable_area, \"<Button-1>\",\r\n                            lambda e, idx=i, x=x_position, y=y_position: self.show_insert_entry(canvas, idx, x, y))\r\n\r\n            y_position += 100  # Adjust y-position for the next player box\r\n\r\n        # Display Edit Board and Play buttons on the right side\r\n        edit_board_button = canvas.create_image(self.gui.image_width - 450, 430, image=self.edit_board_button_image)\r\n        play_button = canvas.create_image(self.gui.image_width - 450, 650, image=self.start_game_image)\r\n\r\n        # Create clickable rectangles for Edit Board and Play buttons\r\n        edit_board_clickable_area = canvas.create_rectangle(\r\n            self.gui.image_width - 450 - (self.edit_board_button_image.width() * 0.6),\r\n            430 - (self.edit_board_button_image.height() * 0.6),\r\n            self.gui.image_width - 450 + (self.edit_board_button_image.width() * 0.6),\r\n            430 + (self.edit_board_button_image.height() * 0.6),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        play_button_clickable_area = canvas.create_rectangle(\r\n            self.gui.image_width - 450 - (self.start_game_image.width() * 0.6),\r\n            650 - (self.start_game_image.height() * 0.6),\r\n            self.gui.image_width - 450 + (self.start_game_image.width() * 0.6),\r\n            650 + (self.start_game_image.height() * 0.6),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n\r\n        # Bind actions for Edit Board and Play clickable areas\r\n        canvas.tag_bind(edit_board_clickable_area, \"<Button-1>\",\r\n                        lambda e: print(\"Edit board clicked\"))  # Placeholder action\r\n        canvas.tag_bind(play_button_clickable_area, \"<Button-1>\", lambda e: self.check_and_start_game(input_handler))\r\n\r\n        return canvas\r\n\r\n    def delete_name(self, canvas, idx):\r\n        # Clear the player's name from the entry\r\n        self.gui.input_handler.players_names[idx] = None\r\n\r\n        # Reset the box appearance to its original state\r\n        canvas.itemconfig(self.player_box_images_refs[idx], image=self.player_box_images[idx])\r\n        if self.player_text_refs[idx]:  # If there was a previous name shown, remove it\r\n            canvas.delete(self.player_text_refs[idx])\r\n            self.player_text_refs[idx] = None\r\n        if self.player_entries[idx]:  # If an entry widget is open, destroy it\r\n            self.player_entries[idx].destroy()\r\n            self.player_entries[idx] = None\r\n        self.clicked_boxes[idx] = False  # Reset the clicked state\r\n\r\n    def generate_random_name(self, canvas, idx):\r\n        # Check if the previous player name has been entered (except for the first player)\r\n        if idx > 0 and not self.gui.input_handler.players_names[idx - 1]:\r\n            self.show_msg(canvas, idx, \"* Previous player name must be entered first.\", is_error=True)\r\n            return\r\n\r\n        # Generate a random name\r\n        player_name = self.gui.input_handler.generate_name()\r\n\r\n        # Check if the name can be stored according to validation rules\r\n        if self.gui.input_handler.validate_and_store_name(idx, player_name):\r\n            # Save the generated name immediately\r\n            self.gui.input_handler.players_names[idx] = player_name\r\n\r\n            # Always show the generated name in the player box\r\n            self.show_insert_entry(canvas, idx, name=player_name)\r\n\r\n            # Show a hint message to prompt the user to press Enter if they want to save manually\r\n            self.show_msg(canvas, idx, \"* You can modify the name and press <Return> to save.\", is_error=False)\r\n        else:\r\n            # Show error if the name is invalid or duplicate\r\n            self.show_msg(canvas, idx, \"* Generated name is invalid or duplicate.\", is_error=True)\r\n\r\n    def show_insert_entry(self, canvas, idx, x_position=None, y_position=None, name=None):\r\n        if name:\r\n            # If a generated name is provided, show and save it immediately\r\n            player_name = name\r\n            self.gui.input_handler.players_names[idx] = player_name\r\n\r\n            # Remove any existing entry widget to update the display with the new name\r\n            if self.player_entries[idx]:\r\n                self.player_entries[idx].destroy()\r\n                self.player_entries[idx] = None  # Clear the reference\r\n\r\n            canvas.itemconfig(self.player_box_images_refs[idx], image=self.player_insert_demo_image)\r\n            if self.player_text_refs[idx]:\r\n                canvas.delete(self.player_text_refs[idx])\r\n            self.player_text_refs[idx] = canvas.create_text(\r\n                400, 290 + idx * 100, text=player_name, font=(\"Comic Sans MS\", 20), fill=\"#000000\"\r\n            )\r\n        else:\r\n            # Code for opening an entry widget for manual input\r\n            if self.player_entries[idx]:\r\n                self.player_entries[idx].destroy()\r\n\r\n            if not self.clicked_boxes[idx]:\r\n                canvas.itemconfig(self.player_box_images_refs[idx], image=self.player_insert_demo_image)\r\n                self.clicked_boxes[idx] = True\r\n\r\n            previous_name = str(self.gui.input_handler.players_names[idx]) if idx < len(\r\n                self.gui.input_handler.players_names) else \"\"\r\n\r\n            entry = tk.Entry(canvas, font=(\"Comic Sans MS\", 20), width=20, bd=0, bg=\"#E5E8E8\", fg=\"#000000\",\r\n                             highlightthickness=0, justify=\"left\")\r\n\r\n            if previous_name:\r\n                entry.insert(0, previous_name)\r\n            entry.place(x=x_position + 22, y=y_position + 16)\r\n            entry.focus_set()\r\n\r\n            def on_submit(event):\r\n                new_name = entry.get().strip()\r\n                # If the user press <Return> with nothing, should back to the original state without saving\r\n                if new_name:\r\n                    self.save_player_name(entry, idx, canvas)\r\n                else:\r\n                    self.delete_name(canvas, idx)  # Reset to original image if entry is empty\r\n\r\n            entry.bind(\"<Return>\", on_submit)\r\n            entry.bind(\"<FocusOut>\",\r\n                       lambda e: on_submit(e) if entry.get().strip() else self.clear_entry(entry, idx, canvas))\r\n            self.player_entries[idx] = entry\r\n\r\n            if self.error_labels[idx]:\r\n                self.error_labels[idx].destroy()\r\n\r\n    def clear_entry(self, entry, idx, canvas):\r\n        # Reset the player box to its original image without displaying any text\r\n        entry.destroy()\r\n        self.player_entries[idx] = None\r\n        canvas.itemconfig(self.player_box_images_refs[idx], image=self.player_box_images[idx])\r\n\r\n    def save_player_name(self, entry, idx, canvas):\r\n        player_name = entry.get().strip()\r\n\r\n        # Check if the name hasn't changed from the current one\r\n        if self.gui.input_handler.players_names[idx] == player_name:\r\n            self.show_msg(canvas, idx, \"* Name did not change.\", is_error=False)\r\n            return\r\n\r\n        # Check if the name is the same as another player\r\n        if player_name in self.gui.input_handler.get_all_player_names():\r\n            self.show_msg(canvas, idx, \"* Name cannot be the same as another player.\", is_error=True)\r\n            return\r\n\r\n        # Check if the previous player name has been entered (except for the first player)\r\n        if idx > 0 and not self.gui.input_handler.players_names[idx - 1]:\r\n            self.show_msg(canvas, idx, \"* Previous player name must be entered first.\", is_error=True)\r\n            return\r\n\r\n        # Check if the name is valid, if so, store it\r\n        if len(player_name) <= 20 and self.gui.input_handler.validate_and_store_name(idx, player_name):\r\n            # Clear any previous error messages\r\n            if self.error_labels[idx]:\r\n                self.error_labels[idx].destroy()\r\n                self.error_labels[idx] = None\r\n\r\n            # Remove any displayed name text reference and update with the new name\r\n            if self.player_text_refs[idx]:\r\n                canvas.delete(self.player_text_refs[idx])\r\n                self.player_text_refs[idx] = None\r\n\r\n            entry.delete(0, tk.END)  # Clear the entry to remove any leftover invalid text\r\n            entry.insert(0, player_name)  # Ensure the valid name is displayed\r\n            entry.destroy()\r\n\r\n            x_text_position = 330\r\n            y_text_position = 290 + idx * 100\r\n            self.player_text_refs[idx] = canvas.create_text(\r\n                x_text_position, y_text_position, text=player_name, font=(\"Comic Sans MS\", 20), fill=\"#000000\",\r\n                anchor=\"w\"\r\n            )\r\n        else:\r\n            self.show_msg(canvas, idx, \"* Name must be 1-20 characters.\", is_error=True)\r\n            entry.delete(0, tk.END)\r\n\r\n    def show_msg(self, frame, idx, msg, is_error=False, x_position=None, y_position=None):\r\n        if x_position is None:\r\n            x_position = 325\r\n        if y_position is None:\r\n            y_position = 322 + idx * 100\r\n\r\n        if self.error_labels[idx]:\r\n            self.error_labels[idx].destroy()\r\n\r\n        color = \"red\" if is_error else \"green\"\r\n        self.error_labels[idx] = tk.Label(\r\n            frame,\r\n            text=msg,\r\n            font=(\"Comic Sans MS\", 16),\r\n            fg=color,\r\n            bg=\"#FBF8F5\"\r\n        )\r\n        self.error_labels[idx].place(x=x_position, y=y_position)\r\n        self.active_widgets.append(self.error_labels[idx])  # Track the label for later removal\r\n\r\n    def check_and_start_game(self, input_handler):\r\n        # Retrieve all player names\r\n        player_names = input_handler.get_all_player_names()\r\n\r\n        # Check for at least two valid player names\r\n        if len([name for name in player_names if name]) < 2:\r\n            # Show error message below play button if fewer than 2 players\r\n            self.show_msg(self.gui.frames[\"new_game\"], 0, \"* At least two players are required to start the game.\",\r\n                          is_error=True, x_position=self.gui.image_width - 550, y_position=722)\r\n            return\r\n\r\n        # If all checks pass, transition to the GameBoard frame\r\n        print(\"Starting game with players:\")\r\n        for idx, name in enumerate(player_names, start=1):\r\n            if name:\r\n                print(f\"Player {idx}: {name}\")\r\n\r\n        # Show the GameBoard frame\r\n        self.gui.show_frame(\"gameplay\")\r\n\r\n    def confirm_exit_new_game(self, canvas):\r\n        # Clear any previously saved positions\r\n        self.hidden_widgets.clear()\r\n\r\n        # Hide all tracked widgets by storing their positions and calling `place_forget`\r\n        for widget in self.active_widgets:\r\n            try:\r\n                if widget.winfo_ismapped():  # Check if the widget is currently visible\r\n                    self.hidden_widgets[widget] = widget.place_info()  # Save widget's position info\r\n                    widget.place_forget()  # Hide the widget\r\n            except tk.TclError:\r\n                continue\r\n\r\n        # Now display exit confirmation\r\n        exit_hint = canvas.create_image(self.gui.image_width // 2 + 297, self.gui.image_height // 2 + 50,\r\n                                        image=self.exit_new_game_hint_image)\r\n        # Create Yes and No buttons in the popup\r\n        yes_button = canvas.create_image(self.gui.image_width // 2 + 150, self.gui.image_height // 2 + 200,\r\n                                         image=self.yes_button_image)\r\n        no_button = canvas.create_image(self.gui.image_width // 2 + 440, self.gui.image_height // 2 + 200,\r\n                                        image=self.no_button_image)\r\n\r\n        # Bind actions for Yes and No buttons\r\n        canvas.tag_bind(yes_button, \"<Button-1>\",\r\n                        lambda e: self.exit_to_main_menu(canvas, exit_hint, yes_button, no_button))\r\n        canvas.tag_bind(no_button, \"<Button-1>\",\r\n                        lambda e: self.cancel_exit_and_restore_widgets(canvas, exit_hint, yes_button, no_button))\r\n\r\n    def exit_to_main_menu(self, canvas, exit_hint, yes_button, no_button):\r\n        # Clear player data, remove the exit hint, and go back to main menu\r\n        self.clear_all_player_data(canvas)\r\n        self.cancel_exit_and_restore_widgets(canvas, exit_hint, yes_button, no_button)\r\n        self.gui.show_frame(\"main_menu\")\r\n\r\n    def cancel_exit_and_restore_widgets(self, canvas, exit_hint, yes_button, no_button):\r\n        # Clear the exit hint and buttons\r\n        canvas.delete(exit_hint)\r\n        canvas.delete(yes_button)\r\n        canvas.delete(no_button)\r\n\r\n        # Restore all widgets to their original positions\r\n        for widget, position_info in self.hidden_widgets.items():\r\n            widget.place(**position_info)  # Re-position each widget\r\n        self.hidden_widgets.clear()  # Clear the dictionary after restoring\r\n\r\n    def clear_all_player_data(self, canvas):\r\n        # Clear all entries for player data\r\n        for idx in range(6):\r\n            self.delete_name(canvas, idx)\r\n\r\n\r\nclass MainMenuFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n        # Main frame images\r\n        # Main Menu images\r\n        self.startup_background = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"main_menu_frame/startup_frame_background.png\"))\r\n        self.new_game_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"main_menu_frame/new_game_button.png\"))\r\n        self.load_game_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"main_menu_frame/load_game_button.png\"))\r\n        self.exit_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"main_menu_frame/exit_button.png\"))\r\n        self.info_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"main_menu_frame/info_button.png\"))\r\n\r\n    #------------------------------------# Main Menu Frame #------------------------------------#\r\n\r\n    def setup_main_menu_frame(self, frame):\r\n        canvas = self.clear_widgets_create_canvas_set_background(frame, self.startup_background)\r\n\r\n        # Button positions\r\n        button_y_positions = [self.gui.image_height * 0.55, self.gui.image_height * 0.70, self.gui.image_height * 0.85]\r\n\r\n        # Calculate dimensions for each button to set clickable areas\r\n        new_game_width, new_game_height = self.new_game_image.width(), self.new_game_image.height()\r\n        load_game_width, load_game_height = self.load_game_image.width(), self.load_game_image.height()\r\n        exit_width, exit_height = self.exit_image.width(), self.exit_image.height()\r\n        info_width, info_height = self.info_image.width(), self.info_image.height()\r\n\r\n        # \"New Game\" button and clickable area\r\n        new_game_button = canvas.create_image(self.gui.image_width // 2, button_y_positions[0],\r\n                                              image=self.new_game_image)\r\n        new_game_clickable_area = canvas.create_rectangle(\r\n            (self.gui.image_width // 2) - (0.6 * new_game_width), button_y_positions[0] - (0.6 * new_game_height),\r\n            (self.gui.image_width // 2) + (0.6 * new_game_width), button_y_positions[0] + (0.6 * new_game_height),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        canvas.tag_bind(new_game_clickable_area, \"<Button-1>\", lambda e: self.gui.show_frame(\"new_game\"))\r\n\r\n        # \"Load Game\" button and clickable area\r\n        load_game_button = canvas.create_image(self.gui.image_width // 2, button_y_positions[1],\r\n                                               image=self.load_game_image)\r\n        load_game_clickable_area = canvas.create_rectangle(\r\n            (self.gui.image_width // 2) - (0.6 * load_game_width), button_y_positions[1] - (0.6 * load_game_height),\r\n            (self.gui.image_width // 2) + (0.6 * load_game_width), button_y_positions[1] + (0.6 * load_game_height),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        canvas.tag_bind(load_game_clickable_area, \"<Button-1>\", lambda e: self.gui.show_frame(\"load_game\"))\r\n\r\n        # \"Exit\" button and clickable area\r\n        exit_button = canvas.create_image(self.gui.image_width // 2, button_y_positions[2], image=self.exit_image)\r\n        exit_clickable_area = canvas.create_rectangle(\r\n            (self.gui.image_width // 2) - (0.6 * exit_width), button_y_positions[2] - (0.6 * exit_height),\r\n            (self.gui.image_width // 2) + (0.6 * exit_width), button_y_positions[2] + (0.6 * exit_height),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        canvas.tag_bind(exit_clickable_area, \"<Button-1>\", lambda e: self.gui.quit())\r\n\r\n        # \"Info\" button in the corner and clickable area\r\n        info_button = canvas.create_image(self.gui.image_width - 85, 75, image=self.info_image)\r\n        info_clickable_area = canvas.create_rectangle(\r\n            (self.gui.image_width - 85) - (0.6 * info_width), 75 - (0.6 * info_height),\r\n            (self.gui.image_width - 85) + (0.6 * info_width), 75 + (0.6 * info_height),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        canvas.tag_bind(info_clickable_area, \"<Button-1>\", lambda e: self.gui.show_frame(\"info\"))\r\n\r\n        return canvas\r\n\r\n\r\nclass LoadGameFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n        # Load Game frame images\r\n        self.load_game_frame_background = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/load_game_frame_background.png\"))\r\n        self.saved_game_slot1_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/saved_game_slot1.png\"))\r\n        self.saved_game_slot2_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/saved_game_slot2.png\"))\r\n        self.saved_game_slot3_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/saved_game_slot3.png\"))\r\n        self.saved_game_slot4_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/saved_game_slot4.png\"))\r\n        self.saved_game_slot5_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/saved_game_slot5.png\"))\r\n        self.selected_saved_game_slot_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/selected_saved_game_slot.png\"))\r\n        self.load_and_play_button_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/load_and_play_button.png\"))\r\n\r\n    # ------------------------------------# Load Game Frame #------------------------------------#\r\n\r\n    def setup_load_game_frame(self, frame):\r\n        pass\r\n\r\n\r\nclass InfoPageFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n\r\n        # Info frame images\r\n        self.info_frame_background = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"info_frame/info_frame_background.png\"))\r\n\r\n    # --------------------------------------# Info Page #---------------------------------------#\r\n\r\n    def setup_info_page(self, frame):\r\n        canvas = self.clear_widgets_create_canvas_set_background(frame, self.info_frame_background)\r\n\r\n        # Back button dimensions for creating a larger clickable area\r\n        back_button_width, back_button_height = self.back_arrow_image.width(), self.back_arrow_image.height()\r\n\r\n        # Display the back button to return to the main menu\r\n        back_button = canvas.create_image(50, 50, image=self.back_arrow_image)\r\n\r\n        # Create a clickable rectangle slightly larger than the back button image\r\n        back_button_clickable_area = canvas.create_rectangle(\r\n            50 - (0.2 * back_button_width), 50 - (0.2 * back_button_height),  # Top-left corner\r\n            50 + back_button_width * 1.2, 50 + back_button_height * 1.2,  # Bottom-right corner\r\n            outline=\"\", fill=\"\"\r\n        )\r\n\r\n        # Bind the enlarged clickable area to the main menu transition\r\n        canvas.tag_bind(back_button_clickable_area, \"<Button-1>\", lambda e: self.gui.show_frame(\"main_menu\"))\r\n\r\n        return canvas\r\n\r\n\r\nclass EditBoardFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n\r\n        # Edit Board frame images\r\n\r\n#------------------------------------# Edit Board Frame #------------------------------------#\r\n\r\n    def setup_edit_board_frame(self, frame):\r\n        pass\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/View/DisplayManager.py b/src/View/DisplayManager.py
--- a/src/View/DisplayManager.py	(revision eec15f1025aea13178ab7d101dd80fceedc67dda)
+++ b/src/View/DisplayManager.py	(date 1730978412136)
@@ -30,14 +30,20 @@
         canvas.create_image(0, 0, anchor="nw", image=background)
         return canvas
 
+    @staticmethod
+    def calc_button_dim(button_image):
+        return button_image.width(), button_image.height()
+
 
 class GameplayFrame(DisplayManager):
-    def __init__(self, gui, controller):
+    def __init__(self, gui):
+        super().__init__(gui)
+
         # New Gameplay frame images
-        super().__init__(gui)
-        self.controller = controller # gets the game controller to retrieve information to setup the board
         self.new_gameplay_frame_background = tk.PhotoImage(
             file=os.path.join(assets_base_path, "gameplay_frame/gameplay_frame_background.png"))
+        self.roll_dice_image = tk.PhotoImage(file = os.path.join(assets_base_path, "gameplay_frame/roll_dice.png"))
+        self.save_quit_image = tk.PhotoImage(file = os.path.join(assets_base_path, "gameplay_frame/save_quit.png"))
 
         # Gameboard tiles colors empty list, will get loaded from the Gameboard model
         self.tile_colors = []
@@ -45,35 +51,41 @@
         # Tile color coordinates from anchor (reference point) "NW" corner
         self.__tile_color_coord = [
             None,
-            [563, 819],
-            [428, 819],
+            [565, 818],
+            [430, 818],
             None,
-            [158, 819],
+            [160, 818],
             None,
-            [116, 684],
-            [116, 549],
+            [118, 683],
+            [118, 548],
             None,
-            [116, 279],
+            [118, 278],
             None,
-            [563, 237],
+            [565, 236],
             None,
-            [428, 237],
-            [158, 237],
+            [430, 236],
+            [160, 236],
             None,
-            [698, 279],
-            [698, 414],
+            [700, 278],
+            [700, 413],
             None,
-            [698, 684]
+            [700, 683]
         ]
 
 # ------------------------------------# Game Play Frame #------------------------------------#
 
+    def set_color(self, pos, color):
+        self.tile_colors[pos] = color
+
+    def get_color_coord(self, pos):
+        return self.__tile_color_coord[pos]
+
+    # from the gameboard information loads the appropriate colors in the game frame
     def load_tile_colors(self):
         for i in range(0,20):
-            has_color = self.__tile_color_coord[i]
-            self.tile_colors.append(None) # initializes the empty position
-            if has_color:   # if it has color then pulls the color from the gameboard and modifies the new entry
-                self.modify_tile_color(self.controller.board.tiles[i].get_color(), i)
+            color = self.tile_colors[i]
+            if color:
+                self.modify_tile_color(color, i)
 
     # gets the information from the lists above and display all the tiles colors
     def overlay_tile_colors(self, canvas):
@@ -85,10 +97,47 @@
                 tile_color = self.tile_colors[i]
                 canvas.create_image(x_pos, y_pos, anchor="nw", image=tile_color)
 
+    # rolls the dice
+    def roll_dice(self):
+        print("Rolling dice...")
+
+    def save_quit(self):
+        print("Saving quit...")
+
+    # called to set up the entire gameplay_frame
     def setup_new_gameplay_frame(self, frame):
         canvas = self.clear_widgets_create_canvas_set_background(frame, self.new_gameplay_frame_background)
+
+        # loads tile colors and displays them
         self.load_tile_colors()
         self.overlay_tile_colors(canvas)
+
+        # buttons dimensions
+        roll_dice_width, roll_dice_height = self.calc_button_dim(self.roll_dice_image)
+        save_quit_width, save_quit_height = self.calc_button_dim(self.save_quit_image)
+
+        # roll_dice_button & clickable area
+        # position based on center
+        roll_dice_x_pos = self.gui.image_width * 2 / 7
+        roll_dice_y_pos = self.gui.image_height * 2 / 5
+        roll_dice_button = canvas.create_image(roll_dice_x_pos, roll_dice_y_pos, anchor="center", image=self.roll_dice_image)
+        roll_dice_clickable_area = canvas.create_rectangle(
+            (roll_dice_x_pos - roll_dice_width // 2), (roll_dice_y_pos - roll_dice_height // 2),
+            (roll_dice_x_pos + roll_dice_width // 2), (roll_dice_y_pos + roll_dice_height // 2),
+            outline="", fill=""
+        )
+        canvas.tag_bind(roll_dice_clickable_area, "<Button-1>", lambda e:self.roll_dice())
+
+        # save_quit button & clickable area
+        save_quit_x_pos = self.gui.image_width * 10 / 14
+        save_quit_y_pos = self.gui.image_height * 9 / 10
+        save_quit_button = canvas.create_image(save_quit_x_pos, save_quit_y_pos, anchor="center", image=self.save_quit_image)
+        save_quit_clickable_area = canvas.create_rectangle(
+            (save_quit_x_pos - roll_dice_width // 2), (save_quit_y_pos - roll_dice_height // 2),
+            (save_quit_x_pos + roll_dice_width // 2), (save_quit_y_pos + roll_dice_height // 2),
+            outline="", fill=""
+        )
+        canvas.tag_bind(save_quit_clickable_area, "<Button-1>", lambda e:self.save_quit())
         return canvas
 
     #------------------------#
@@ -391,6 +440,8 @@
         self.active_widgets.append(self.error_labels[idx])  # Track the label for later removal
 
     def check_and_start_game(self, input_handler):
+        self.gui.show_game_play_frame()  # TODO uncomment this line later
+
         # Retrieve all player names
         player_names = input_handler.get_all_player_names()
 
@@ -483,10 +534,10 @@
         button_y_positions = [self.gui.image_height * 0.55, self.gui.image_height * 0.70, self.gui.image_height * 0.85]
 
         # Calculate dimensions for each button to set clickable areas
-        new_game_width, new_game_height = self.new_game_image.width(), self.new_game_image.height()
-        load_game_width, load_game_height = self.load_game_image.width(), self.load_game_image.height()
-        exit_width, exit_height = self.exit_image.width(), self.exit_image.height()
-        info_width, info_height = self.info_image.width(), self.info_image.height()
+        new_game_width, new_game_height = self.calc_button_dim(self.new_game_image)
+        load_game_width, load_game_height = self.calc_button_dim(self.load_game_image)
+        exit_width, exit_height = self.calc_button_dim(self.exit_image)
+        info_width, info_height = self.calc_button_dim(self.info_image)
 
         # "New Game" button and clickable area
         new_game_button = canvas.create_image(self.gui.image_width // 2, button_y_positions[0],
Index: src/View/GUI.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># main.py\r\nimport tkinter as tk\r\nimport os\r\nfrom src.View.DisplayManager import *\r\nfrom src.Controller.InputHandler import InputHandler\r\n\r\nclass GUI(tk.Tk):\r\n    def __init__(self):\r\n        super().__init__()\r\n        imgpath = os.path.join(os.path.dirname(__file__), \"../../assets/main_menu_frame/startup_frame_background.png\")\r\n\r\n        self.background_image = tk.PhotoImage(file=imgpath)\r\n        self.image_width = self.background_image.width()\r\n        self.image_height = self.background_image.height()\r\n\r\n        # Set window size and center it\r\n        self.geometry(f\"{self.image_width}x{self.image_height}+\"\r\n                      f\"{int((self.winfo_screenwidth() - self.image_width) / 2)}+\"\r\n                      f\"{int((self.winfo_screenheight() - self.image_height) / 2)}\")\r\n\r\n        self.resizable(False, False)  # Disable resizing\r\n        self.configure(bg=\"#FFFFFF\")\r\n        self.title(\"Monopoly Hong Kong Special Edition\")\r\n\r\n        # Initialize frames\r\n        self.frames = {}\r\n\r\n        # Initialize DisplayManager and InputHandler\r\n        self.display_manager = DisplayManager(self)\r\n        self.main_menu_frame = MainMenuFrame(self)\r\n        self.info_page_frame = InfoPageFrame(self)\r\n        self.new_game_frame = NewGameFrame(self)\r\n        self.load_game_frame = LoadGameFrame(self)\r\n        #TODO <Remove the controller object from the GameplayFrame>\r\n        #self.gameplay_frame = GameplayFrame(self, controller)\r\n        self.input_handler = InputHandler()\r\n\r\n        # Set up frames\r\n        self.show_main_menu()\r\n        self.show_info_frame()\r\n        self.show_new_game_frame()\r\n        self.show_edit_board_frame()\r\n        self.show_load_game_frame()\r\n        #self.show_game_play_frame() TODO uncomment this line later\r\n\r\n        # Initially show the main menu\r\n        self.show_frame(\"main_menu\")\r\n\r\n    # Show the main menu\r\n    def show_main_menu(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"main_menu\"] = frame\r\n        self.canvas = self.main_menu_frame.setup_main_menu_frame(frame)\r\n\r\n    # Show the game information\r\n    def show_info_frame(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"info\"] = frame\r\n        self.info_canvas = self.info_page_frame.setup_info_page(frame)\r\n\r\n    # Start a new game\r\n    def show_new_game_frame(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"new_game\"] = frame\r\n        self.new_game_canvas = self.new_game_frame.setup_new_game_page(frame, self.input_handler)\r\n\r\n    # Edit the game board\r\n    def show_edit_board_frame(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"edit_board\"] = frame\r\n        pass\r\n\r\n    # Load the previous game record\r\n    def show_load_game_frame(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"load_game\"] = frame\r\n        pass\r\n\r\n    # Enter the main game board\r\n    def show_game_play_frame(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"gameplay\"] = frame\r\n        #self.game_canvas = self.gameplay_frame.setup_new_gameplay_frame(frame) TODO uncomment this line later\r\n\r\n    def show_frame(self, frame_name):\r\n        for frame in self.frames.values():\r\n            frame.place_forget()\r\n        self.frames[frame_name].place(x=0, y=0, width=self.image_width, height=self.image_height)\r\n\r\n# Run the GUI\r\ngui = GUI()\r\n#controller = GameController(gui)\r\n#gui.mainloop()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/View/GUI.py b/src/View/GUI.py
--- a/src/View/GUI.py	(revision eec15f1025aea13178ab7d101dd80fceedc67dda)
+++ b/src/View/GUI.py	(date 1730978412114)
@@ -32,7 +32,7 @@
         self.new_game_frame = NewGameFrame(self)
         self.load_game_frame = LoadGameFrame(self)
         #TODO <Remove the controller object from the GameplayFrame>
-        #self.gameplay_frame = GameplayFrame(self, controller)
+        self.gameplay_frame = GameplayFrame(self)
         self.input_handler = InputHandler()
 
         # Set up frames
@@ -41,7 +41,6 @@
         self.show_new_game_frame()
         self.show_edit_board_frame()
         self.show_load_game_frame()
-        #self.show_game_play_frame() TODO uncomment this line later
 
         # Initially show the main menu
         self.show_frame("main_menu")
@@ -80,14 +79,10 @@
     def show_game_play_frame(self):
         frame = tk.Frame(self)
         self.frames["gameplay"] = frame
-        #self.game_canvas = self.gameplay_frame.setup_new_gameplay_frame(frame) TODO uncomment this line later
+        self.game_canvas = self.gameplay_frame.setup_new_gameplay_frame(frame) #TODO uncomment this line later
 
     def show_frame(self, frame_name):
         for frame in self.frames.values():
             frame.place_forget()
         self.frames[frame_name].place(x=0, y=0, width=self.image_width, height=self.image_height)
 
-# Run the GUI
-gui = GUI()
-#controller = GameController(gui)
-#gui.mainloop()
\ No newline at end of file
Index: play_game.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from src.Controller.GameController import *\r\n\r\ncontroller = GameController(gui)\r\ngui.mainloop()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/play_game.py b/play_game.py
--- a/play_game.py	(revision eec15f1025aea13178ab7d101dd80fceedc67dda)
+++ b/play_game.py	(date 1730978412148)
@@ -1,4 +1,6 @@
 from src.Controller.GameController import *
 
+# Run the GUI
+gui = GUI()
 controller = GameController(gui)
 gui.mainloop()
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Black\">\r\n    <option name=\"sdkName\" value=\"Python 3.12 (pythonProject) (2)\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.12\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision eec15f1025aea13178ab7d101dd80fceedc67dda)
+++ b/.idea/misc.xml	(date 1730976265661)
@@ -3,5 +3,5 @@
   <component name="Black">
     <option name="sdkName" value="Python 3.12 (pythonProject) (2)" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="C:\Users\tommy\miniconda3" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e63f52e8-b5e2-4b82-8eb0-ddb8c465611b\" name=\"Changes\" comment=\"View pulling information from Controller's Gameboard to display tile colors\">\r\n      <change afterPath=\"$PROJECT_DIR$/play_game.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Controller/GameController.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Controller/GameController.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Model/GameLogic.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Model/GameLogic.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/View/GUI.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/View/GUI.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/tests/test_GameController.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/tests/test_GameController.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/tests/test_GameLogic.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/tests/test_GameLogic.py\" afterDir=\"false\" />\r\n    </list>\r\n    <list id=\"b53ad74c-d01b-4e52-9a34-f524bfab6613\" name=\"Changes by Kent Max Chandra\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Jupyter Notebook\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;PhDinTimeManagement&quot;\n  }\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\n  \"selectedUrlAndAccountId\": {\n    \"url\": \"https://github.com/PhDinTimeManagement/The-Monopoly-Game-Project.git\",\n    \"accountId\": \"4537f682-7852-42ab-b340-e62171856620\"\n  }\n}]]></component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 5\n}</component>\r\n  <component name=\"ProjectId\" id=\"2nZNqtspflyRZqXPpP505un74XG\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Python tests.Python tests for test_GameController.TestGameController.executor\": \"Run\",\n    \"Python tests.Python tests for test_GameController.TestGameController.test_load_game.executor\": \"Run\",\n    \"Python tests.Python tests for test_GameController.TestGameController.test_save_game.executor\": \"Run\",\n    \"Python tests.Python tests for test_GameController.TestGameController.test_save_gameboard.executor\": \"Run\",\n    \"Python tests.Python tests for test_GameController.TestGameController.test_set_player_list.executor\": \"Run\",\n    \"Python tests.Python tests for test_GameLogic.TestGameLogic.executor\": \"Run\",\n    \"Python tests.Python tests for test_GameLogic.TestGameLogic.test_display_winner.executor\": \"Run\",\n    \"Python tests.Python tests for test_GameLogic.TestGameLogic.test_game_ends.executor\": \"Run\",\n    \"Python tests.Python tests for test_GameLogic.TestGameLogic.test_get_player_turn.executor\": \"Run\",\n    \"Python tests.Python tests for test_GameLogic.TestGameLogic.test_out_jail_on_double.executor\": \"Run\",\n    \"Python tests.Python tests for test_GameLogic.TestGameLogic.test_player_out.executor\": \"Run\",\n    \"Python tests.Python tests for test_Gameboard.TestProperty.executor\": \"Run\",\n    \"Python tests.Python tests in test_GameController.py.executor\": \"Run\",\n    \"Python tests.Python tests in test_GameLogic.py.executor\": \"Run\",\n    \"Python tests.Python tests in test_Gameboard.py.executor\": \"Run\",\n    \"Python tests.Python tests in tests.executor\": \"Run\",\n    \"Python.DisplayManager.executor\": \"Run\",\n    \"Python.GUI.executor\": \"Run\",\n    \"Python.GUI.py.executor\": \"Run\",\n    \"Python.converter.executor\": \"Run\",\n    \"Python.gui.executor\": \"Run\",\n    \"Python.new.executor\": \"Run\",\n    \"Python.play_game.executor\": \"Run\",\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"TODO_SCOPE\": \"All Places\",\n    \"WebServerToolWindowFactoryState\": \"false\",\n    \"git-widget-placeholder\": \"main\",\n    \"last_opened_file_path\": \"D:/Programming Projects/pythonProject\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"settings.editor.selected.configurable\": \"preferences.pluginManager\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\r\n  <component name=\"PyCoverageOptionsProvider\">\r\n    <option name=\"myUseBundledCoveragePy\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Hp\\Desktop\\The-Monopoly-Game-Project\\src\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/assets/dice\" />\r\n      <recent name=\"$PROJECT_DIR$\" />\r\n      <recent name=\"$PROJECT_DIR$/src/View\" />\r\n      <recent name=\"D:\\PolyU\\PolyU Year 3\\COMP3211 Software Engineering\\Project Github\\src\\Model\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"GUI.py\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/View/GUI.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests for test_GameController.TestGameController\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;test_GameController.TestGameController&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests for test_GameController.TestGameController.test_set_player_list\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;test_GameController.TestGameController.test_set_player_list&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests for test_GameLogic.TestGameLogic\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;test_GameLogic.TestGameLogic&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests for test_Gameboard.TestProperty\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;test_Gameboard.TestProperty&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests in tests\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;$PROJECT_DIR$/tests&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PATH&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"tests\" factoryName=\"Unittests\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"$USER_HOME$/miniconda3/python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_pattern\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PATH&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Python.GUI.py\" />\r\n      <item itemvalue=\"Python tests.Python tests for test_GameController.TestGameController.test_set_player_list\" />\r\n      <item itemvalue=\"Python tests.Python tests for test_GameLogic.TestGameLogic\" />\r\n      <item itemvalue=\"Python tests.Python tests for test_Gameboard.TestProperty\" />\r\n      <item itemvalue=\"Python tests.Python tests for test_GameController.TestGameController\" />\r\n      <item itemvalue=\"Python tests.Python tests in tests\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python tests.Python tests for test_GameController.TestGameController\" />\r\n        <item itemvalue=\"Python tests.Python tests for test_GameController.TestGameController.test_set_player_list\" />\r\n        <item itemvalue=\"Python tests.Python tests for test_GameLogic.TestGameLogic\" />\r\n        <item itemvalue=\"Python tests.Python tests for test_Gameboard.TestProperty\" />\r\n        <item itemvalue=\"Python tests.Python tests in tests\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-PY-242.23726.102\" />\r\n        <option value=\"bundled-python-sdk-5e1850174b45-399fe30bd8c1-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-242.23726.102\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e63f52e8-b5e2-4b82-8eb0-ddb8c465611b\" name=\"Changes\" comment=\"\" />\r\n      <created>1729176831318</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1729176831318</updated>\r\n      <workItem from=\"1729176832503\" duration=\"5256000\" />\r\n      <workItem from=\"1729205014409\" duration=\"9100000\" />\r\n      <workItem from=\"1729216750621\" duration=\"322000\" />\r\n      <workItem from=\"1729217094305\" duration=\"939000\" />\r\n      <workItem from=\"1729258610543\" duration=\"706000\" />\r\n      <workItem from=\"1729259351895\" duration=\"10538000\" />\r\n      <workItem from=\"1729515491755\" duration=\"234000\" />\r\n      <workItem from=\"1729661586409\" duration=\"244000\" />\r\n      <workItem from=\"1729934612284\" duration=\"1836000\" />\r\n      <workItem from=\"1730004190962\" duration=\"1095000\" />\r\n      <workItem from=\"1730024143686\" duration=\"7972000\" />\r\n      <workItem from=\"1730109912025\" duration=\"33000\" />\r\n      <workItem from=\"1730110856482\" duration=\"230000\" />\r\n      <workItem from=\"1730111961934\" duration=\"1279000\" />\r\n      <workItem from=\"1730120246622\" duration=\"12973000\" />\r\n      <workItem from=\"1730199675463\" duration=\"26000\" />\r\n      <workItem from=\"1730208733155\" duration=\"322000\" />\r\n      <workItem from=\"1730278497914\" duration=\"318000\" />\r\n      <workItem from=\"1730278822997\" duration=\"15714000\" />\r\n      <workItem from=\"1730367503069\" duration=\"612000\" />\r\n      <workItem from=\"1730377042614\" duration=\"1385000\" />\r\n      <workItem from=\"1730743920545\" duration=\"780000\" />\r\n      <workItem from=\"1730767053814\" duration=\"1079000\" />\r\n      <workItem from=\"1730770731790\" duration=\"4357000\" />\r\n      <workItem from=\"1730850634269\" duration=\"17838000\" />\r\n      <workItem from=\"1730882470024\" duration=\"2769000\" />\r\n      <workItem from=\"1730889107444\" duration=\"4140000\" />\r\n      <workItem from=\"1730895521339\" duration=\"19539000\" />\r\n      <workItem from=\"1730964060732\" duration=\"1663000\" />\r\n      <workItem from=\"1730972783021\" duration=\"3191000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"gameboard functions\">\r\n      <created>1729259402457</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729259402457</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"test\">\r\n      <created>1729259636382</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729259636382</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Classes V1 created&#10;standard Gameboard initialized and objects created\">\r\n      <created>1729273012131</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729273012131</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Updated gameboard and player functions to NEW US8\">\r\n      <created>1729936455309</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729936455309</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Updated gameboard and player functions to NEW US8 v2\">\r\n      <created>1730006659690</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730006659690</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Updated gameboard and player functions to NEW US8 v2\">\r\n      <created>1730006706523</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730006706523</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Updated gameboard and player functions to NEW US8 v3&#10;&#10;Added Unit tests to Gameboard.py\">\r\n      <created>1730032008562</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730032008562</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Touch Ups on Gameboard.py v5\">\r\n      <created>1730113203511</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730113203511</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Touch Ups on Gameboard.py v5\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730887919396</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730887919396</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"gameplay screen and color tiles\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730887941310</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730887941310</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"VIEW deconfliction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730957289520</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730957289520</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"VIEW deconfliction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730959929307</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730959929307</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"View pulling information from Controller's Gameboard to display tile colors\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730960307059</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730960307059</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"14\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"main\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <ignored-roots>\r\n      <path value=\"$PROJECT_DIR$/..\" />\r\n    </ignored-roots>\r\n    <MESSAGE value=\"gameboard functions\" />\r\n    <MESSAGE value=\"test\" />\r\n    <MESSAGE value=\"Classes V1 created&#10;standard Gameboard initialized and objects created\" />\r\n    <MESSAGE value=\"Updated gameboard and player functions to NEW US8\" />\r\n    <MESSAGE value=\"Updated gameboard and player functions to NEW US8 v2\" />\r\n    <MESSAGE value=\"Updated gameboard and player functions to NEW US8 v3&#10;&#10;Added Unit tests to Gameboard.py\" />\r\n    <MESSAGE value=\"Touch Ups on Gameboard.py v5\" />\r\n    <MESSAGE value=\"gameplay screen and color tiles\" />\r\n    <MESSAGE value=\"VIEW deconfliction\" />\r\n    <MESSAGE value=\"View pulling information from Controller's Gameboard to display tile colors\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"View pulling information from Controller's Gameboard to display tile colors\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/Source Code/Source Code/Model/Gameboard.py</url>\r\n          <line>33</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/Game_py$.coverage\" NAME=\" Coverage Results\" MODIFIED=\"1730198824506\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/tests\" />\r\n    <SUITE FILE_PATH=\"coverage/The_Monopoly_Game_py$GUI_py.coverage\" NAME=\"GUI.py Coverage Results\" MODIFIED=\"1730974571806\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/The_Monopoly_Game_py$.coverage\" NAME=\" Coverage Results\" MODIFIED=\"1730975599663\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/tests\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$Test.coverage\" NAME=\"Test Coverage Results\" MODIFIED=\"1730432574768\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$gui.coverage\" NAME=\"gui Coverage Results\" MODIFIED=\"1730294710638\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$new.coverage\" NAME=\"new Coverage Results\" MODIFIED=\"1730338734766\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n    <SUITE FILE_PATH=\"coverage/The_Monopoly_Game_py$GUI.coverage\" NAME=\"GUI Coverage Results\" MODIFIED=\"1730881360455\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$converter.coverage\" NAME=\"converter Coverage Results\" MODIFIED=\"1730821085160\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n    <SUITE FILE_PATH=\"coverage/The_Monopoly_Game_py$play_game.coverage\" NAME=\"play_game Coverage Results\" MODIFIED=\"1730975846395\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$DisplayManager.coverage\" NAME=\"DisplayManager Coverage Results\" MODIFIED=\"1730822333950\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$GUI.coverage\" NAME=\"GUI Coverage Results\" MODIFIED=\"1730824526772\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision eec15f1025aea13178ab7d101dd80fceedc67dda)
+++ b/.idea/workspace.xml	(date 1730979124630)
@@ -5,12 +5,13 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="e63f52e8-b5e2-4b82-8eb0-ddb8c465611b" name="Changes" comment="View pulling information from Controller's Gameboard to display tile colors">
-      <change afterPath="$PROJECT_DIR$/play_game.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/assets/gameplay_frame/gameplay_frame_background.png" beforeDir="false" afterPath="$PROJECT_DIR$/assets/gameplay_frame/gameplay_frame_background.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/play_game.py" beforeDir="false" afterPath="$PROJECT_DIR$/play_game.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Controller/GameController.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/Controller/GameController.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Model/GameLogic.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/Model/GameLogic.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/View/DisplayManager.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/View/DisplayManager.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/View/GUI.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/View/GUI.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/tests/test_GameController.py" beforeDir="false" afterPath="$PROJECT_DIR$/tests/test_GameController.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/tests/test_GameLogic.py" beforeDir="false" afterPath="$PROJECT_DIR$/tests/test_GameLogic.py" afterDir="false" />
     </list>
     <list id="b53ad74c-d01b-4e52-9a34-f524bfab6613" name="Changes by Kent Max Chandra" comment="" />
     <option name="SHOW_DIALOG" value="false" />
@@ -35,12 +36,12 @@
     &quot;assignee&quot;: &quot;PhDinTimeManagement&quot;
   }
 }</component>
-  <component name="GithubPullRequestsUISettings"><![CDATA[{
-  "selectedUrlAndAccountId": {
-    "url": "https://github.com/PhDinTimeManagement/The-Monopoly-Game-Project.git",
-    "accountId": "4537f682-7852-42ab-b340-e62171856620"
-  }
-}]]></component>
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/PhDinTimeManagement/The-Monopoly-Game-Project.git&quot;,
+    &quot;accountId&quot;: &quot;4537f682-7852-42ab-b340-e62171856620&quot;
+  }
+}</component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
   </component>
@@ -56,46 +57,46 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Python tests.Python tests for test_GameController.TestGameController.executor": "Run",
-    "Python tests.Python tests for test_GameController.TestGameController.test_load_game.executor": "Run",
-    "Python tests.Python tests for test_GameController.TestGameController.test_save_game.executor": "Run",
-    "Python tests.Python tests for test_GameController.TestGameController.test_save_gameboard.executor": "Run",
-    "Python tests.Python tests for test_GameController.TestGameController.test_set_player_list.executor": "Run",
-    "Python tests.Python tests for test_GameLogic.TestGameLogic.executor": "Run",
-    "Python tests.Python tests for test_GameLogic.TestGameLogic.test_display_winner.executor": "Run",
-    "Python tests.Python tests for test_GameLogic.TestGameLogic.test_game_ends.executor": "Run",
-    "Python tests.Python tests for test_GameLogic.TestGameLogic.test_get_player_turn.executor": "Run",
-    "Python tests.Python tests for test_GameLogic.TestGameLogic.test_out_jail_on_double.executor": "Run",
-    "Python tests.Python tests for test_GameLogic.TestGameLogic.test_player_out.executor": "Run",
-    "Python tests.Python tests for test_Gameboard.TestProperty.executor": "Run",
-    "Python tests.Python tests in test_GameController.py.executor": "Run",
-    "Python tests.Python tests in test_GameLogic.py.executor": "Run",
-    "Python tests.Python tests in test_Gameboard.py.executor": "Run",
-    "Python tests.Python tests in tests.executor": "Run",
-    "Python.DisplayManager.executor": "Run",
-    "Python.GUI.executor": "Run",
-    "Python.GUI.py.executor": "Run",
-    "Python.converter.executor": "Run",
-    "Python.gui.executor": "Run",
-    "Python.new.executor": "Run",
-    "Python.play_game.executor": "Run",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "TODO_SCOPE": "All Places",
-    "WebServerToolWindowFactoryState": "false",
-    "git-widget-placeholder": "main",
-    "last_opened_file_path": "D:/Programming Projects/pythonProject",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "settings.editor.selected.configurable": "preferences.pluginManager",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Python tests.Python tests for test_GameController.TestGameController.executor&quot;: &quot;Run&quot;,
+    &quot;Python tests.Python tests for test_GameController.TestGameController.test_load_game.executor&quot;: &quot;Run&quot;,
+    &quot;Python tests.Python tests for test_GameController.TestGameController.test_save_game.executor&quot;: &quot;Run&quot;,
+    &quot;Python tests.Python tests for test_GameController.TestGameController.test_save_gameboard.executor&quot;: &quot;Run&quot;,
+    &quot;Python tests.Python tests for test_GameController.TestGameController.test_set_player_list.executor&quot;: &quot;Run&quot;,
+    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.executor&quot;: &quot;Run&quot;,
+    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_display_winner.executor&quot;: &quot;Run&quot;,
+    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_game_ends.executor&quot;: &quot;Run&quot;,
+    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_get_player_turn.executor&quot;: &quot;Run&quot;,
+    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_out_jail_on_double.executor&quot;: &quot;Run&quot;,
+    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_player_out.executor&quot;: &quot;Run&quot;,
+    &quot;Python tests.Python tests for test_Gameboard.TestProperty.executor&quot;: &quot;Run&quot;,
+    &quot;Python tests.Python tests in test_GameController.py.executor&quot;: &quot;Run&quot;,
+    &quot;Python tests.Python tests in test_GameLogic.py.executor&quot;: &quot;Run&quot;,
+    &quot;Python tests.Python tests in test_Gameboard.py.executor&quot;: &quot;Run&quot;,
+    &quot;Python tests.Python tests in tests.executor&quot;: &quot;Run&quot;,
+    &quot;Python.DisplayManager.executor&quot;: &quot;Run&quot;,
+    &quot;Python.GUI.executor&quot;: &quot;Run&quot;,
+    &quot;Python.GUI.py.executor&quot;: &quot;Run&quot;,
+    &quot;Python.converter.executor&quot;: &quot;Run&quot;,
+    &quot;Python.gui.executor&quot;: &quot;Run&quot;,
+    &quot;Python.new.executor&quot;: &quot;Run&quot;,
+    &quot;Python.play_game.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;TODO_SCOPE&quot;: &quot;All Places&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;last_opened_file_path&quot;: &quot;D:/Programming Projects/pythonProject&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="PyCoverageOptionsProvider">
     <option name="myUseBundledCoveragePy" value="true" />
   </component>
@@ -110,7 +111,7 @@
       <recent name="D:\PolyU\PolyU Year 3\COMP3211 Software Engineering\Project Github\src\Model" />
     </key>
   </component>
-  <component name="RunManager">
+  <component name="RunManager" selected="Python.play_game">
     <configuration name="GUI.py" type="PythonConfigurationType" factoryName="Python">
       <module name="Source Code" />
       <option name="ENV_FILES" value="" />
@@ -134,23 +135,30 @@
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
-    <configuration name="Python tests for test_GameController.TestGameController" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
+    <configuration name="play_game" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="Source Code" />
       <option name="ENV_FILES" value="" />
       <option name="INTERPRETER_OPTIONS" value="" />
       <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
       <option name="SDK_HOME" value="" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/tests" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
       <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
       <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
-      <option name="_new_additionalArguments" value="&quot;&quot;" />
-      <option name="_new_target" value="&quot;test_GameController.TestGameController&quot;" />
-      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/play_game.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
-    <configuration name="Python tests for test_GameController.TestGameController.test_set_player_list" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
+    <configuration name="Python tests for test_GameController.TestGameController" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
       <module name="Source Code" />
       <option name="ENV_FILES" value="" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -162,11 +170,11 @@
       <option name="ADD_SOURCE_ROOTS" value="true" />
       <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
       <option name="_new_additionalArguments" value="&quot;&quot;" />
-      <option name="_new_target" value="&quot;test_GameController.TestGameController.test_set_player_list&quot;" />
+      <option name="_new_target" value="&quot;test_GameController.TestGameController&quot;" />
       <option name="_new_targetType" value="&quot;PYTHON&quot;" />
       <method v="2" />
     </configuration>
-    <configuration name="Python tests for test_GameLogic.TestGameLogic" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
+    <configuration name="Python tests for test_GameController.TestGameController.test_set_player_list" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
       <module name="Source Code" />
       <option name="ENV_FILES" value="" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -178,11 +186,11 @@
       <option name="ADD_SOURCE_ROOTS" value="true" />
       <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
       <option name="_new_additionalArguments" value="&quot;&quot;" />
-      <option name="_new_target" value="&quot;test_GameLogic.TestGameLogic&quot;" />
+      <option name="_new_target" value="&quot;test_GameController.TestGameController.test_set_player_list&quot;" />
       <option name="_new_targetType" value="&quot;PYTHON&quot;" />
       <method v="2" />
     </configuration>
-    <configuration name="Python tests for test_Gameboard.TestProperty" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
+    <configuration name="Python tests for test_GameLogic.TestGameLogic" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
       <module name="Source Code" />
       <option name="ENV_FILES" value="" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -194,11 +202,11 @@
       <option name="ADD_SOURCE_ROOTS" value="true" />
       <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
       <option name="_new_additionalArguments" value="&quot;&quot;" />
-      <option name="_new_target" value="&quot;test_Gameboard.TestProperty&quot;" />
+      <option name="_new_target" value="&quot;test_GameLogic.TestGameLogic&quot;" />
       <option name="_new_targetType" value="&quot;PYTHON&quot;" />
       <method v="2" />
     </configuration>
-    <configuration name="Python tests in tests" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
+    <configuration name="Python tests for test_Gameboard.TestProperty" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
       <module name="Source Code" />
       <option name="ENV_FILES" value="" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -210,8 +218,8 @@
       <option name="ADD_SOURCE_ROOTS" value="true" />
       <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
       <option name="_new_additionalArguments" value="&quot;&quot;" />
-      <option name="_new_target" value="&quot;$PROJECT_DIR$/tests&quot;" />
-      <option name="_new_targetType" value="&quot;PATH&quot;" />
+      <option name="_new_target" value="&quot;test_Gameboard.TestProperty&quot;" />
+      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
       <method v="2" />
     </configuration>
     <configuration default="true" type="tests" factoryName="Unittests">
@@ -233,19 +241,19 @@
     </configuration>
     <list>
       <item itemvalue="Python.GUI.py" />
+      <item itemvalue="Python.play_game" />
       <item itemvalue="Python tests.Python tests for test_GameController.TestGameController.test_set_player_list" />
       <item itemvalue="Python tests.Python tests for test_GameLogic.TestGameLogic" />
       <item itemvalue="Python tests.Python tests for test_Gameboard.TestProperty" />
       <item itemvalue="Python tests.Python tests for test_GameController.TestGameController" />
-      <item itemvalue="Python tests.Python tests in tests" />
     </list>
     <recent_temporary>
       <list>
+        <item itemvalue="Python.play_game" />
         <item itemvalue="Python tests.Python tests for test_GameController.TestGameController" />
         <item itemvalue="Python tests.Python tests for test_GameController.TestGameController.test_set_player_list" />
         <item itemvalue="Python tests.Python tests for test_GameLogic.TestGameLogic" />
         <item itemvalue="Python tests.Python tests for test_Gameboard.TestProperty" />
-        <item itemvalue="Python tests.Python tests in tests" />
       </list>
     </recent_temporary>
   </component>
@@ -449,16 +457,16 @@
     </breakpoint-manager>
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/Game_py$new.coverage" NAME="new Coverage Results" MODIFIED="1730338734766" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
+    <SUITE FILE_PATH="coverage/Game_py$DisplayManager.coverage" NAME="DisplayManager Coverage Results" MODIFIED="1730822333950" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
+    <SUITE FILE_PATH="coverage/Game_py$GUI.coverage" NAME="GUI Coverage Results" MODIFIED="1730824526772" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
+    <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$GUI.coverage" NAME="GUI Coverage Results" MODIFIED="1730881360455" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
+    <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$.coverage" NAME=" Coverage Results" MODIFIED="1730968732952" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/tests" />
+    <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$play_game.coverage" NAME="play_game Coverage Results" MODIFIED="1730979085228" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Game_py$.coverage" NAME=" Coverage Results" MODIFIED="1730198824506" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/tests" />
-    <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$GUI_py.coverage" NAME="GUI.py Coverage Results" MODIFIED="1730974571806" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="" />
-    <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$.coverage" NAME=" Coverage Results" MODIFIED="1730975599663" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/tests" />
     <SUITE FILE_PATH="coverage/Game_py$Test.coverage" NAME="Test Coverage Results" MODIFIED="1730432574768" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Game_py$gui.coverage" NAME="gui Coverage Results" MODIFIED="1730294710638" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
-    <SUITE FILE_PATH="coverage/Game_py$new.coverage" NAME="new Coverage Results" MODIFIED="1730338734766" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
-    <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$GUI.coverage" NAME="GUI Coverage Results" MODIFIED="1730881360455" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
+    <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$GUI_py.coverage" NAME="GUI.py Coverage Results" MODIFIED="1730976251687" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="" />
     <SUITE FILE_PATH="coverage/Game_py$converter.coverage" NAME="converter Coverage Results" MODIFIED="1730821085160" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
-    <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$play_game.coverage" NAME="play_game Coverage Results" MODIFIED="1730975846395" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Game_py$DisplayManager.coverage" NAME="DisplayManager Coverage Results" MODIFIED="1730822333950" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
-    <SUITE FILE_PATH="coverage/Game_py$GUI.coverage" NAME="GUI Coverage Results" MODIFIED="1730824526772" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
   </component>
 </project>
\ No newline at end of file
