Index: src/View/DisplayManager.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\r\nimport tkinter as tk\r\nimport os\r\n\r\n# Base path for assets\r\nassets_base_path = os.path.join(os.path.dirname(__file__), \"../../assets\")\r\n\r\nclass DisplayManager:\r\n    def __init__(self, gui):\r\n        self.gui = gui  # Reference to the main GUI instance\r\n        self.error_labels = [None] * 6  # Hold error messages for player names\r\n        self.player_entries = []  # Hold player name entry widgets\r\n        self.player_box_images_refs = []  # Hold player box image references\r\n        self.player_text_refs = [None] * 6  # Store references to the text displayed in each player box\r\n        self.clicked_boxes = [False] * 6  # Add a flag list to track clicked boxes\r\n\r\n        self.active_widgets = []  # Store references to active widgets\r\n        self.hidden_widgets = {}  # Dictionary to store widgets and their positions for hiding/showing\r\n\r\n        self.back_arrow_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"info_frame/back_arrow.png\"))\r\n\r\n    def clear_widgets_create_canvas_set_background(self, frame, background):\r\n        # Clear any existing widgets in the frame\r\n        for widget in frame.winfo_children():\r\n            widget.destroy()\r\n\r\n        # Create the canvas and set the background image\r\n        canvas = tk.Canvas(frame, bg=\"#FFFFFF\", height=self.gui.image_height, width=self.gui.image_width, bd=0,\r\n                           highlightthickness=0, relief=\"ridge\")\r\n        canvas.place(x=0, y=0)\r\n        canvas.create_image(0, 0, anchor=\"nw\", image=background)\r\n        return canvas\r\n\r\n    @staticmethod\r\n    def calc_button_dim(button_image):\r\n        return button_image.width(), button_image.height()\r\n\r\n\r\n# noinspection DuplicatedCode\r\nclass GameplayFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n\r\n        # New Gameplay frame images\r\n        self.new_gameplay_frame_background = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"gameplay_frame/gameplay_frame_background.png\"))\r\n        self.roll_dice_image = tk.PhotoImage(file = os.path.join(assets_base_path, \"gameplay_frame/roll_dice.png\"))\r\n        self.save_quit_image = tk.PhotoImage(file = os.path.join(assets_base_path, \"gameplay_frame/save_quit.png\"))\r\n        self.pay_fine_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"gameplay_frame/pay_fine.png\"))\r\n        self.yes_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"gameplay_frame/yes.png\"))\r\n        self.no_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"gameplay_frame/no.png\"))\r\n        self.player_info_ID = []\r\n\r\n        # Gameboard tiles colors empty list, will get loaded in by the Controller\r\n        self.tile_colors = []\r\n\r\n        # Tile color coordinates from anchor (reference point) \"NW\" corner\r\n        self.__tile_color_coord = [\r\n            None,\r\n            [565, 818],\r\n            [430, 818],\r\n            None,\r\n            [160, 818],\r\n            None,   # jail\r\n            [118, 683],\r\n            [118, 548],\r\n            None,\r\n            [118, 278],\r\n            None, # free parking\r\n            [565, 236],\r\n            None,\r\n            [430, 236],\r\n            [160, 236],\r\n            None, # go to jail\r\n            [700, 278],\r\n            [700, 413],\r\n            None,\r\n            [700, 683]\r\n        ]\r\n\r\n        # Gameboard tiles 9-tuple will get loaded in by the Controller\r\n        #  [type, name, price, rent, owner, nameObj, priceObj, rentObj, ownerObj]\r\n        self.tile_info = []\r\n\r\n        # Tile info coordinates, 6-tuple\r\n        self.__tile_info_coord = [\r\n            [None, None, 770, 860, None, None, None, None], # go\r\n            [635, 880, 635, 905, 635, 930, 635, 840], # prop1\r\n            [500, 880, 500, 905, 500, 930, 500, 840], # prop2\r\n            [365, 870, 365, 930, None, None, None, None],   # income tax\r\n            [230, 880, 230, 905, 230, 930, 230, 840], # prop3\r\n            [None, None, None, None, None, None, None, None], # jail\r\n            [100, 752, 75, 752, 50, 752, 142, 752], # prop4\r\n            [100, 617, 75, 617, 50, 617, 142, 617], # prop5\r\n            [95, 510, None, None, None, None, None, None], # chance\r\n            [100, 347, 75, 347, 50, 347, 142, 347], # prop6\r\n            [95 , 210, None, None, None, None, None, None], # free parking\r\n            [635, 165, 635, 190, 635, 215, 635, 258],  # prop7\r\n            [365, 240, 365, 190, None, None, None, None],  # chance\r\n            [500, 165, 500, 190, 500, 215, 500, 258],  # prop8\r\n            [230, 165, 230, 190, 230, 215, 230, 258],  # prop9\r\n            [None, None, None, None, None, None, None, None],  # go to jail\r\n            [765, 347, 790, 347, 815, 347, 722, 347],  # prop10\r\n            [765, 482, 790, 482, 815, 482, 722, 482],  # prop11\r\n            [770, 645, None, None, None, None, None, None],  # chance\r\n            [765, 752, 790, 752, 815, 752, 722, 752]  # prop12\r\n        ]\r\n\r\n        # players information\r\n        self.player_info = []\r\n        self.move_speed = 5\r\n        self.player_image_id = [\r\n            tk.PhotoImage(file= os.path.join(assets_base_path, \"gameplay_frame/player_highlight.png\"))\r\n            ]\r\n\r\n        # Buttons Coordinates\r\n        self.half_screen_y = self.gui.image_height / 2\r\n        self.roll_dice_x_pos = self.gui.image_width * 2 / 7\r\n        self.roll_dice_y_pos = self.gui.image_height * 2 / 5 - 50\r\n        self.save_quit_x_pos = self.gui.image_width * 11 / 14\r\n        self.save_quit_y_pos = self.gui.image_height * 9 / 10\r\n        self.pay_fine_x_pos = self.gui.image_width * 2 / 7\r\n        self.pay_fine_y_pos = self.gui.image_height * 5 / 10 - 45\r\n        self.yes_x_pos = self.gui.image_width * 5 / 14\r\n        self.yes_y_pos = self.gui.image_height * 4 / 5 - 20\r\n        self.no_x_pos = self.gui.image_width * 3 / 14\r\n        self.no_y_pos = self.gui.image_height * 4 / 5 - 20\r\n\r\n        # Player INFO Coordinates\r\n        self.starting_y_pos = 200\r\n        self.bottom_y_border = 860\r\n        self.right_x_border = 950\r\n        self.left_x_border = 1430\r\n        self.global_increment = 0\r\n        self.player_highlight_image = tk.PhotoImage(file= os.path.join(assets_base_path, \"gameplay_frame/player_highlight.png\"))\r\n        self.player_highlighter_ID = None\r\n\r\n# ------------------------------------# Game Play Frame #------------------------------------#\r\n    @staticmethod\r\n    def set_appropriate_text_dimension(name, price, rent, owner):\r\n        name_size = 16\r\n        price_size = 16\r\n        rent_size = 16\r\n        owner_size = 16\r\n\r\n        if len(name) > 11:\r\n            name_size -= 4\r\n        elif len(name) > 9:\r\n            name_size -= 2\r\n\r\n        if len(price) > 11:\r\n            price_size -= 4\r\n        elif len(price) > 9:\r\n            price_size -= 2\r\n\r\n        if len(rent) > 11:\r\n            rent_size -= 4\r\n        elif len(rent) > 9:\r\n            rent_size -= 2\r\n\r\n        if owner:\r\n            if len(owner) > 11:\r\n                owner_size -= 4\r\n            elif len(owner) >= 9:\r\n                owner_size -= 2\r\n\r\n        return name_size, price_size, rent_size, owner_size\r\n\r\n    @staticmethod\r\n    def rotate_text(i):\r\n        text_rotate = 0\r\n        # text rotation information\r\n        if 5 < i < 10:  # left board side\r\n            text_rotate = 270.0\r\n        elif 15 < i < 20:  # right board side\r\n            text_rotate = 90.0\r\n        return text_rotate\r\n\r\n    def set_color(self, pos, color):\r\n        self.tile_colors[pos][0] = color\r\n\r\n    def get_color_coord(self, pos):\r\n        return self.__tile_color_coord[pos]\r\n\r\n    #for testing\r\n    def roll_dice(self):\r\n        print(\"Rolling dice...\")\r\n\r\n    #for testing\r\n    def save_quit(self):\r\n        print(\"Saving quit...\")\r\n\r\n    def create_button(self, canvas, x_pos, y_pos, button_image):\r\n        button_width, button_height = self.calc_button_dim(button_image)\r\n        image_id = canvas.create_image(x_pos, y_pos, anchor=\"center\", image=button_image)\r\n        button_click_area = canvas.create_rectangle(\r\n            (x_pos - button_width // 2), (y_pos - button_height // 2),\r\n            (x_pos + button_width // 2), (y_pos + button_height // 2),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        return button_click_area, canvas, image_id\r\n\r\n    def show_pay_fine_button(self, canvas):\r\n        pay_fine_click_area, canvas, pay_fine_image_id = self.create_button(canvas, self.pay_fine_x_pos, self.pay_fine_y_pos, self.pay_fine_image)\r\n        # TODO BIND FUNCTION canvas.tag_bind(pay_fine_click_area, \"<Button-1>\", lambda e: )\r\n        return pay_fine_click_area, canvas, pay_fine_image_id\r\n\r\n    def show_yes_button(self, canvas):\r\n        yes_click_area, canvas, yes_button_image_id = self.create_button(canvas, self.yes_x_pos, self.yes_y_pos, self.yes_image)\r\n        # TODO BIND FUNCTION canvas.tag_bind(yes_click_area, \"<Button-1>\", lambda e: )\r\n        return yes_click_area,canvas,yes_button_image_id\r\n\r\n    def show_no_button(self, canvas):\r\n        no_click_area, canvas, no_button_image_id = self.create_button(canvas, self.no_x_pos, self.no_y_pos, self.no_image)\r\n        # TODO BIND FUNCTION canvas.tag_bind(no_click_area, \"<Button-1>\", lambda e: )\r\n        return no_click_area,canvas, no_button_image_id\r\n\r\n    def destroy_old_info(self, canvas):\r\n        # destroys old tile_info widgets\r\n        for i in [1, 2, 4, 6, 7, 9, 11, 13, 14, 16, 17, 19]:\r\n            for j in range(5, 9):\r\n                canvas.delete(self.tile_info[i][j])\r\n\r\n        # destroys player_info widgets\r\n        for i in range(0, len(self.player_info_ID)):\r\n            canvas.delete(self.player_info_ID[i])\r\n\r\n    def update_display_info(self, canvas):\r\n        self.destroy_old_info(canvas)\r\n        self.display_player_info(canvas)\r\n        self.display_tile_info(canvas)\r\n\r\n    def create_player_highlighter(self, canvas):\r\n        image_id = canvas.create_image(self.right_x_border - 40, self.starting_y_pos, anchor=\"center\",\r\n                                       image=self.player_highlight_image)\r\n        return canvas, image_id\r\n\r\n    def display_winners_on_canvas(self, canvas, winners_list):\r\n        winner_message = winners_list[0]\r\n        list_size = len(winners_list)\r\n        if list_size > 1:\r\n            for i in range(1, list_size):\r\n                winner_message = f\"{winner_message}\\n{winners_list[i]}\"\r\n        winner_message = f\"{winner_message}\\n WON THE GAME\"\r\n        canvas.create_text(self.roll_dice_x_pos, self.half_screen_y + 50 , anchor=\"center\", text=winner_message,\r\n                           font= (\"Comic Sans MS\", 20, \"bold\"), fill=\"#000000\", justify=\"center\")\r\n\r\n    def highlight_current_player(self, canvas, curr_player):\r\n        y_pos = self.starting_y_pos + (curr_player * self.global_increment)\r\n        canvas.coords(self.player_highlighter_ID, self.right_x_border - 40 , y_pos)\r\n\r\n    def show_not_enough_money(self, canvas):\r\n        canvas.create_text(self.yes_x_pos, self.yes_y_pos, anchor=\"center\", text=\"NOT ENOUGH\\nMONEY\",\r\n                           font= (\"Comic Sans MS\", 20, \"bold\"), fill=\"#000000\", justify=\"center\")\r\n\r\n    def player_move_horizontal(self, canvas, player, direction):\r\n        totalMovement = 135\r\n        placeholder_id = self.player_image_id[player]\r\n        placeholder_coords = canvas.coords(placeholder_id)\r\n        increment = self.move_speed\r\n        if direction == \"left\":\r\n            while increment <= totalMovement:\r\n                canvas.coords(placeholder_id, placeholder_coords[0] + increment, placeholder_coords[1])\r\n                increment += self.move_speed\r\n                time.sleep(38)\r\n        else:\r\n            while increment <= totalMovement:\r\n                canvas.coords(placeholder_id, placeholder_coords[0] - increment, placeholder_coords[1])\r\n                increment += self.move_speed\r\n                time.sleep(38)\r\n\r\n    def player_move_vertical(self, canvas, player, placeholder_id, placeholder_coords, direction):\r\n        totalMovement = 135\r\n        increment = self.move_speed\r\n        if direction == \"up\":\r\n            while increment <= totalMovement:\r\n                canvas.coords(placeholder_id, placeholder_coords[0], placeholder_coords[1] - increment)\r\n                increment += self.move_speed\r\n                time.sleep(38)\r\n        else:\r\n            while increment <= totalMovement:\r\n                canvas.coords(placeholder_id, placeholder_coords[0], placeholder_coords[1] + increment)\r\n                increment += self.move_speed\r\n                time.sleep(38)\r\n\r\n    # TODO player movement 2\r\n    def player_movement(self, canvas, player, starting_pos, final_pos):\r\n        placeholder_id = self.player_image_id[player]\r\n        placeholder_coords = canvas.coords(placeholder_id)\r\n        pass\r\n\r\n\r\n    def display_player_info(self, canvas):\r\n        starting_pos = self.starting_y_pos\r\n        total_players = len(self.player_info)\r\n        increment = (self.bottom_y_border - starting_pos) / total_players\r\n        self.global_increment = increment\r\n        name_size = 22\r\n        info_size = 20\r\n        for i in range(0, total_players):\r\n            player_name = self.player_info[i][0]\r\n            player_balance = self.player_info[i][1]\r\n            player_balance_text = f\"Balance: {player_balance} HKD\"\r\n            player_position = self.player_info[i][2]\r\n            player_position_text = f\" is in {player_position}\"\r\n            player_jail_status = self.player_info[i][3]\r\n            player_jail_turns = self.player_info[i][4]\r\n            player_total_properties = f\"Properties: {self.player_info[i][5]}\"\r\n\r\n            # filters appropriate message based on balance and jail status\r\n            if player_balance >= 0:\r\n                if player_position == \"Jail\":\r\n                    if not player_jail_status:\r\n                        player_position_text = f\"{player_position_text}, just visiting\"\r\n                    else:\r\n                        player_position_text = f\"{player_position_text}, {player_jail_turns} remaining\"\r\n            else:\r\n                player_position_text = \"HAS LOST\"\r\n\r\n            name_id = canvas.create_text(self.right_x_border, starting_pos, text= player_name, anchor=\"w\",\r\n                                         font=(\"Comic Sans MS\", name_size, \"bold\"), fill=\"#000000\")\r\n\r\n            # calculates dimensions of name box\r\n            name_box = canvas.bbox(name_id)\r\n            name_width = name_box[2] - name_box[0] + 5\r\n\r\n            pos_id = canvas.create_text(self.right_x_border + name_width, starting_pos, text= player_position_text, anchor=\"w\",\r\n                                        font=(\"Comic Sans MS\", info_size), fill=\"#000000\")\r\n            balance_id = canvas.create_text(self.right_x_border, starting_pos + 40, text= player_balance_text, anchor=\"w\",\r\n                                            font=(\"Comic Sans MS\", info_size), fill=\"#000000\")\r\n            tot_prop_id = canvas.create_text(self.left_x_border, starting_pos + 40, text= player_total_properties, anchor=\"e\",\r\n                                             font=(\"Comic Sans MS\", info_size), fill=\"#000000\")\r\n            starting_pos += increment\r\n            self.player_info_ID.append(name_id)\r\n            self.player_info_ID.append(pos_id)\r\n            self.player_info_ID.append(balance_id)\r\n            self.player_info_ID.append(tot_prop_id)\r\n\r\n    #----------Handles hiding the button IMAGE in the canvas----------#\r\n    def hide_yes_image(self,canvas):\r\n        canvas.coords(self.yes_image_id,-100,-100)\r\n\r\n    def hide_no_image(self,canvas):\r\n        canvas.coords(self.no_image_id,-100,-100)\r\n\r\n    def hide_roll_image(self,canvas):\r\n        canvas.coords(self.roll_dice_image_id,-100,-100)\r\n\r\n    def hide_pay_fine_image(self,canvas):\r\n        canvas.coords(self.pay_fine_image_id,-100,-100)\r\n\r\n    #------------------------------------------------------------------#\r\n\r\n\r\n    #----------Handles showing the button image in the canvas----------#\r\n    def show_yes_image(self,canvas):\r\n        canvas.coords(self.yes_image_id,self.yes_x_pos, self.yes_y_pos)\r\n\r\n    def show_no_image(self,canvas):\r\n        canvas.coords(self.no_image_id,self.no_x_pos, self.no_y_pos)\r\n\r\n    def show_roll_image(self,canvas):\r\n        canvas.coords(self.roll_dice_image_id, self.roll_dice_x_pos, self.roll_dice_y_pos)\r\n\r\n    def show_pay_fine_image(self,canvas):\r\n        canvas.coords(self.pay_fine_image_id, self.pay_fine_x_pos, self.pay_fine_y_pos)\r\n\r\n    # ------------------------------------------------------------------#\r\n\r\n    # from the gameboard information loads the appropriate colors in the game frame\r\n    def load_tile_colors(self):\r\n        for i in range(0,20):\r\n            color = self.tile_colors[i][0]\r\n            if color:\r\n                self.modify_tile_color(color, i)\r\n\r\n    # gets the information from the lists above and display all the tiles colors\r\n    def display_tile_colors(self, canvas):\r\n        self.load_tile_colors()\r\n        for i in range(0, 20):\r\n            color_coord = self.__tile_color_coord[i]\r\n            if color_coord: # if None (meaning at that position there is a tile that has no color) doesn't execute\r\n                x_pos = color_coord[0]\r\n                y_pos = color_coord[1]\r\n                tile_color = self.tile_colors[i][1]\r\n                canvas.create_image(x_pos, y_pos, anchor=\"nw\", image=tile_color)\r\n\r\n    # from the info in the gameboard, displays it on the gameboard\r\n    def display_tile_info(self, canvas):\r\n        for i in range(0, len(self.__tile_info_coord)):\r\n            # gets all information necessary to display\r\n            tile_type = self.tile_info[i][0]\r\n            tile_name = self.tile_info[i][1]\r\n            tile_price = str(self.tile_info[i][2])\r\n            tile_rent = f\"{self.tile_info[i][3]} HDK\"\r\n            tile_owner = self.tile_info[i][4]\r\n            name_x_pos = self.__tile_info_coord[i][0]\r\n            name_y_pos = self.__tile_info_coord[i][1]\r\n            price_x_pos = self.__tile_info_coord[i][2]\r\n            price_y_pos = self.__tile_info_coord[i][3]\r\n            rent_x_pos = self.__tile_info_coord[i][4]\r\n            rent_y_pos = self.__tile_info_coord[i][5]\r\n            owner_x_pos = self.__tile_info_coord[i][6]\r\n            owner_y_pos = self.__tile_info_coord[i][7]\r\n\r\n            # gets owner name only when there is a player object\r\n            if tile_owner:\r\n                tile_owner = tile_owner.get_name()\r\n\r\n            # calculates text sizes\r\n            text_name_size, text_price_size, text_rent_size, text_owner_size = self.set_appropriate_text_dimension(\r\n                tile_name, tile_rent, tile_price, tile_owner)\r\n\r\n            # calculates text rotation\r\n            text_rotate = self.rotate_text(i)\r\n\r\n            # displays text based on tile type\r\n            if tile_type == \"property\":\r\n                self.tile_info[i][5] = canvas.create_text(name_x_pos, name_y_pos, text=tile_name,\r\n                                                          font=(\"Comic Sans MS\", text_name_size, \"bold\"),\r\n                                                          fill=\"#000000\", angle=text_rotate)\r\n                tile_price = f\"{tile_price} HKD\"\r\n                self.tile_info[i][6] = canvas.create_text(price_x_pos, price_y_pos, text=tile_price,\r\n                                                          font=(\"Comic Sans MS\", text_price_size), fill=\"#000000\",\r\n                                                          angle=text_rotate)\r\n                self.tile_info[i][7] = canvas.create_text(rent_x_pos, rent_y_pos, text=tile_rent,\r\n                                                          font=(\"Comic Sans MS\", text_rent_size), fill=\"#000000\",\r\n                                                          angle=text_rotate)\r\n                self.tile_info[i][8] = canvas.create_text(owner_x_pos, owner_y_pos, text=tile_owner,\r\n                                                          font=(\"Comic Sans MS\", text_owner_size), fill=\"#000000\",\r\n                                                          angle=text_rotate)\r\n\r\n            elif tile_type == \"go\":\r\n                tile_price = f\"Collect\\n{tile_price} HKD\"\r\n                self.tile_info[i][6] = canvas.create_text(price_x_pos, price_y_pos, text=tile_price,\r\n                                                          font=(\"Comic Sans MS\", 18, \"bold\"), fill=\"#000000\",\r\n                                                          justify=\"center\")\r\n\r\n            elif tile_type == \"free_parking\":\r\n                tile_name = tile_name.replace(\" \", \"\\n\")\r\n                self.tile_info[i][6] = canvas.create_text(name_x_pos, name_y_pos, text=tile_name,\r\n                                                          font=(\"Comic Sans MS\", 20, \"bold\"), fill=\"#000000\",\r\n                                                          justify=\"center\")\r\n\r\n            elif tile_type == \"chance\":\r\n                self.tile_info[i][6] = canvas.create_text(name_x_pos, name_y_pos, text=tile_name,\r\n                                                          font=(\"Comic Sans MS\", 20, \"bold\"), fill=\"#000000\")\r\n\r\n            elif tile_type == \"income_tax\":\r\n                tile_name = tile_name.replace(\" \", \"\\n\")\r\n                self.tile_info[i][6] = canvas.create_text(name_x_pos, name_y_pos, text=tile_name,\r\n                                                          font=(\"Comic Sans MS\", 20, \"bold\"), fill=\"#000000\",\r\n                                                          justify=\"center\")\r\n                tile_price = f\"{tile_price} %\"\r\n                self.tile_info[i][7] = canvas.create_text(price_x_pos, price_y_pos, text=tile_price,\r\n                                                          font=(\"Comic Sans MS\", 16), fill=\"#000000\")\r\n\r\n    # called to set up the entire gameplay_frame\r\n    def setup_new_gameplay_frame(self, frame):\r\n        canvas = self.clear_widgets_create_canvas_set_background(frame, self.new_gameplay_frame_background)\r\n\r\n        # TILE COLORS\r\n        self.display_tile_colors(canvas)\r\n\r\n        # TILE INFORMATION\r\n        self.display_tile_info(canvas)\r\n\r\n        # PLAYER INFORMATION\r\n        self.display_player_info(canvas)\r\n\r\n        # PLAYER HIGHLIGHTER\r\n        canvas, self.player_highlighter_ID = self.create_player_highlighter(canvas)\r\n\r\n        # ROLL DICE BUTTON\r\n        roll_dice_click_area, canvas, self.roll_dice_image_id = self.create_button(canvas, self.roll_dice_x_pos, self.roll_dice_y_pos, self.roll_dice_image)\r\n        #canvas.tag_bind(roll_dice_click_area, \"<Button-1>\", lambda e: self.roll_dice())\r\n\r\n        # SAVE QUIT BUTTON\r\n        save_quit_click_area, canvas, self.save_quit_image_id = self.create_button(canvas, self.save_quit_x_pos, self.save_quit_y_pos, self.save_quit_image)\r\n        canvas.tag_bind(save_quit_click_area, \"<Button-1>\", lambda e:self.save_quit())\r\n\r\n\r\n        # OTHER BUTTONS JUST FOR TESTING POS WONT BE SHOWN ALL THE TIME\r\n        pay_fine_click_area,canvas, self.pay_fine_image_id = self.show_pay_fine_button(canvas)\r\n\r\n        #return the id so that image can be hidden and shown\r\n        yes_click_area,canvas, self.yes_image_id = self.show_yes_button(canvas)\r\n        no_click_area, canvas, self.no_image_id = self.show_no_button(canvas)\r\n\r\n        click_area = [roll_dice_click_area, yes_click_area, no_click_area, pay_fine_click_area] #TODO place other click area for other buttons\r\n        return canvas, click_area\r\n\r\n    #------------------------#\r\n    # EDITING MODE FUNCTIONS #\r\n    #------------------------#\r\n\r\n    # modifies the color of the tile in the board editor\r\n    def modify_tile_color(self, color, tile_position):\r\n        # gets the right color path based on the tile position (vertical or horizontal)\r\n        if 0 < tile_position < 5 or 10 < tile_position < 15: #tile is horizontal\r\n            color_path = f\"gameplay_frame/{color}_h.png\"\r\n        else:\r\n            color_path = f\"gameplay_frame/{color}_v.png\"\r\n\r\n        #gets the appropriate image path\r\n        image_color_path = os.path.join(assets_base_path, color_path)\r\n\r\n        #modifies the list at the appropriate position with the new tile color reference\r\n        self.tile_colors[tile_position][1] = tk.PhotoImage(file=image_color_path)\r\n\r\n\r\nclass NewGameFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n\r\n        # New game frame images\r\n        self.new_game_frame_background = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"new_game_frame/new_game_frame_background.png\"))\r\n        self.player_box_images = [\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player1_box.png\")),\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player2_box.png\")),\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player3_box.png\")),\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player4_box.png\")),\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player5_box.png\")),\r\n            tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/player6_box.png\"))\r\n        ]\r\n        self.player_insert_demo_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"new_game_frame/player_insert_demo.png\"))\r\n        self.edit_board_button_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"new_game_frame/edit_board_button.png\"))\r\n        self.start_game_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/play_button.png\"))\r\n        self.random_name_button_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"new_game_frame/random_name_dice_button.png\"))\r\n        self.exit_new_game_hint_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"new_game_frame/exit_new_game_hint.png\"))\r\n        self.yes_button_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/yes_button.png\"))\r\n        self.no_button_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/no_button.png\"))\r\n        self.trash_button_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"new_game_frame/trash_button.png\"))\r\n\r\n    # ------------------------------------# New Game Frame #------------------------------------#\r\n\r\n    def setup_new_game_page(self, frame, input_handler):\r\n        # Clear previously active widgets (including dice buttons)\r\n        self.clear_active_widgets()\r\n\r\n        # Create canvas and set background image\r\n        canvas = self.clear_widgets_create_canvas_set_background(frame, self.new_game_frame_background)\r\n\r\n        # Display the back button to return to the main menu\r\n        back_button = canvas.create_image(50, 50, image=self.back_arrow_image)\r\n        canvas.tag_bind(back_button, \"<Button-1>\", lambda e: self.confirm_exit_new_game(canvas))\r\n\r\n        # Store references to player input entries and images\r\n        self.player_entries = [None] * 6  # To hold the entry widgets\r\n        self.player_box_images_refs = []  # To hold image references for updating\r\n\r\n        # Display six player insert boxes on the left side\r\n        x_position = 300  # X position for the player boxes\r\n        y_position = 260  # Starting Y position for player boxes\r\n\r\n        for i, player_box_image in enumerate(self.player_box_images):\r\n            # Display each player box image\r\n            player_box = canvas.create_image(x_position, y_position, anchor=\"nw\", image=player_box_image)\r\n            self.player_box_images_refs.append(player_box)\r\n\r\n            # Dice button for random name generation\r\n            dice_button = tk.Button(\r\n                canvas, image=self.random_name_button_image, bd=0, highlightthickness=0,\r\n                highlightbackground=\"#FBF8F5\", bg=\"#FBF8F5\", activebackground=\"#FBF8F5\",\r\n                command=lambda idx=i: self.generate_random_name(canvas, idx)\r\n            )\r\n            dice_button.place(x=x_position - 100, y=y_position + 9)\r\n            self.active_widgets.append(dice_button)  # Track dice button for removal\r\n\r\n            # Trash button for clearing names\r\n            trash_button = tk.Button(\r\n                canvas, image=self.trash_button_image, bd=0, highlightthickness=0,\r\n                highlightbackground=\"#FBF8F5\", bg=\"#FBF8F5\", activebackground=\"#FBF8F5\",\r\n                command=lambda idx=i: self.delete_name(canvas, idx)\r\n            )\r\n            trash_button.place(x=x_position - 55, y=y_position + 9)\r\n            self.active_widgets.append(trash_button)  # Track trash button for removal\r\n\r\n            # Set up clickable area for player box\r\n            clickable_area = canvas.create_rectangle(\r\n                x_position, y_position, x_position + 1.2 * player_box_image.width(),\r\n                                        y_position + 1.2 * player_box_image.height(),\r\n                outline=\"\", fill=\"\"\r\n            )\r\n            canvas.tag_bind(clickable_area, \"<Button-1>\",\r\n                            lambda e, idx=i, x=x_position, y=y_position: self.show_insert_entry(canvas, idx, x, y))\r\n\r\n            y_position += 100  # Adjust y-position for the next player box\r\n\r\n        # Display Edit Board and Play buttons on the right side\r\n        edit_board_button = canvas.create_image(self.gui.image_width - 450, 430, image=self.edit_board_button_image)\r\n        play_button = canvas.create_image(self.gui.image_width - 450, 650, image=self.start_game_image)\r\n\r\n        # Create clickable rectangles for Edit Board and Play buttons\r\n        edit_board_clickable_area = canvas.create_rectangle(\r\n            self.gui.image_width - 450 - (self.edit_board_button_image.width() * 0.6),\r\n            430 - (self.edit_board_button_image.height() * 0.6),\r\n            self.gui.image_width - 450 + (self.edit_board_button_image.width() * 0.6),\r\n            430 + (self.edit_board_button_image.height() * 0.6),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        play_button_clickable_area = canvas.create_rectangle(\r\n            self.gui.image_width - 450 - (self.start_game_image.width() * 0.6),\r\n            650 - (self.start_game_image.height() * 0.6),\r\n            self.gui.image_width - 450 + (self.start_game_image.width() * 0.6),\r\n            650 + (self.start_game_image.height() * 0.6),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n\r\n        # Bind actions for Edit Board and Play clickable areas\r\n        canvas.tag_bind(edit_board_clickable_area, \"<Button-1>\",\r\n                        lambda e: print(\"Edit board clicked\"))  # Placeholder action\r\n        #canvas.tag_bind(play_button_clickable_area, \"<Button-1>\", lambda e: self.check_and_start_game(input_handler))\r\n\r\n        return canvas, play_button_clickable_area\r\n\r\n    def clear_active_widgets(self):\r\n        for widget in self.active_widgets:\r\n            widget.place_forget()\r\n        self.active_widgets.clear()  # Reset active widgets list\r\n\r\n    def delete_name(self, canvas, idx):\r\n        # Clear the player's name from the entry\r\n        self.gui.input_handler.players_names[idx] = None\r\n\r\n        # Reset the box appearance to its original state\r\n        canvas.itemconfig(self.player_box_images_refs[idx], image=self.player_box_images[idx])\r\n        if self.player_text_refs[idx]:  # If there was a previous name shown, remove it\r\n            canvas.delete(self.player_text_refs[idx])\r\n            self.player_text_refs[idx] = None\r\n        if self.player_entries[idx]:  # If an entry widget is open, destroy it\r\n            self.player_entries[idx].destroy()\r\n            self.player_entries[idx] = None\r\n        self.clicked_boxes[idx] = False  # Reset the clicked state\r\n\r\n    def generate_random_name(self, canvas, idx):\r\n        # Ensure that all previous player names (up to idx-1) have been entered\r\n        if any(not self.gui.input_handler.players_names[i] for i in range(idx)):\r\n            self.show_msg(canvas, idx, \"* All previous player names must be entered first.\", is_error=True)\r\n            return\r\n\r\n        # Generate a random name\r\n        player_name = self.gui.input_handler.generate_name()\r\n\r\n        # Check if the name can be stored according to validation rules\r\n        if self.gui.input_handler.validate_and_store_name(idx, player_name):\r\n            # Save the generated name immediately\r\n            self.gui.input_handler.players_names[idx] = player_name\r\n\r\n            # Always show the generated name in the player box\r\n            self.show_insert_entry(canvas, idx, name=player_name)\r\n\r\n            # Show a hint message to prompt the user to press Enter if they want to save manually\r\n            self.show_msg(canvas, idx, \"* You can modify the name and press <Return> to save.\", is_error=False)\r\n        else:\r\n            # Show error if the name is invalid or duplicate\r\n            self.show_msg(canvas, idx, \"* Generated name is invalid or duplicate.\", is_error=True)\r\n\r\n    def show_insert_entry(self, canvas, idx, x_position=None, y_position=None, name=None):\r\n        if name:\r\n            # If a generated name is provided, show and save it immediately\r\n            player_name = name\r\n            self.gui.input_handler.players_names[idx] = player_name\r\n\r\n            # Remove any existing entry widget to update the display with the new name\r\n            if self.player_entries[idx]:\r\n                self.player_entries[idx].destroy()\r\n                self.player_entries[idx] = None  # Clear the reference\r\n\r\n            canvas.itemconfig(self.player_box_images_refs[idx], image=self.player_insert_demo_image)\r\n            if self.player_text_refs[idx]:\r\n                canvas.delete(self.player_text_refs[idx])\r\n            self.player_text_refs[idx] = canvas.create_text(\r\n                400, 290 + idx * 100, text=player_name, font=(\"Comic Sans MS\", 20), fill=\"#000000\"\r\n            )\r\n        else:\r\n            # Code for opening an entry widget for manual input\r\n            if self.player_entries[idx]:\r\n                self.player_entries[idx].destroy()\r\n\r\n            if not self.clicked_boxes[idx]:\r\n                canvas.itemconfig(self.player_box_images_refs[idx], image=self.player_insert_demo_image)\r\n                self.clicked_boxes[idx] = True\r\n\r\n            previous_name = str(self.gui.input_handler.players_names[idx]) if idx < len(\r\n                self.gui.input_handler.players_names) else \"\"\r\n\r\n            entry = tk.Entry(canvas, font=(\"Comic Sans MS\", 20), width=20, bd=0, bg=\"#E5E8E8\", fg=\"#000000\",\r\n                             highlightthickness=0, justify=\"left\")\r\n\r\n            if previous_name:\r\n                entry.insert(0, previous_name)\r\n            entry.place(x=x_position + 22, y=y_position + 16)\r\n            entry.focus_set()\r\n\r\n            def on_submit(event):\r\n                new_name = entry.get().strip()\r\n                # If the user press <Return> with nothing, should back to the original state without saving\r\n                if new_name:\r\n                    self.save_player_name(entry, idx, canvas)\r\n                else:\r\n                    self.delete_name(canvas, idx)  # Reset to original image if entry is empty\r\n\r\n            entry.bind(\"<Return>\", on_submit)\r\n            entry.bind(\"<FocusOut>\",\r\n                       lambda e: on_submit(e) if entry.get().strip() else self.clear_entry(entry, idx, canvas))\r\n            self.player_entries[idx] = entry\r\n\r\n            if self.error_labels[idx]:\r\n                self.error_labels[idx].destroy()\r\n\r\n    def clear_entry(self, entry, idx, canvas):\r\n        # Reset the player box to its original image without displaying any text\r\n        entry.destroy()\r\n        self.player_entries[idx] = None\r\n        canvas.itemconfig(self.player_box_images_refs[idx], image=self.player_box_images[idx])\r\n\r\n    def save_player_name(self, entry, idx, canvas):\r\n        player_name = entry.get().strip()\r\n\r\n        # Check if the name hasn't changed from the current one\r\n        if self.gui.input_handler.players_names[idx] == player_name:\r\n            self.show_msg(canvas, idx, \"* Name did not change.\", is_error=False)\r\n            return\r\n\r\n        # Check if the name is the same as another player\r\n        if player_name in self.gui.input_handler.get_all_player_names():\r\n            self.show_msg(canvas, idx, \"* Name cannot be the same as another player.\", is_error=True)\r\n            return\r\n\r\n        # Check if the previous player name has been entered (except for the first player)\r\n        if idx > 0 and not self.gui.input_handler.players_names[idx - 1]:\r\n            self.show_msg(canvas, idx, \"* Previous player name must be entered first.\", is_error=True)\r\n            return\r\n\r\n        # Check if the name is valid, if so, store it\r\n        if len(player_name) <= 20 and self.gui.input_handler.validate_and_store_name(idx, player_name):\r\n            # Clear any previous error messages\r\n            if self.error_labels[idx]:\r\n                self.error_labels[idx].destroy()\r\n                self.error_labels[idx] = None\r\n\r\n            # Remove any displayed name text reference and update with the new name\r\n            if self.player_text_refs[idx]:\r\n                canvas.delete(self.player_text_refs[idx])\r\n                self.player_text_refs[idx] = None\r\n\r\n            entry.delete(0, tk.END)  # Clear the entry to remove any leftover invalid text\r\n            entry.insert(0, player_name)  # Ensure the valid name is displayed\r\n            entry.destroy()\r\n\r\n            x_text_position = 330\r\n            y_text_position = 290 + idx * 100\r\n            self.player_text_refs[idx] = canvas.create_text(\r\n                x_text_position, y_text_position, text=player_name, font=(\"Comic Sans MS\", 20), fill=\"#000000\",\r\n                anchor=\"w\"\r\n            )\r\n        else:\r\n            self.show_msg(canvas, idx, \"* Name must be 1-20 characters.\", is_error=True)\r\n            entry.delete(0, tk.END)\r\n\r\n    def show_msg(self, frame, idx, msg, is_error=False, x_position=None, y_position=None):\r\n        if x_position is None:\r\n            x_position = 325\r\n        if y_position is None:\r\n            y_position = 322 + idx * 100\r\n\r\n        if self.error_labels[idx]:\r\n            self.error_labels[idx].destroy()\r\n\r\n        color = \"red\" if is_error else \"green\"\r\n        self.error_labels[idx] = tk.Label(\r\n            frame,\r\n            text=msg,\r\n            font=(\"Comic Sans MS\", 16),\r\n            fg=color,\r\n            bg=\"#FBF8F5\"\r\n        )\r\n        self.error_labels[idx].place(x=x_position, y=y_position)\r\n        self.active_widgets.append(self.error_labels[idx])  # Track the label for later removal\r\n\r\n    def check_and_start_game(self, input_handler):\r\n        # Retrieve all player names\r\n        player_names = input_handler.get_all_player_names()\r\n\r\n        # Check for at least two valid player names\r\n        if len([name for name in player_names if name]) < 2:\r\n            # Show error message below play button if fewer than 2 players\r\n            self.show_msg(self.gui.frames[\"new_game\"], 0, \"* At least two players are required to start the game.\",\r\n                          is_error=True, x_position=self.gui.image_width - 550, y_position=722)\r\n            return False\r\n        # If all checks pass, transition to the GameBoard frame\r\n        print(\"Starting game with players:\")\r\n        for idx, name in enumerate(player_names, start=1):\r\n            if name:\r\n                print(f\"Player {idx}: {name}\")\r\n        return True\r\n\r\n    def confirm_exit_new_game(self, canvas):\r\n        # Clear any previously saved positions\r\n        self.hidden_widgets.clear()\r\n\r\n        # Hide all tracked widgets by storing their positions and calling `place_forget`\r\n        for widget in self.active_widgets:\r\n            try:\r\n                if widget.winfo_ismapped():  # Check if the widget is currently visible\r\n                    self.hidden_widgets[widget] = widget.place_info()  # Save widget's position info\r\n                    widget.place_forget()  # Hide the widget\r\n            except tk.TclError:\r\n                continue\r\n\r\n        # Now display exit confirmation\r\n        exit_hint = canvas.create_image(self.gui.image_width // 2 + 297, self.gui.image_height // 2 + 50,\r\n                                        image=self.exit_new_game_hint_image)\r\n        # Create Yes and No buttons in the popup\r\n        yes_button = canvas.create_image(self.gui.image_width // 2 + 150, self.gui.image_height // 2 + 200,\r\n                                         image=self.yes_button_image)\r\n        no_button = canvas.create_image(self.gui.image_width // 2 + 440, self.gui.image_height // 2 + 200,\r\n                                        image=self.no_button_image)\r\n\r\n        # Bind actions for Yes and No buttons\r\n        canvas.tag_bind(yes_button, \"<Button-1>\",\r\n                        lambda e: self.exit_to_main_menu(canvas, exit_hint, yes_button, no_button))\r\n        canvas.tag_bind(no_button, \"<Button-1>\",\r\n                        lambda e: self.cancel_exit_and_restore_widgets(canvas, exit_hint, yes_button, no_button))\r\n\r\n    def exit_to_main_menu(self, canvas, exit_hint, yes_button, no_button):\r\n        # Clear player data, remove the exit hint, and go back to main menu\r\n        self.clear_all_player_data(canvas)\r\n        self.cancel_exit_and_restore_widgets(canvas, exit_hint, yes_button, no_button)\r\n        self.gui.show_frame(\"main_menu\")\r\n\r\n        # Also clear all the hint messages shown in the new game frame before\r\n        for idx in range(6):\r\n            if self.error_labels[idx]:\r\n                self.error_labels[idx].destroy()\r\n\r\n    def cancel_exit_and_restore_widgets(self, canvas, exit_hint, yes_button, no_button):\r\n        # Clear the exit hint and buttons\r\n        canvas.delete(exit_hint)\r\n        canvas.delete(yes_button)\r\n        canvas.delete(no_button)\r\n\r\n        # Restore all widgets to their original positions\r\n        for widget, position_info in self.hidden_widgets.items():\r\n            widget.place(**position_info)  # Re-position each widget\r\n        self.hidden_widgets.clear()  # Clear the dictionary after restoring\r\n\r\n    def clear_all_player_data(self, canvas):\r\n        # Clear all entries for player data\r\n        for idx in range(6):\r\n            self.delete_name(canvas, idx)\r\n\r\n\r\nclass MainMenuFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n        # Main frame images\r\n        # Main Menu images\r\n        self.startup_background = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"main_menu_frame/startup_frame_background.png\"))\r\n        self.new_game_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"main_menu_frame/new_game_button.png\"))\r\n        self.load_game_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"main_menu_frame/load_game_button.png\"))\r\n        self.exit_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"main_menu_frame/exit_button.png\"))\r\n        self.info_image = tk.PhotoImage(file=os.path.join(assets_base_path, \"main_menu_frame/info_button.png\"))\r\n\r\n    #------------------------------------# Main Menu Frame #------------------------------------#\r\n\r\n    def setup_main_menu_frame(self, frame):\r\n        canvas = self.clear_widgets_create_canvas_set_background(frame, self.startup_background)\r\n\r\n        # Button positions\r\n        button_y_positions = [self.gui.image_height * 0.55, self.gui.image_height * 0.70, self.gui.image_height * 0.85]\r\n\r\n        # Calculate dimensions for each button to set clickable areas\r\n        new_game_width, new_game_height = self.calc_button_dim(self.new_game_image)\r\n        load_game_width, load_game_height = self.calc_button_dim(self.load_game_image)\r\n        exit_width, exit_height = self.calc_button_dim(self.exit_image)\r\n        info_width, info_height = self.calc_button_dim(self.info_image)\r\n\r\n        # \"New Game\" button and clickable area\r\n        new_game_button = canvas.create_image(self.gui.image_width // 2, button_y_positions[0],\r\n                                              image=self.new_game_image)\r\n        new_game_clickable_area = canvas.create_rectangle(\r\n            (self.gui.image_width // 2) - (0.6 * new_game_width), button_y_positions[0] - (0.6 * new_game_height),\r\n            (self.gui.image_width // 2) + (0.6 * new_game_width), button_y_positions[0] + (0.6 * new_game_height),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        canvas.tag_bind(new_game_clickable_area, \"<Button-1>\", lambda e: self.gui.show_frame(\"new_game\"))\r\n\r\n        # \"Load Game\" button and clickable area\r\n        load_game_button = canvas.create_image(self.gui.image_width // 2, button_y_positions[1],\r\n                                               image=self.load_game_image)\r\n        load_game_clickable_area = canvas.create_rectangle(\r\n            (self.gui.image_width // 2) - (0.6 * load_game_width), button_y_positions[1] - (0.6 * load_game_height),\r\n            (self.gui.image_width // 2) + (0.6 * load_game_width), button_y_positions[1] + (0.6 * load_game_height),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        canvas.tag_bind(load_game_clickable_area, \"<Button-1>\", lambda e: self.gui.show_frame(\"load_game\"))\r\n\r\n        # \"Exit\" button and clickable area\r\n        exit_button = canvas.create_image(self.gui.image_width // 2, button_y_positions[2], image=self.exit_image)\r\n        exit_clickable_area = canvas.create_rectangle(\r\n            (self.gui.image_width // 2) - (0.6 * exit_width), button_y_positions[2] - (0.6 * exit_height),\r\n            (self.gui.image_width // 2) + (0.6 * exit_width), button_y_positions[2] + (0.6 * exit_height),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        canvas.tag_bind(exit_clickable_area, \"<Button-1>\", lambda e: self.gui.quit())\r\n\r\n        # \"Info\" button in the corner and clickable area\r\n        info_button = canvas.create_image(self.gui.image_width - 85, 75, image=self.info_image)\r\n        info_clickable_area = canvas.create_rectangle(\r\n            (self.gui.image_width - 85) - (0.6 * info_width), 75 - (0.6 * info_height),\r\n            (self.gui.image_width - 85) + (0.6 * info_width), 75 + (0.6 * info_height),\r\n            outline=\"\", fill=\"\"\r\n        )\r\n        canvas.tag_bind(info_clickable_area, \"<Button-1>\", lambda e: self.gui.show_frame(\"info\"))\r\n\r\n        return canvas\r\n\r\n\r\nclass LoadGameFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n\r\n        self.load_and_play_button_id = None\r\n        self.saved_game_slots = []\r\n        self.slot_item_ids = [] # Track item IDs for slots\r\n\r\n        # Load Game frame images\r\n        self.load_game_frame_background = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/load_game_frame_background.png\"))\r\n        self.saved_game_slot1_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/saved_game_slot1.png\"))\r\n        self.saved_game_slot2_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/saved_game_slot2.png\"))\r\n        self.saved_game_slot3_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/saved_game_slot3.png\"))\r\n        self.saved_game_slot4_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/saved_game_slot4.png\"))\r\n        self.saved_game_slot5_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/saved_game_slot5.png\"))\r\n        self.selected_saved_game_slot_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/selected_saved_game_slot.png\"))\r\n        self.load_and_play_button_image = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"load_game_frame/load_and_play_button.png\"))\r\n\r\n    # ------------------------------------# Load Game Frame #------------------------------------#\r\n\r\n    def setup_load_game_frame(self, frame):\r\n        canvas = self.clear_widgets_create_canvas_set_background(frame, self.load_game_frame_background)\r\n\r\n        # Saved game slot selection image positions\r\n        saved_game_slot_positions = [\r\n            (self.gui.image_width // 2, 370),\r\n            (self.gui.image_width // 2, 452),\r\n            (self.gui.image_width // 2, 534),\r\n            (self.gui.image_width // 2, 616),\r\n            (self.gui.image_width // 2, 698)\r\n        ]\r\n\r\n        # Saved game slot images\r\n        self.saved_game_slots = [\r\n            self.saved_game_slot1_image,\r\n            self.saved_game_slot2_image,\r\n            self.saved_game_slot3_image,\r\n            self.saved_game_slot4_image,\r\n            self.saved_game_slot5_image\r\n        ]\r\n\r\n        # Display saved game slots\r\n        for i, slot_image in enumerate(self.saved_game_slots):\r\n            slot_x, slot_y = saved_game_slot_positions[i]  # Unpack coordinates\r\n            slot_id = canvas.create_image(slot_x, slot_y, image=slot_image)\r\n            self.slot_item_ids.append(slot_id)\r\n\r\n            # Create a clickable area for each slot\r\n            clickable_area = canvas.create_rectangle(\r\n                slot_x - (0.5 * slot_image.width()), slot_y - (0.5 * slot_image.height()),\r\n                slot_x + (0.5 * slot_image.width()), slot_y + (0.5 * slot_image.height()),\r\n                outline=\"\", fill=\"\"\r\n            )\r\n\r\n            # Bind click event to select the slot\r\n            canvas.tag_bind(clickable_area, \"<Button-1>\",\r\n                            lambda e, idx=i: self.select_saved_game_slot(canvas, idx))\r\n\r\n        return canvas\r\n\r\n    def select_saved_game_slot(self, canvas, idx):\r\n        # Clear any previously selected slots by resetting all slots to their original images\r\n        for i, slot_id in enumerate(self.slot_item_ids):\r\n            canvas.itemconfig(slot_id, image=self.saved_game_slots[i])\r\n\r\n        # Update only the selected slot with the highlight image\r\n        canvas.itemconfig(self.slot_item_ids[idx], image=self.selected_saved_game_slot_image)\r\n        self.gui.selected_saved_game_slot = idx\r\n\r\n        # Display Load and Play button once a slot is selected\r\n        if not hasattr(self, 'load_and_play_button_id'):\r\n            # Reuse this Load and Play button\r\n            load_button_x, load_button_y = self.gui.image_width // 2, 835\r\n            self.load_and_play_button_id = canvas.create_image(load_button_x, load_button_y,\r\n                                                               image=self.load_and_play_button_image)\r\n            load_and_play_clickable_area = canvas.create_rectangle(\r\n                load_button_x - (0.5 * self.load_and_play_button_image.width()),\r\n                load_button_y - (0.5 * self.load_and_play_button_image.height()),\r\n                load_button_x + (0.5 * self.load_and_play_button_image.width()),\r\n                load_button_y + (0.5 * self.load_and_play_button_image.height()),\r\n                outline=\"\", fill=\"\"\r\n            )\r\n\r\n            # TODO Once the button is clicked, pass the json file name to the controller to load the game board\r\n            # canvas.tag_bind(load_and_play_clickable_area, \"<Button-1>\", lambda e: self.gui.show_frame(\"gameplay\"))\r\n\r\n        return canvas\r\n\r\n\r\nclass InfoPageFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n\r\n        # Info frame images\r\n        self.info_frame_background = tk.PhotoImage(\r\n            file=os.path.join(assets_base_path, \"info_frame/info_frame_background.png\"))\r\n\r\n    # --------------------------------------# Info Page #---------------------------------------#\r\n\r\n    def setup_info_page(self, frame):\r\n        canvas = self.clear_widgets_create_canvas_set_background(frame, self.info_frame_background)\r\n\r\n        # Back button dimensions for creating a larger clickable area\r\n        back_button_width, back_button_height = self.back_arrow_image.width(), self.back_arrow_image.height()\r\n\r\n        # Display the back button to return to the main menu\r\n        back_button = canvas.create_image(50, 50, image=self.back_arrow_image)\r\n\r\n        # Create a clickable rectangle slightly larger than the back button image\r\n        back_button_clickable_area = canvas.create_rectangle(\r\n            50 - (0.2 * back_button_width), 50 - (0.2 * back_button_height),  # Top-left corner\r\n            50 + back_button_width * 1.2, 50 + back_button_height * 1.2,  # Bottom-right corner\r\n            outline=\"\", fill=\"\"\r\n        )\r\n\r\n        # Bind the enlarged clickable area to the main menu transition\r\n        canvas.tag_bind(back_button_clickable_area, \"<Button-1>\", lambda e: self.gui.show_frame(\"main_menu\"))\r\n\r\n        return canvas\r\n\r\n\r\nclass EditBoardFrame(DisplayManager):\r\n    def __init__(self, gui):\r\n        super().__init__(gui)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/View/DisplayManager.py b/src/View/DisplayManager.py
--- a/src/View/DisplayManager.py	(revision 7ef0e685dbecbedf6673e94cf96a82493c24d727)
+++ b/src/View/DisplayManager.py	(date 1731316600613)
@@ -1,6 +1,7 @@
 import time
 import tkinter as tk
 import os
+import time
 
 # Base path for assets
 assets_base_path = os.path.join(os.path.dirname(__file__), "../../assets")
@@ -188,7 +189,8 @@
 
     #for testing
     def save_quit(self):
-        print("Saving quit...")
+        self.gui.show_frame("save_game")
+
 
     def create_button(self, canvas, x_pos, y_pos, button_image):
         button_width, button_height = self.calc_button_dim(button_image)
@@ -950,6 +952,8 @@
             file=os.path.join(assets_base_path, "load_game_frame/selected_saved_game_slot.png"))
         self.load_and_play_button_image = tk.PhotoImage(
             file=os.path.join(assets_base_path, "load_game_frame/load_and_play_button.png"))
+        self.display_text = []
+        self.save_base_path = os.path.join(os.path.dirname(__file__), "../../saves/games")
 
     # ------------------------------------# Load Game Frame #------------------------------------#
 
@@ -957,7 +961,7 @@
         canvas = self.clear_widgets_create_canvas_set_background(frame, self.load_game_frame_background)
 
         # Saved game slot selection image positions
-        saved_game_slot_positions = [
+        self.saved_game_slot_positions = [
             (self.gui.image_width // 2, 370),
             (self.gui.image_width // 2, 452),
             (self.gui.image_width // 2, 534),
@@ -976,7 +980,7 @@
 
         # Display saved game slots
         for i, slot_image in enumerate(self.saved_game_slots):
-            slot_x, slot_y = saved_game_slot_positions[i]  # Unpack coordinates
+            slot_x, slot_y = self.saved_game_slot_positions[i]  # Unpack coordinates
             slot_id = canvas.create_image(slot_x, slot_y, image=slot_image)
             self.slot_item_ids.append(slot_id)
 
@@ -991,6 +995,12 @@
             canvas.tag_bind(clickable_area, "<Button-1>",
                             lambda e, idx=i: self.select_saved_game_slot(canvas, idx))
 
+            # Display the back button to return to the main menu
+            back_button = canvas.create_image(50, 50, image=self.back_arrow_image)
+            canvas.tag_bind(back_button, "<Button-1>", lambda e: self.gui.show_frame("main_menu"))
+
+        self.show_save_file(canvas)
+
         return canvas
 
     def select_saved_game_slot(self, canvas, idx):
@@ -1003,24 +1013,180 @@
         self.gui.selected_saved_game_slot = idx
 
         # Display Load and Play button once a slot is selected
-        if not hasattr(self, 'load_and_play_button_id'):
-            # Reuse this Load and Play button
-            load_button_x, load_button_y = self.gui.image_width // 2, 835
-            self.load_and_play_button_id = canvas.create_image(load_button_x, load_button_y,
-                                                               image=self.load_and_play_button_image)
-            load_and_play_clickable_area = canvas.create_rectangle(
-                load_button_x - (0.5 * self.load_and_play_button_image.width()),
-                load_button_y - (0.5 * self.load_and_play_button_image.height()),
-                load_button_x + (0.5 * self.load_and_play_button_image.width()),
-                load_button_y + (0.5 * self.load_and_play_button_image.height()),
-                outline="", fill=""
-            )
+        load_button_x, load_button_y = self.gui.image_width // 2, 835
+        self.load_and_play_button_id = canvas.create_image(load_button_x, load_button_y,
+                                                           image=self.load_and_play_button_image)
+        load_and_play_clickable_area = canvas.create_rectangle(
+            load_button_x - (0.5 * self.load_and_play_button_image.width()),
+            load_button_y - (0.5 * self.load_and_play_button_image.height()),
+            load_button_x + (0.5 * self.load_and_play_button_image.width()),
+            load_button_y + (0.5 * self.load_and_play_button_image.height()),
+            outline="", fill=""
+        )
 
-            # TODO Once the button is clicked, pass the json file name to the controller to load the game board
-            # canvas.tag_bind(load_and_play_clickable_area, "<Button-1>", lambda e: self.gui.show_frame("gameplay"))
+        canvas.tag_bind(load_and_play_clickable_area, "<Button-1>", lambda e: self.load_data(idx))
+
+        return canvas
+
+    def load_data(self,idx):
+        from src.Controller.GameController import GameController
+        g=GameController(self.gui)
+        if idx<len(self.display_text):
+            print(self.display_text[idx][2].split('.')[0])
+            g.load_game(self.display_text[idx][2].split('.')[0])
+            g.load_gameboard(self.display_text[idx][2].split('.')[0])
+            self.gui.show_frame("gameplay")
+
+    def show_save_file(self,canvas):
+        for obj in self.display_text:
+            for i in range(2):
+                canvas.delete(obj[i])
+        self.display_text=[]
+
+        file_info = []
+        for filename in os.listdir(self.save_base_path):
+            last_modified_time = os.path.getmtime(os.path.join(self.save_base_path, filename))
+            last_modified_time_str = time.ctime(last_modified_time)
+            file_info.append((filename, last_modified_time_str))
+
+        for i in range(5):
+            if i < len(file_info):
+                text1=canvas.create_text(self.gui.image_width // 3, self.saved_game_slot_positions[i][1], text=file_info[i][0], anchor="center",
+                                   font=("Comic Sans MS", 16), fill="#000000")
+                text2=canvas.create_text(self.gui.image_width * 19 // 30, self.saved_game_slot_positions[i][1], text=file_info[i][1], anchor="center",
+                                   font=("Comic Sans MS", 16), fill="#000000")
+                self.display_text.append([text1,text2,file_info[i][0]])
+                canvas.tag_bind(text1, "<Button-1>",
+                                lambda e, idx=i: self.select_saved_game_slot(canvas, idx))
+                canvas.tag_bind(text2, "<Button-1>",
+                                lambda e, idx=i: self.select_saved_game_slot(canvas, idx))
+
+class SaveGameFrame(DisplayManager):
+    def __init__(self, gui):
+        super().__init__(gui)
+
+        self.load_and_play_button_id = None
+        self.saved_game_slots = []
+        self.slot_item_ids = [] # Track item IDs for slots
+
+        # Load Game frame images
+        self.save_game_frame_background = tk.PhotoImage(
+            file=os.path.join(assets_base_path, "save_game_frame/save_game_frame_background.png"))
+        self.saved_game_image = tk.PhotoImage(
+            file=os.path.join(assets_base_path, "save_game_frame/saved_game.png"))
+        self.selected_saved_game_image = tk.PhotoImage(
+            file=os.path.join(assets_base_path, "save_game_frame/selected_saved_game.png"))
+        self.save_button_image = tk.PhotoImage(
+            file=os.path.join(assets_base_path, "save_game_frame/save.png"))
+        self.back_arrow_image = tk.PhotoImage(file=os.path.join(assets_base_path, "info_frame/back_arrow.png"))
+        self.save_base_path = os.path.join(os.path.dirname(__file__), "../../saves/games")
+        self.display_text=[]
+
+    # ------------------------------------# Load Game Frame #------------------------------------#
+
+    def setup_save_game_frame(self, frame):
+        canvas = self.clear_widgets_create_canvas_set_background(frame, self.save_game_frame_background)
+
+        # Saved game slot selection image positions
+        self.saved_game_slot_positions = [
+            (self.gui.image_width // 2, 370),
+            (self.gui.image_width // 2, 452),
+            (self.gui.image_width // 2, 534),
+            (self.gui.image_width // 2, 616),
+            (self.gui.image_width // 2, 698)
+        ]
+
+        # Saved game slot images
+        self.saved_game_slots = [
+            self.saved_game_image,
+            self.saved_game_image,
+            self.saved_game_image,
+            self.saved_game_image,
+            self.saved_game_image
+        ]
+
+        # Display saved game slots
+        for i, slot_image in enumerate(self.saved_game_slots):
+            slot_x, slot_y = self.saved_game_slot_positions[i]  # Unpack coordinates
+            slot_id = canvas.create_image(slot_x, slot_y, image=slot_image)
+            self.slot_item_ids.append(slot_id)
+
+            # Create a clickable area for each slot
+            clickable_area = canvas.create_rectangle(
+                slot_x - (0.5 * slot_image.width()), slot_y - (0.5 * slot_image.height()),
+                slot_x + (0.5 * slot_image.width()), slot_y + (0.5 * slot_image.height()),
+                outline="", fill=""
+            )
+
+            # Bind click event to select the slot
+            canvas.tag_bind(clickable_area, "<Button-1>",
+                            lambda e, idx=i: self.select_saved_game_slot(canvas, idx))
+            # Display the back button to return to the main menu
+            back_button = canvas.create_image(50, 50, image=self.back_arrow_image)
+            canvas.tag_bind(back_button, "<Button-1>", lambda e: self.gui.show_frame("gameplay"))
+
+        self.show_save_file(canvas)
+
+        return canvas
+
+    def select_saved_game_slot(self, canvas, idx):
+        # Clear any previously selected slots by resetting all slots to their original images
+        for i, slot_id in enumerate(self.slot_item_ids):
+            canvas.itemconfig(slot_id, image=self.saved_game_slots[i])
+
+        # Update only the selected slot with the highlight image
+        canvas.itemconfig(self.slot_item_ids[idx], image=self.selected_saved_game_image)
+        self.gui.selected_saved_game_slot = idx
+
+        # Display Load and Play button once a slot is selected
+        #if not hasattr(self, 'load_and_play_button_id'):
+        # Reuse this Load and Play button
+        load_button_x, load_button_y = self.gui.image_width // 2, 835
+        self.load_and_play_button_id = canvas.create_image(load_button_x, load_button_y,
+                                                           image=self.save_button_image)
+        load_and_play_clickable_area = canvas.create_rectangle(
+            load_button_x - (0.5 * self.save_button_image.width()),
+            load_button_y - (0.5 * self.save_button_image.height()),
+            load_button_x + (0.5 * self.save_button_image.width()),
+            load_button_y + (0.5 * self.save_button_image.height()),
+            outline="", fill=""
+        )
+
+        # TODO Once the button is clicked, pass the json file name to the controller to load the game board
+        canvas.tag_bind(load_and_play_clickable_area, "<Button-1>", lambda e: self.save_data(canvas))
 
         return canvas
 
+    def save_data(self,canvas):
+        from src.Controller.GameController import GameController
+        g=GameController(self.gui)
+        g.save_game("Save"+str(len(self.display_text)//2))
+        g.save_gameboard("Save"+str(len(self.display_text)//2))
+        self.show_save_file(canvas)
+
+    def show_save_file(self,canvas):
+        for o in self.display_text:
+            canvas.delete(o)
+        self.display_text=[]
+
+        file_info = []
+        for filename in os.listdir(self.save_base_path):
+            last_modified_time = os.path.getmtime(os.path.join(self.save_base_path, filename))
+            last_modified_time_str = time.ctime(last_modified_time)
+            file_info.append((filename, last_modified_time_str))
+
+        for i in range(5):
+            if i < len(file_info):
+                text1=canvas.create_text(self.gui.image_width // 3, self.saved_game_slot_positions[i][1], text=file_info[i][0], anchor="center",
+                                   font=("Comic Sans MS", 16), fill="#000000")
+                text2=canvas.create_text(self.gui.image_width * 19 // 30, self.saved_game_slot_positions[i][1], text=file_info[i][1], anchor="center",
+                                   font=("Comic Sans MS", 16), fill="#000000")
+                self.display_text.append(text1)
+                self.display_text.append(text2)
+                canvas.tag_bind(text1, "<Button-1>",
+                                lambda e, idx=i: self.select_saved_game_slot(canvas, idx))
+                canvas.tag_bind(text2, "<Button-1>",
+                                lambda e, idx=i: self.select_saved_game_slot(canvas, idx))
 
 class InfoPageFrame(DisplayManager):
     def __init__(self, gui):
Index: src/View/GUI.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># main.py\r\nimport tkinter as tk\r\nimport os\r\nfrom src.View.DisplayManager import *\r\nfrom src.Controller.InputHandler import InputHandler\r\n\r\nclass GUI(tk.Tk):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.game_canvas = None\r\n        imgpath = os.path.join(os.path.dirname(__file__), \"../../assets/main_menu_frame/startup_frame_background.png\")\r\n        self.background_image = tk.PhotoImage(file=imgpath)\r\n        self.image_width = self.background_image.width()\r\n        self.image_height = self.background_image.height()\r\n\r\n        # Set window size and center it\r\n        self.geometry(f\"{self.image_width}x{self.image_height}+\"\r\n                      f\"{int((self.winfo_screenwidth() - self.image_width) / 2)}+\"\r\n                      f\"{int((self.winfo_screenheight() - self.image_height) / 2)}\")\r\n\r\n        self.resizable(False, False)  # Disable resizing\r\n        self.configure(bg=\"#FFFFFF\")\r\n        self.title(\"Monopoly Hong Kong Special Edition\")\r\n\r\n        # Initialize frames\r\n        self.frames = {}\r\n\r\n        # Initialize DisplayManager and InputHandler\r\n        self.display_manager = DisplayManager(self)\r\n        self.main_menu_frame = MainMenuFrame(self)\r\n        self.info_page_frame = InfoPageFrame(self)\r\n        self.new_game_frame = NewGameFrame(self)\r\n        self.load_game_frame = LoadGameFrame(self)\r\n        #TODO <Remove the controller object from the GameplayFrame>\r\n        self.gameplay_frame = GameplayFrame(self)\r\n        self.input_handler = InputHandler()\r\n\r\n        # Set up frames\r\n        self.show_main_menu()\r\n        self.show_info_frame()\r\n        self.show_new_game_frame()\r\n        self.show_edit_board_frame()\r\n        self.show_load_game_frame()\r\n\r\n        # Initially show the main menu\r\n        self.show_frame(\"main_menu\")\r\n\r\n    # Show the main menu\r\n    def show_main_menu(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"main_menu\"] = frame\r\n        self.canvas = self.main_menu_frame.setup_main_menu_frame(frame)\r\n\r\n    # Show the game information\r\n    def show_info_frame(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"info\"] = frame\r\n        self.info_canvas = self.info_page_frame.setup_info_page(frame)\r\n\r\n    # Start a new game\r\n    def show_new_game_frame(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"new_game\"] = frame\r\n        self.new_game_canvas,self.play_button_clickable_area = self.new_game_frame.setup_new_game_page(frame, self.input_handler)\r\n\r\n    # Edit the game board\r\n    def show_edit_board_frame(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"edit_board\"] = frame\r\n        pass\r\n\r\n    # Load the previous game record\r\n    def show_load_game_frame(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"load_game\"] = frame\r\n        self.load_game_frame = self.load_game_frame.setup_load_game_frame(frame)\r\n\r\n    # Enter the main game board\r\n    def show_game_play_frame(self):\r\n        frame = tk.Frame(self)\r\n        self.frames[\"gameplay\"] = frame\r\n        self.game_canvas, self.game_frame_click_areas = self.gameplay_frame.setup_new_gameplay_frame(frame) #TODO uncomment this line later\r\n\r\n    def show_frame(self, frame_name):\r\n        for frame in self.frames.values():\r\n            frame.place_forget()\r\n        self.frames[frame_name].place(x=0, y=0, width=self.image_width, height=self.image_height)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/View/GUI.py b/src/View/GUI.py
--- a/src/View/GUI.py	(revision 7ef0e685dbecbedf6673e94cf96a82493c24d727)
+++ b/src/View/GUI.py	(date 1731316600613)
@@ -31,16 +31,19 @@
         self.info_page_frame = InfoPageFrame(self)
         self.new_game_frame = NewGameFrame(self)
         self.load_game_frame = LoadGameFrame(self)
+        self.save_game_frame= SaveGameFrame(self)
         #TODO <Remove the controller object from the GameplayFrame>
         self.gameplay_frame = GameplayFrame(self)
         self.input_handler = InputHandler()
 
+
         # Set up frames
         self.show_main_menu()
         self.show_info_frame()
         self.show_new_game_frame()
         self.show_edit_board_frame()
         self.show_load_game_frame()
+        self.show_save_game_frame()
 
         # Initially show the main menu
         self.show_frame("main_menu")
@@ -75,6 +78,11 @@
         self.frames["load_game"] = frame
         self.load_game_frame = self.load_game_frame.setup_load_game_frame(frame)
 
+    def show_save_game_frame(self):
+        frame = tk.Frame(self)
+        self.frames["save_game"] = frame
+        self.save_game_frame = self.save_game_frame.setup_save_game_frame(frame)
+
     # Enter the main game board
     def show_game_play_frame(self):
         frame = tk.Frame(self)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e63f52e8-b5e2-4b82-8eb0-ddb8c465611b\" name=\"Changes\" comment=\"Gameboard visual updates\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Jupyter Notebook\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;PhDinTimeManagement&quot;\n  }\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/PhDinTimeManagement/The-Monopoly-Game-Project.git&quot;,\n    &quot;accountId&quot;: &quot;358c0e21-a4ef-4bac-aa60-9c8cdc9c591a&quot;\n  }\n}</component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 5\n}</component>\r\n  <component name=\"ProjectId\" id=\"2nZNqtspflyRZqXPpP505un74XG\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;Python tests.Python tests for test_GameController.TestGameController.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameController.TestGameController.test_load_game.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameController.TestGameController.test_save_game.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameController.TestGameController.test_save_gameboard.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameController.TestGameController.test_set_player_list.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_display_winner.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_game_ends.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_get_player_turn.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_out_jail_on_double.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_player_out.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests for test_Gameboard.TestProperty.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests in test_GameController.py.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests in test_GameLogic.py.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests in test_Gameboard.py.executor&quot;: &quot;Run&quot;,\n    &quot;Python tests.Python tests in tests.executor&quot;: &quot;Run&quot;,\n    &quot;Python.DisplayManager.executor&quot;: &quot;Run&quot;,\n    &quot;Python.GUI.executor&quot;: &quot;Run&quot;,\n    &quot;Python.GUI.py.executor&quot;: &quot;Run&quot;,\n    &quot;Python.converter.executor&quot;: &quot;Run&quot;,\n    &quot;Python.gui.executor&quot;: &quot;Run&quot;,\n    &quot;Python.new.executor&quot;: &quot;Run&quot;,\n    &quot;Python.play_game.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;TODO_SCOPE&quot;: &quot;All Places&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/tommy/Documents/INGEGNERIA/3.1 () Software Engineering/Group Project/The-Monopoly-Game-Project/assets/gameplay_frame&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\r\n  <component name=\"PyCoverageOptionsProvider\">\r\n    <option name=\"myUseBundledCoveragePy\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\tommy\\Documents\\INGEGNERIA\\3.1 () Software Engineering\\Group Project\\The-Monopoly-Game-Project\\assets\\gameplay_frame\" />\r\n      <recent name=\"C:\\Users\\Hp\\Desktop\\The-Monopoly-Game-Project\\src\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/assets/dice\" />\r\n      <recent name=\"$PROJECT_DIR$\" />\r\n      <recent name=\"$PROJECT_DIR$/src/View\" />\r\n      <recent name=\"D:\\PolyU\\PolyU Year 3\\COMP3211 Software Engineering\\Project Github\\src\\Model\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.play_game\">\r\n    <configuration name=\"GUI.py\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/View/GUI.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"play_game\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/play_game.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests for test_GameController.TestGameController\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;test_GameController.TestGameController&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests for test_GameController.TestGameController.test_set_player_list\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;test_GameController.TestGameController.test_set_player_list&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests in test_Gameboard.py\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;$PROJECT_DIR$/tests/test_Gameboard.py&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PATH&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests in tests\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;$PROJECT_DIR$/tests&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PATH&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"tests\" factoryName=\"Unittests\">\r\n      <module name=\"Source Code\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"$USER_HOME$/miniconda3/python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_pattern\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PATH&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Python.GUI.py\" />\r\n      <item itemvalue=\"Python.play_game\" />\r\n      <item itemvalue=\"Python tests.Python tests in test_Gameboard.py\" />\r\n      <item itemvalue=\"Python tests.Python tests for test_GameController.TestGameController\" />\r\n      <item itemvalue=\"Python tests.Python tests for test_GameController.TestGameController.test_set_player_list\" />\r\n      <item itemvalue=\"Python tests.Python tests in tests\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.play_game\" />\r\n        <item itemvalue=\"Python tests.Python tests in tests\" />\r\n        <item itemvalue=\"Python tests.Python tests in test_Gameboard.py\" />\r\n        <item itemvalue=\"Python tests.Python tests for test_GameController.TestGameController\" />\r\n        <item itemvalue=\"Python tests.Python tests for test_GameController.TestGameController.test_set_player_list\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-PY-242.23726.102\" />\r\n        <option value=\"bundled-python-sdk-5e1850174b45-399fe30bd8c1-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-242.23726.102\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"ShelveChangesManager\">\r\n    <option name=\"remove_strategy\" value=\"true\" />\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e63f52e8-b5e2-4b82-8eb0-ddb8c465611b\" name=\"Changes\" comment=\"\" />\r\n      <created>1729176831318</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1729176831318</updated>\r\n      <workItem from=\"1729176832503\" duration=\"5256000\" />\r\n      <workItem from=\"1729205014409\" duration=\"9100000\" />\r\n      <workItem from=\"1729216750621\" duration=\"322000\" />\r\n      <workItem from=\"1729217094305\" duration=\"939000\" />\r\n      <workItem from=\"1729258610543\" duration=\"706000\" />\r\n      <workItem from=\"1729259351895\" duration=\"10538000\" />\r\n      <workItem from=\"1729515491755\" duration=\"234000\" />\r\n      <workItem from=\"1729661586409\" duration=\"244000\" />\r\n      <workItem from=\"1729934612284\" duration=\"1836000\" />\r\n      <workItem from=\"1730004190962\" duration=\"1095000\" />\r\n      <workItem from=\"1730024143686\" duration=\"7972000\" />\r\n      <workItem from=\"1730109912025\" duration=\"33000\" />\r\n      <workItem from=\"1730110856482\" duration=\"230000\" />\r\n      <workItem from=\"1730111961934\" duration=\"1279000\" />\r\n      <workItem from=\"1730120246622\" duration=\"12973000\" />\r\n      <workItem from=\"1730199675463\" duration=\"26000\" />\r\n      <workItem from=\"1730208733155\" duration=\"322000\" />\r\n      <workItem from=\"1730278497914\" duration=\"318000\" />\r\n      <workItem from=\"1730278822997\" duration=\"15714000\" />\r\n      <workItem from=\"1730367503069\" duration=\"612000\" />\r\n      <workItem from=\"1730377042614\" duration=\"1385000\" />\r\n      <workItem from=\"1730743920545\" duration=\"780000\" />\r\n      <workItem from=\"1730767053814\" duration=\"1079000\" />\r\n      <workItem from=\"1730770731790\" duration=\"4357000\" />\r\n      <workItem from=\"1730850634269\" duration=\"17838000\" />\r\n      <workItem from=\"1730882470024\" duration=\"2769000\" />\r\n      <workItem from=\"1730889107444\" duration=\"4140000\" />\r\n      <workItem from=\"1730895521339\" duration=\"19539000\" />\r\n      <workItem from=\"1730964060732\" duration=\"1663000\" />\r\n      <workItem from=\"1730972783021\" duration=\"3191000\" />\r\n      <workItem from=\"1730989712473\" duration=\"1708000\" />\r\n      <workItem from=\"1730993765178\" duration=\"4274000\" />\r\n      <workItem from=\"1731031523855\" duration=\"11977000\" />\r\n      <workItem from=\"1731054695566\" duration=\"118000\" />\r\n      <workItem from=\"1731074412556\" duration=\"1797000\" />\r\n      <workItem from=\"1731078137827\" duration=\"10029000\" />\r\n      <workItem from=\"1731196069487\" duration=\"215000\" />\r\n      <workItem from=\"1731196700593\" duration=\"162000\" />\r\n      <workItem from=\"1731201908878\" duration=\"156000\" />\r\n      <workItem from=\"1731242001093\" duration=\"3471000\" />\r\n      <workItem from=\"1731245527946\" duration=\"3172000\" />\r\n      <workItem from=\"1731286034609\" duration=\"572000\" />\r\n      <workItem from=\"1731296715339\" duration=\"1587000\" />\r\n      <workItem from=\"1731299219928\" duration=\"11297000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"gameboard functions\">\r\n      <created>1729259402457</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729259402457</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"test\">\r\n      <created>1729259636382</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729259636382</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Classes V1 created&#10;standard Gameboard initialized and objects created\">\r\n      <created>1729273012131</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729273012131</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Updated gameboard and player functions to NEW US8\">\r\n      <created>1729936455309</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729936455309</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Updated gameboard and player functions to NEW US8 v2\">\r\n      <created>1730006659690</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730006659690</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Updated gameboard and player functions to NEW US8 v2\">\r\n      <created>1730006706523</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730006706523</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Updated gameboard and player functions to NEW US8 v3&#10;&#10;Added Unit tests to Gameboard.py\">\r\n      <created>1730032008562</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730032008562</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Touch Ups on Gameboard.py v5\">\r\n      <created>1730113203511</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730113203511</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Touch Ups on Gameboard.py v5\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730887919396</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730887919396</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"gameplay screen and color tiles\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730887941310</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730887941310</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"VIEW deconfliction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730957289520</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730957289520</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"VIEW deconfliction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730959929307</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730959929307</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"View pulling information from Controller's Gameboard to display tile colors\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730960307059</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730960307059</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"gameplay frame updates\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730979527952</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730979527952</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"gameplay frame updates\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730979567924</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730979567925</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"gameplay frame updates\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730979619739</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730979619739</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"load_color bug fix\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730992691005</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730992691005</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"load_color bug fix\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730992706781</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730992706781</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"new_buttons\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730996314464</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730996314464</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"new_buttons\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730996365290</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730996365290</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"restored GameController\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730997269019</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730997269019</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"restored GameController\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730997953416</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730997953416</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"displayed info on board\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731054717984</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731054717984</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"displayed info on board\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731054780781</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731054780781</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"displayed info on board\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731076215613</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731076215613</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"displayed info on board\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731081428735</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731081428735</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"displayed info on board\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731088137797</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731088137797</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Gameboard updates info as game is played\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731250632548</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731250632548</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"Gameboard updates info as game is played\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731298345147</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731298345147</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"Gameboard visual updates\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731316101583</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731316101583</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"31\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"main\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <ignored-roots>\r\n      <path value=\"$PROJECT_DIR$/..\" />\r\n    </ignored-roots>\r\n    <MESSAGE value=\"gameboard functions\" />\r\n    <MESSAGE value=\"test\" />\r\n    <MESSAGE value=\"Classes V1 created&#10;standard Gameboard initialized and objects created\" />\r\n    <MESSAGE value=\"Updated gameboard and player functions to NEW US8\" />\r\n    <MESSAGE value=\"Updated gameboard and player functions to NEW US8 v2\" />\r\n    <MESSAGE value=\"Updated gameboard and player functions to NEW US8 v3&#10;&#10;Added Unit tests to Gameboard.py\" />\r\n    <MESSAGE value=\"Touch Ups on Gameboard.py v5\" />\r\n    <MESSAGE value=\"gameplay screen and color tiles\" />\r\n    <MESSAGE value=\"VIEW deconfliction\" />\r\n    <MESSAGE value=\"View pulling information from Controller's Gameboard to display tile colors\" />\r\n    <MESSAGE value=\"gameplay frame updates\" />\r\n    <MESSAGE value=\"load_color bug fix\" />\r\n    <MESSAGE value=\"new_buttons\" />\r\n    <MESSAGE value=\"restored GameController\" />\r\n    <MESSAGE value=\"displayed info on board\" />\r\n    <MESSAGE value=\"Gameboard updates info as game is played\" />\r\n    <MESSAGE value=\"Gameboard visual updates\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Gameboard visual updates\" />\r\n    <option name=\"MAKE_NEW_CHANGELIST_ACTIVE\" value=\"true\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/Source Code/Source Code/Model/Gameboard.py</url>\r\n          <line>33</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n    <watches-manager>\r\n      <configuration name=\"PythonConfigurationType\">\r\n        <watch expression=\"self.tile_info\" language=\"Python\" />\r\n      </configuration>\r\n    </watches-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/Game_py$new.coverage\" NAME=\"new Coverage Results\" MODIFIED=\"1730338734766\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$DisplayManager.coverage\" NAME=\"DisplayManager Coverage Results\" MODIFIED=\"1730822333950\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$GUI.coverage\" NAME=\"GUI Coverage Results\" MODIFIED=\"1730824526772\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n    <SUITE FILE_PATH=\"coverage/The_Monopoly_Game_py$GUI.coverage\" NAME=\"GUI Coverage Results\" MODIFIED=\"1730881360455\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n    <SUITE FILE_PATH=\"coverage/The_Monopoly_Game_py$.coverage\" NAME=\" Coverage Results\" MODIFIED=\"1731303503602\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/tests\" />\r\n    <SUITE FILE_PATH=\"coverage/The_Monopoly_Game_py$play_game.coverage\" NAME=\"play_game Coverage Results\" MODIFIED=\"1731309702614\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$.coverage\" NAME=\" Coverage Results\" MODIFIED=\"1730198824506\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/tests\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$Test.coverage\" NAME=\"Test Coverage Results\" MODIFIED=\"1730432574768\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$gui.coverage\" NAME=\"gui Coverage Results\" MODIFIED=\"1730294710638\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n    <SUITE FILE_PATH=\"coverage/The_Monopoly_Game_py$GUI_py.coverage\" NAME=\"GUI.py Coverage Results\" MODIFIED=\"1730976251687\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/Game_py$converter.coverage\" NAME=\"converter Coverage Results\" MODIFIED=\"1730821085160\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/View\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 7ef0e685dbecbedf6673e94cf96a82493c24d727)
+++ b/.idea/workspace.xml	(date 1731318261759)
@@ -4,7 +4,13 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="e63f52e8-b5e2-4b82-8eb0-ddb8c465611b" name="Changes" comment="Gameboard visual updates" />
+    <list default="true" id="e63f52e8-b5e2-4b82-8eb0-ddb8c465611b" name="Changes" comment="Gameboard visual updates">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/assets/load_game_frame/load_game_frame_background.png" beforeDir="false" afterPath="$PROJECT_DIR$/assets/load_game_frame/load_game_frame_background.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/assets/save_game_frame/load_game_frame_background.png" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/View/DisplayManager.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/View/DisplayManager.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/View/GUI.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/View/GUI.py" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -20,6 +26,7 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="SWAP_SIDES_IN_COMPARE_BRANCHES" value="true" />
   </component>
   <component name="GitHubPullRequestSearchHistory">{
   &quot;lastFilter&quot;: {
@@ -48,46 +55,46 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;Python tests.Python tests for test_GameController.TestGameController.executor&quot;: &quot;Run&quot;,
-    &quot;Python tests.Python tests for test_GameController.TestGameController.test_load_game.executor&quot;: &quot;Run&quot;,
-    &quot;Python tests.Python tests for test_GameController.TestGameController.test_save_game.executor&quot;: &quot;Run&quot;,
-    &quot;Python tests.Python tests for test_GameController.TestGameController.test_save_gameboard.executor&quot;: &quot;Run&quot;,
-    &quot;Python tests.Python tests for test_GameController.TestGameController.test_set_player_list.executor&quot;: &quot;Run&quot;,
-    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.executor&quot;: &quot;Run&quot;,
-    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_display_winner.executor&quot;: &quot;Run&quot;,
-    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_game_ends.executor&quot;: &quot;Run&quot;,
-    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_get_player_turn.executor&quot;: &quot;Run&quot;,
-    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_out_jail_on_double.executor&quot;: &quot;Run&quot;,
-    &quot;Python tests.Python tests for test_GameLogic.TestGameLogic.test_player_out.executor&quot;: &quot;Run&quot;,
-    &quot;Python tests.Python tests for test_Gameboard.TestProperty.executor&quot;: &quot;Run&quot;,
-    &quot;Python tests.Python tests in test_GameController.py.executor&quot;: &quot;Run&quot;,
-    &quot;Python tests.Python tests in test_GameLogic.py.executor&quot;: &quot;Run&quot;,
-    &quot;Python tests.Python tests in test_Gameboard.py.executor&quot;: &quot;Run&quot;,
-    &quot;Python tests.Python tests in tests.executor&quot;: &quot;Run&quot;,
-    &quot;Python.DisplayManager.executor&quot;: &quot;Run&quot;,
-    &quot;Python.GUI.executor&quot;: &quot;Run&quot;,
-    &quot;Python.GUI.py.executor&quot;: &quot;Run&quot;,
-    &quot;Python.converter.executor&quot;: &quot;Run&quot;,
-    &quot;Python.gui.executor&quot;: &quot;Run&quot;,
-    &quot;Python.new.executor&quot;: &quot;Run&quot;,
-    &quot;Python.play_game.executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;TODO_SCOPE&quot;: &quot;All Places&quot;,
-    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/tommy/Documents/INGEGNERIA/3.1 () Software Engineering/Group Project/The-Monopoly-Game-Project/assets/gameplay_frame&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Python tests.Python tests for test_GameController.TestGameController.executor": "Run",
+    "Python tests.Python tests for test_GameController.TestGameController.test_load_game.executor": "Run",
+    "Python tests.Python tests for test_GameController.TestGameController.test_save_game.executor": "Run",
+    "Python tests.Python tests for test_GameController.TestGameController.test_save_gameboard.executor": "Run",
+    "Python tests.Python tests for test_GameController.TestGameController.test_set_player_list.executor": "Run",
+    "Python tests.Python tests for test_GameLogic.TestGameLogic.executor": "Run",
+    "Python tests.Python tests for test_GameLogic.TestGameLogic.test_display_winner.executor": "Run",
+    "Python tests.Python tests for test_GameLogic.TestGameLogic.test_game_ends.executor": "Run",
+    "Python tests.Python tests for test_GameLogic.TestGameLogic.test_get_player_turn.executor": "Run",
+    "Python tests.Python tests for test_GameLogic.TestGameLogic.test_out_jail_on_double.executor": "Run",
+    "Python tests.Python tests for test_GameLogic.TestGameLogic.test_player_out.executor": "Run",
+    "Python tests.Python tests for test_Gameboard.TestProperty.executor": "Run",
+    "Python tests.Python tests in test_GameController.py.executor": "Run",
+    "Python tests.Python tests in test_GameLogic.py.executor": "Run",
+    "Python tests.Python tests in test_Gameboard.py.executor": "Run",
+    "Python tests.Python tests in tests.executor": "Run",
+    "Python.DisplayManager.executor": "Run",
+    "Python.GUI.executor": "Run",
+    "Python.GUI.py.executor": "Run",
+    "Python.converter.executor": "Run",
+    "Python.gui.executor": "Run",
+    "Python.new.executor": "Run",
+    "Python.play_game.executor": "Run",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "TODO_SCOPE": "All Places",
+    "WebServerToolWindowFactoryState": "false",
+    "git-widget-placeholder": "main",
+    "last_opened_file_path": "C:/Users/tommy/Documents/INGEGNERIA/3.1 () Software Engineering/Group Project/The-Monopoly-Game-Project/assets/gameplay_frame",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "settings.editor.selected.configurable": "preferences.pluginManager",
+    "vue.rearranger.settings.migration": "true"
   }
-}</component>
+}]]></component>
   <component name="PyCoverageOptionsProvider">
     <option name="myUseBundledCoveragePy" value="true" />
   </component>
@@ -312,6 +319,8 @@
       <workItem from="1731286034609" duration="572000" />
       <workItem from="1731296715339" duration="1587000" />
       <workItem from="1731299219928" duration="11297000" />
+      <workItem from="1731316624086" duration="166000" />
+      <workItem from="1731316822841" duration="1429000" />
     </task>
     <task id="LOCAL-00001" summary="gameboard functions">
       <created>1729259402457</created>
@@ -620,7 +629,7 @@
     <SUITE FILE_PATH="coverage/Game_py$GUI.coverage" NAME="GUI Coverage Results" MODIFIED="1730824526772" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
     <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$GUI.coverage" NAME="GUI Coverage Results" MODIFIED="1730881360455" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
     <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$.coverage" NAME=" Coverage Results" MODIFIED="1731303503602" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/tests" />
-    <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$play_game.coverage" NAME="play_game Coverage Results" MODIFIED="1731309702614" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/The_Monopoly_Game_py$play_game.coverage" NAME="play_game Coverage Results" MODIFIED="1731317769422" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Game_py$.coverage" NAME=" Coverage Results" MODIFIED="1730198824506" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/tests" />
     <SUITE FILE_PATH="coverage/Game_py$Test.coverage" NAME="Test Coverage Results" MODIFIED="1730432574768" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Game_py$gui.coverage" NAME="gui Coverage Results" MODIFIED="1730294710638" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/View" />
